{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.HammerGestures = exports.Gestures = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _EnableExperimentalWebImplementation = require(\"./EnableExperimentalWebImplementation\");\nvar _InteractionManager = _interopRequireDefault(require(\"./web/tools/InteractionManager\"));\nvar _NodeManager = _interopRequireDefault(require(\"./web/tools/NodeManager\"));\nvar _PanGestureHandler = _interopRequireDefault(require(\"./web/handlers/PanGestureHandler\"));\nvar _TapGestureHandler = _interopRequireDefault(require(\"./web/handlers/TapGestureHandler\"));\nvar _LongPressGestureHandler = _interopRequireDefault(require(\"./web/handlers/LongPressGestureHandler\"));\nvar _PinchGestureHandler = _interopRequireDefault(require(\"./web/handlers/PinchGestureHandler\"));\nvar _RotationGestureHandler = _interopRequireDefault(require(\"./web/handlers/RotationGestureHandler\"));\nvar _FlingGestureHandler = _interopRequireDefault(require(\"./web/handlers/FlingGestureHandler\"));\nvar _NativeViewGestureHandler = _interopRequireDefault(require(\"./web/handlers/NativeViewGestureHandler\"));\nvar _ManualGestureHandler = _interopRequireDefault(require(\"./web/handlers/ManualGestureHandler\"));\nvar HammerNodeManager = _interopRequireWildcard(require(\"./web_hammer/NodeManager\"));\nvar _NativeViewGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/NativeViewGestureHandler\"));\nvar _PanGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/PanGestureHandler\"));\nvar _TapGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/TapGestureHandler\"));\nvar _LongPressGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/LongPressGestureHandler\"));\nvar _PinchGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/PinchGestureHandler\"));\nvar _RotationGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/RotationGestureHandler\"));\nvar _FlingGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/FlingGestureHandler\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar Gestures = {\n  NativeViewGestureHandler: _NativeViewGestureHandler.default,\n  PanGestureHandler: _PanGestureHandler.default,\n  TapGestureHandler: _TapGestureHandler.default,\n  LongPressGestureHandler: _LongPressGestureHandler.default,\n  PinchGestureHandler: _PinchGestureHandler.default,\n  RotationGestureHandler: _RotationGestureHandler.default,\n  FlingGestureHandler: _FlingGestureHandler.default,\n  ManualGestureHandler: _ManualGestureHandler.default\n};\nexports.Gestures = Gestures;\nvar HammerGestures = {\n  NativeViewGestureHandler: _NativeViewGestureHandler2.default,\n  PanGestureHandler: _PanGestureHandler2.default,\n  TapGestureHandler: _TapGestureHandler2.default,\n  LongPressGestureHandler: _LongPressGestureHandler2.default,\n  PinchGestureHandler: _PinchGestureHandler2.default,\n  RotationGestureHandler: _RotationGestureHandler2.default,\n  FlingGestureHandler: _FlingGestureHandler2.default\n};\nexports.HammerGestures = HammerGestures;\nvar _default = {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n      var GestureClass = Gestures[handlerName];\n      _NodeManager.default.createGestureHandler(handlerTag, new GestureClass());\n      _InteractionManager.default.getInstance().configureInteractions(_NodeManager.default.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (!(newView instanceof HTMLElement || newView instanceof _react.default.Component)) {\n      return;\n    }\n    if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n      _NodeManager.default.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n      _NodeManager.default.getHandler(handlerTag).updateGestureConfig(newConfig);\n      _InteractionManager.default.getInstance().configureInteractions(_NodeManager.default.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n      return _NodeManager.default.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n      _NodeManager.default.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};\nexports.default = _default;","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","NativeViewGestureHandler","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","ManualGestureHandler","HammerGestures","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","isExperimentalWebImplementationEnabled","Error","GestureClass","NodeManager","InteractionManager","getInstance","configureInteractions","getHandler","HammerNodeManager","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","HTMLElement","React","Component","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isExperimentalWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"script"}