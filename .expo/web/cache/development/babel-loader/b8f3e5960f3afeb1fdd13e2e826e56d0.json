{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedNode from \"./AnimatedNode\";\nimport { adapt } from \"../core/AnimatedBlock\";\nimport { val } from \"../val\";\nvar AnimatedConcat = function (_AnimatedNode) {\n  _inherits(AnimatedConcat, _AnimatedNode);\n  var _super = _createSuper(AnimatedConcat);\n  function AnimatedConcat(input) {\n    var _this;\n    _classCallCheck(this, AnimatedConcat);\n    _this = _super.call(this, {\n      type: 'concat',\n      input: input.map(function (n) {\n        return n.__nodeID;\n      })\n    }, input);\n    _this._input = input;\n    return _this;\n  }\n  _createClass(AnimatedConcat, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._input.reduce(function (prev, current) {\n        return prev + val(current);\n      }, '');\n    }\n  }]);\n  return AnimatedConcat;\n}(AnimatedNode);\nexport function createAnimatedConcat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return new AnimatedConcat(args.map(adapt));\n}","map":{"version":3,"names":["AnimatedNode","adapt","val","AnimatedConcat","input","type","map","n","__nodeID","_input","reduce","prev","current","createAnimatedConcat","args"],"sources":["C:/Users/HUSLIANA/react_native_storeapp-master/node_modules/react-native-reanimated/src/core/AnimatedConcat.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    super({ type: 'concat', input: input.map(n => n.__nodeID) }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"],"mappings":";;;;;;;AAAA,OAAOA,YAAY;AACnB,SAASC,KAAK;AACd,SAASC,GAAG;AAAiB,IAEvBC,cAAc;EAAA;EAAA;EAClB,wBAAYC,KAAK,EAAE;IAAA;IAAA;IACjB,0BAAM;MAAEC,IAAI,EAAE,QAAQ;MAAED,KAAK,EAAEA,KAAK,CAACE,GAAG,CAAC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAACC,QAAQ;MAAA;IAAE,CAAC,EAAEJ,KAAK;IAClE,MAAKK,MAAM,GAAGL,KAAK;IAAC;EACtB;EAAC;IAAA;IAAA,+BAEc;MACb,OAAO,IAAI,CAACK,MAAM,CAACC,MAAM,CAAC,UAACC,IAAI,EAAEC,OAAO;QAAA,OAAKD,IAAI,GAAGT,GAAG,CAACU,OAAO,CAAC;MAAA,GAAE,EAAE,CAAC;IACvE;EAAC;EAAA;AAAA,EAR0BZ,YAAY;AAWzC,OAAO,SAASa,oBAAoB,GAAU;EAAA,kCAANC,IAAI;IAAJA,IAAI;EAAA;EAC1C,OAAO,IAAIX,cAAc,CAACW,IAAI,CAACR,GAAG,CAACL,KAAK,CAAC,CAAC;AAC5C"},"metadata":{},"sourceType":"module"}