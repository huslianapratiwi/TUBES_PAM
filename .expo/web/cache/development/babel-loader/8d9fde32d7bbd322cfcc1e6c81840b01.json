{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _common = require(\"@react-native-firebase/app/lib/common\");\nvar _FirestoreDocumentChange = _interopRequireDefault(require(\"./FirestoreDocumentChange\"));\nvar _FirestoreDocumentSnapshot = _interopRequireDefault(require(\"./FirestoreDocumentSnapshot\"));\nvar _FirestoreSnapshotMetadata = _interopRequireDefault(require(\"./FirestoreSnapshotMetadata\"));\nvar FirestoreQuerySnapshot = function () {\n  function FirestoreQuerySnapshot(firestore, query, nativeData) {\n    (0, _classCallCheck2.default)(this, FirestoreQuerySnapshot);\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map(function ($) {\n      return new _FirestoreDocumentChange.default(firestore, $);\n    });\n    this._docs = nativeData.documents.map(function ($) {\n      return new _FirestoreDocumentSnapshot.default(firestore, $);\n    });\n    this._metadata = new _FirestoreSnapshotMetadata.default(nativeData.metadata);\n  }\n  (0, _createClass2.default)(FirestoreQuerySnapshot, [{\n    key: \"docChanges\",\n    value: function docChanges(options) {\n      if (!(0, _common.isUndefined)(options) && !(0, _common.isObject)(options)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\");\n      }\n      var includeMetaDataChanges = false;\n      if (options) {\n        if (!(0, _common.isBoolean)(options.includeMetadataChanges)) {\n          throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\");\n        }\n        includeMetaDataChanges = options.includeMetadataChanges;\n      }\n      if (this._source === 'get') {\n        return this._changes;\n      }\n      if (includeMetaDataChanges && this._excludesMetadataChanges) {\n        throw new Error('firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().');\n      }\n      return this._changes.filter(function ($) {\n        if (!includeMetaDataChanges) {\n          return $._isMetadataChange === false;\n        }\n        return true;\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      if (!(0, _common.isFunction)(callback)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\");\n      }\n      var cb = thisArg ? callback.bind(thisArg) : callback;\n      for (var i = 0; i < this._docs.length; i++) {\n        cb(this._docs[i], i);\n      }\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreQuerySnapshot)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\");\n      }\n      if (this.empty !== other.empty || this.size !== other.size || !this.metadata.isEqual(other.metadata)) {\n        return false;\n      }\n      for (var i = 0; i < this.docs.length; i++) {\n        var thisDoc = this.docs[i];\n        var otherDoc = other.docs[i];\n        if (!thisDoc.isEqual(otherDoc)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"docs\",\n    get: function get() {\n      return this._docs;\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return this._docs.length === 0;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this._query;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._docs.length;\n    }\n  }]);\n  return FirestoreQuerySnapshot;\n}();\nexports.default = FirestoreQuerySnapshot;","map":{"version":3,"names":["FirestoreQuerySnapshot","firestore","query","nativeData","_query","_source","source","_excludesMetadataChanges","excludesMetadataChanges","_changes","changes","map","$","FirestoreDocumentChange","_docs","documents","FirestoreDocumentSnapshot","_metadata","FirestoreSnapshotMetadata","metadata","options","isUndefined","isObject","Error","includeMetaDataChanges","isBoolean","includeMetadataChanges","filter","_isMetadataChange","callback","thisArg","isFunction","cb","bind","i","length","other","empty","size","isEqual","docs","thisDoc","otherDoc"],"sources":["C:/Users/HUSLIANA/react-native-ecommerce/node_modules/@react-native-firebase/firestore/lib/FirestoreQuerySnapshot.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isObject,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentChange from './FirestoreDocumentChange';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\n\nexport default class FirestoreQuerySnapshot {\n  constructor(firestore, query, nativeData) {\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map($ => new FirestoreDocumentChange(firestore, $));\n    this._docs = nativeData.documents.map($ => new FirestoreDocumentSnapshot(firestore, $));\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n  }\n\n  get docs() {\n    return this._docs;\n  }\n\n  get empty() {\n    return this._docs.length === 0;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  get size() {\n    return this._docs.length;\n  }\n\n  docChanges(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\",\n      );\n    }\n\n    let includeMetaDataChanges = false;\n\n    if (options) {\n      if (!isBoolean(options.includeMetadataChanges)) {\n        throw new Error(\n          \"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\",\n        );\n      }\n\n      includeMetaDataChanges = options.includeMetadataChanges;\n    }\n\n    // A get query should always return the document changes from native\n    if (this._source === 'get') {\n      return this._changes;\n    }\n\n    if (includeMetaDataChanges && this._excludesMetadataChanges) {\n      throw new Error(\n        'firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().',\n      );\n    }\n\n    return this._changes.filter($ => {\n      // Remove all changes that have come from metadata changes list\n      if (!includeMetaDataChanges) {\n        return $._isMetadataChange === false;\n      }\n\n      return true;\n    });\n  }\n\n  forEach(callback, thisArg) {\n    if (!isFunction(callback)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\",\n      );\n    }\n\n    const cb = thisArg ? callback.bind(thisArg) : callback;\n\n    for (let i = 0; i < this._docs.length; i++) {\n      cb(this._docs[i], i);\n    }\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuerySnapshot)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\",\n      );\n    }\n\n    // Simple checks first\n    if (\n      this.empty !== other.empty ||\n      this.size !== other.size ||\n      !this.metadata.isEqual(other.metadata)\n    ) {\n      return false;\n    }\n\n    // Expensive check\n    // Each doc must be in order & have the same data\n    for (let i = 0; i < this.docs.length; i++) {\n      const thisDoc = this.docs[i];\n      const otherDoc = other.docs[i];\n\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}