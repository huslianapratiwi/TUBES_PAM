{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createAnimatedBlock as block, adapt } from \"./AnimatedBlock\";\nimport { createAnimatedCall as call } from \"./AnimatedCall\";\nvar AnimatedDebug = function (_AnimatedNode) {\n  _inherits(AnimatedDebug, _AnimatedNode);\n  var _super = _createSuper(AnimatedDebug);\n  function AnimatedDebug(message, value) {\n    var _this;\n    _classCallCheck(this, AnimatedDebug);\n    _this = _super.call(this, {\n      type: 'debug',\n      message: message,\n      value: value.__nodeID\n    }, [value]);\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n  _createClass(AnimatedDebug, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = val(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n  return AnimatedDebug;\n}(AnimatedNode);\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    var runningInExpoShell = global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return block([call([value], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          a = _ref2[0];\n        return console.log(message + \" \" + a);\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  return value;\n}","map":{"version":3,"names":["val","AnimatedNode","createAnimatedBlock","block","adapt","createAnimatedCall","call","AnimatedDebug","message","value","type","__nodeID","_message","_value","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","global","Expo","Constants","appOwnership","a"],"sources":["C:/Users/HUSLIANA/react_native_storeapp-master/node_modules/react-native-reanimated/src/core/AnimatedDebug.js"],"sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport { createAnimatedBlock as block, adapt } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    super({ type: 'debug', message, value: value.__nodeID }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,GAAG;AACZ,OAAOC,YAAY;AACnB,SAASC,mBAAmB,IAAIC,KAAK,EAAEC,KAAK;AAC5C,SAASC,kBAAkB,IAAIC,IAAI;AAAyB,IAEtDC,aAAa;EAAA;EAAA;EAIjB,uBAAYC,OAAO,EAAEC,KAAK,EAAE;IAAA;IAAA;IAC1B,0BAAM;MAAEC,IAAI,EAAE,OAAO;MAAEF,OAAO,EAAPA,OAAO;MAAEC,KAAK,EAAEA,KAAK,CAACE;IAAS,CAAC,EAAE,CAACF,KAAK,CAAC;IAChE,MAAKG,QAAQ,GAAGJ,OAAO;IACvB,MAAKK,MAAM,GAAGJ,KAAK;IAAC;EACtB;EAAC;IAAA;IAAA,+BAEc;MACb,IAAMA,KAAK,GAAGT,GAAG,CAAC,IAAI,CAACa,MAAM,CAAC;MAC9BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,QAAQ,EAAEH,KAAK,CAAC;MACjC,OAAOA,KAAK;IACd;EAAC;EAAA;AAAA,EAdyBR,YAAY;AAiBxC,OAAO,SAASe,mBAAmB,CAACR,OAAO,EAAEC,KAAK,EAAE;EAClD,IAAIQ,OAAO,EAAE;IACX,IAAMC,uBAAuB,GAAG,OAAOC,IAAI,KAAK,WAAW;;IAI3D,IAAMC,kBAAkB,GACtBC,MAAM,CAACC,IAAI,IAAID,MAAM,CAACC,IAAI,CAACC,SAAS,CAACC,YAAY,KAAK,YAAY;IAEpE,IAAIN,uBAAuB,IAAIE,kBAAkB,EAAE;MAGjD,OAAOjB,KAAK,CAAC,CACXG,IAAI,CAAC,CAACG,KAAK,CAAC,EAAE;QAAA;UAAEgB,CAAC;QAAA,OAAMX,OAAO,CAACC,GAAG,CAAIP,OAAO,SAAIiB,CAAC,CAAG;MAAA,EAAC,EACtDhB,KAAK,CACN,CAAC;IACJ,CAAC,MAAM;MACL,OAAO,IAAIF,aAAa,CAACC,OAAO,EAAEJ,KAAK,CAACK,KAAK,CAAC,CAAC;IACjD;EACF;EAEA,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module"}