{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  enableScreens: true,\n  screensEnabled: true,\n  enableFreeze: true,\n  NativeScreen: true,\n  Screen: true,\n  InnerScreen: true,\n  ScreenContext: true,\n  ScreenContainer: true,\n  NativeScreenContainer: true,\n  NativeScreenNavigationContainer: true,\n  ScreenStack: true,\n  FullWindowOverlay: true,\n  ScreenStackHeaderBackButtonImage: true,\n  ScreenStackHeaderRightView: true,\n  ScreenStackHeaderLeftView: true,\n  ScreenStackHeaderCenterView: true,\n  ScreenStackHeaderSearchBarView: true,\n  ScreenStackHeaderConfig: true,\n  SearchBar: true,\n  ScreenStackHeaderSubview: true,\n  shouldUseActivityState: true,\n  useTransitionProgress: true,\n  isSearchBarAvailableForCurrentPlatform: true,\n  executeNativeBackPress: true\n};\nexports.enableScreens = enableScreens;\nexports.screensEnabled = screensEnabled;\nexports.enableFreeze = enableFreeze;\nObject.defineProperty(exports, \"useTransitionProgress\", {\n  enumerable: true,\n  get: function get() {\n    return _useTransitionProgress.default;\n  }\n});\nObject.defineProperty(exports, \"isSearchBarAvailableForCurrentPlatform\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.isSearchBarAvailableForCurrentPlatform;\n  }\n});\nObject.defineProperty(exports, \"executeNativeBackPress\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.executeNativeBackPress;\n  }\n});\nexports.shouldUseActivityState = exports.ScreenStackHeaderSubview = exports.SearchBar = exports.ScreenStackHeaderConfig = exports.ScreenStackHeaderSearchBarView = exports.ScreenStackHeaderCenterView = exports.ScreenStackHeaderLeftView = exports.ScreenStackHeaderRightView = exports.ScreenStackHeaderBackButtonImage = exports.FullWindowOverlay = exports.ScreenStack = exports.NativeScreenNavigationContainer = exports.NativeScreenContainer = exports.ScreenContainer = exports.ScreenContext = exports.InnerScreen = exports.Screen = exports.NativeScreen = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _types = require(\"./types\");\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _types[key];\n    }\n  });\n});\nvar _useTransitionProgress = _interopRequireDefault(require(\"./useTransitionProgress\"));\nvar _utils = require(\"./utils\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar ENABLE_SCREENS = true;\nfunction enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nfunction screensEnabled() {\n  return ENABLE_SCREENS;\n}\nfunction enableFreeze() {\n  var shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n}\nvar NativeScreen = function (_React$Component) {\n  (0, _inherits2.default)(NativeScreen, _React$Component);\n  var _super = _createSuper(NativeScreen);\n  function NativeScreen() {\n    (0, _classCallCheck2.default)(this, NativeScreen);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2.default)(NativeScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        active = _this$props.active,\n        activityState = _this$props.activityState,\n        style = _this$props.style,\n        _this$props$enabled = _this$props.enabled,\n        enabled = _this$props$enabled === void 0 ? ENABLE_SCREENS : _this$props$enabled,\n        rest = (0, _objectWithoutProperties2.default)(_this$props, [\"active\", \"activityState\", \"style\", \"enabled\"]);\n      if (enabled) {\n        if (active !== undefined && activityState === undefined) {\n          activityState = active !== 0 ? 2 : 0;\n        }\n        return _react.default.createElement(_reactNative.View, _extends({\n          hidden: activityState === 0,\n          style: [style, {\n            display: activityState !== 0 ? 'flex' : 'none'\n          }]\n        }, rest));\n      }\n      return _react.default.createElement(_reactNative.View, rest);\n    }\n  }]);\n  return NativeScreen;\n}(_react.default.Component);\nexports.NativeScreen = NativeScreen;\nvar Screen = _reactNative.Animated.createAnimatedComponent(NativeScreen);\nexports.Screen = Screen;\nvar InnerScreen = _reactNative.View;\nexports.InnerScreen = InnerScreen;\nvar ScreenContext = _react.default.createContext(Screen);\nexports.ScreenContext = ScreenContext;\nvar ScreenContainer = _reactNative.View;\nexports.ScreenContainer = ScreenContainer;\nvar NativeScreenContainer = _reactNative.View;\nexports.NativeScreenContainer = NativeScreenContainer;\nvar NativeScreenNavigationContainer = _reactNative.View;\nexports.NativeScreenNavigationContainer = NativeScreenNavigationContainer;\nvar ScreenStack = _reactNative.View;\nexports.ScreenStack = ScreenStack;\nvar FullWindowOverlay = _reactNative.View;\nexports.FullWindowOverlay = FullWindowOverlay;\nvar ScreenStackHeaderBackButtonImage = function ScreenStackHeaderBackButtonImage(props) {\n  return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Image, _extends({\n    resizeMode: \"center\",\n    fadeDuration: 0\n  }, props)));\n};\nexports.ScreenStackHeaderBackButtonImage = ScreenStackHeaderBackButtonImage;\nvar ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {\n  return _react.default.createElement(_reactNative.View, props);\n};\nexports.ScreenStackHeaderRightView = ScreenStackHeaderRightView;\nvar ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {\n  return _react.default.createElement(_reactNative.View, props);\n};\nexports.ScreenStackHeaderLeftView = ScreenStackHeaderLeftView;\nvar ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {\n  return _react.default.createElement(_reactNative.View, props);\n};\nexports.ScreenStackHeaderCenterView = ScreenStackHeaderCenterView;\nvar ScreenStackHeaderSearchBarView = function ScreenStackHeaderSearchBarView(props) {\n  return _react.default.createElement(_reactNative.View, props);\n};\nexports.ScreenStackHeaderSearchBarView = ScreenStackHeaderSearchBarView;\nvar ScreenStackHeaderConfig = _reactNative.View;\nexports.ScreenStackHeaderConfig = ScreenStackHeaderConfig;\nvar SearchBar = _reactNative.View;\nexports.SearchBar = SearchBar;\nvar ScreenStackHeaderSubview = _reactNative.View;\nexports.ScreenStackHeaderSubview = ScreenStackHeaderSubview;\nvar shouldUseActivityState = true;\nexports.shouldUseActivityState = shouldUseActivityState;","map":{"version":3,"sources":["index.tsx"],"names":["ENABLE_SCREENS","enableScreens","shouldEnableScreens","screensEnabled","enableFreeze","shouldEnableReactFreeze","NativeScreen","React","Component","active","activityState","style","enabled","rest","props","undefined","display","Screen","Animated","createAnimatedComponent","InnerScreen","View","ScreenContext","createContext","ScreenContainer","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","FullWindowOverlay","ScreenStackHeaderBackButtonImage","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenStackHeaderConfig","SearchBar","ScreenStackHeaderSubview","shouldUseActivityState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n  SearchBarProps,\n} from './types';\n\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze(shouldEnableReactFreeze = true): void {\n  // noop\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const InnerScreen = View;\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenNavigationContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const FullWindowOverlay = View;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> = View;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar: React.ComponentType<SearchBarProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>> = View;\n\nexport const shouldUseActivityState = true;\n"]},"metadata":{},"sourceType":"script"}