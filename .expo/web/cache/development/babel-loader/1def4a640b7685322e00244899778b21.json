{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firebase = exports.default = exports.SDK_VERSION = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _common = require(\"@react-native-firebase/app/lib/common\");\nvar _internal = require(\"@react-native-firebase/app/lib/internal\");\nvar _FirestoreCollectionReference = _interopRequireDefault(require(\"./FirestoreCollectionReference\"));\nvar _FirestoreDocumentReference = _interopRequireDefault(require(\"./FirestoreDocumentReference\"));\nvar _FirestorePath = _interopRequireDefault(require(\"./FirestorePath\"));\nvar _FirestoreQuery = _interopRequireDefault(require(\"./FirestoreQuery\"));\nvar _FirestoreQueryModifiers = _interopRequireDefault(require(\"./FirestoreQueryModifiers\"));\nvar _FirestoreStatics = _interopRequireDefault(require(\"./FirestoreStatics\"));\nvar _FirestoreTransactionHandler = _interopRequireDefault(require(\"./FirestoreTransactionHandler\"));\nvar _FirestoreWriteBatch = _interopRequireDefault(require(\"./FirestoreWriteBatch\"));\nvar _version = _interopRequireDefault(require(\"./version\"));\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar namespace = 'firestore';\nvar nativeModuleName = ['RNFBFirestoreModule', 'RNFBFirestoreCollectionModule', 'RNFBFirestoreDocumentModule', 'RNFBFirestoreTransactionModule'];\nvar nativeEvents = ['firestore_collection_sync_event', 'firestore_document_sync_event', 'firestore_transaction_event'];\nvar FirebaseFirestoreModule = function (_FirebaseModule) {\n  (0, _inherits2.default)(FirebaseFirestoreModule, _FirebaseModule);\n  var _super = _createSuper(FirebaseFirestoreModule);\n  function FirebaseFirestoreModule(app, config) {\n    var _this;\n    (0, _classCallCheck2.default)(this, FirebaseFirestoreModule);\n    _this = _super.call(this, app, config);\n    _this._referencePath = new _FirestorePath.default();\n    _this._transactionHandler = new _FirestoreTransactionHandler.default((0, _assertThisInitialized2.default)(_this));\n    _this.emitter.addListener(_this.eventNameForApp('firestore_collection_sync_event'), function (event) {\n      _this.emitter.emit(_this.eventNameForApp(\"firestore_collection_sync_event:\" + event.listenerId), event);\n    });\n    _this.emitter.addListener(_this.eventNameForApp('firestore_document_sync_event'), function (event) {\n      _this.emitter.emit(_this.eventNameForApp(\"firestore_document_sync_event:\" + event.listenerId), event);\n    });\n    _this._settings = {\n      ignoreUndefinedProperties: false\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(FirebaseFirestoreModule, [{\n    key: \"batch\",\n    value: function batch() {\n      return new _FirestoreWriteBatch.default(this);\n    }\n  }, {\n    key: \"clearPersistence\",\n    value: function clearPersistence() {\n      return _regenerator.default.async(function clearPersistence$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(this.native.clearPersistence());\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"waitForPendingWrites\",\n    value: function waitForPendingWrites() {\n      return _regenerator.default.async(function waitForPendingWrites$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(this.native.waitForPendingWrites());\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      return _regenerator.default.async(function terminate$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(this.native.terminate());\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      if (!host || !(0, _common.isString)(host) || !port || !(0, _common.isNumber)(port)) {\n        throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n      }\n      var _host = host;\n      if (_common.isAndroid && _host) {\n        if (_host === 'localhost' || _host === '127.0.0.1') {\n          _host = '10.0.2.2';\n          console.log('Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n      }\n      this.native.useEmulator(_host, port);\n      return [_host, port];\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      if (!(0, _common.isString)(collectionPath)) {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a string value.\");\n      }\n      if (collectionPath === '') {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\");\n      }\n      var path = this._referencePath.child(collectionPath);\n      if (!path.isCollection) {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\");\n      }\n      return new _FirestoreCollectionReference.default(this, path);\n    }\n  }, {\n    key: \"collectionGroup\",\n    value: function collectionGroup(collectionId) {\n      if (!(0, _common.isString)(collectionId)) {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\");\n      }\n      if (collectionId === '') {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\");\n      }\n      if (collectionId.indexOf('/') >= 0) {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\");\n      }\n      return new _FirestoreQuery.default(this, this._referencePath.child(collectionId), new _FirestoreQueryModifiers.default().asCollectionGroupQuery());\n    }\n  }, {\n    key: \"disableNetwork\",\n    value: function disableNetwork() {\n      return _regenerator.default.async(function disableNetwork$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regenerator.default.awrap(this.native.disableNetwork());\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"doc\",\n    value: function doc(documentPath) {\n      if (!(0, _common.isString)(documentPath)) {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n      }\n      if (documentPath === '') {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n      }\n      var path = this._referencePath.child(documentPath);\n      if (!path.isDocument) {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n      }\n      return new _FirestoreDocumentReference.default(this, path);\n    }\n  }, {\n    key: \"enableNetwork\",\n    value: function enableNetwork() {\n      return _regenerator.default.async(function enableNetwork$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regenerator.default.awrap(this.native.enableNetwork());\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"runTransaction\",\n    value: function runTransaction(updateFunction) {\n      if (!(0, _common.isFunction)(updateFunction)) {\n        return Promise.reject(new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"));\n      }\n      return this._transactionHandler._add(updateFunction);\n    }\n  }, {\n    key: \"settings\",\n    value: function settings(_settings) {\n      if (!(0, _common.isObject)(_settings)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"));\n      }\n      var keys = Object.keys(_settings);\n      var opts = ['cacheSizeBytes', 'host', 'persistence', 'ssl', 'ignoreUndefinedProperties', 'serverTimestampBehavior'];\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        if (!opts.includes(key)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.\" + key + \"' is not a valid settings field.\"));\n        }\n      }\n      if (!(0, _common.isUndefined)(_settings.cacheSizeBytes)) {\n        if (!(0, _common.isNumber)(_settings.cacheSizeBytes)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\"));\n        }\n        if (_settings.cacheSizeBytes !== _FirestoreStatics.default.CACHE_SIZE_UNLIMITED && _settings.cacheSizeBytes < 1048576) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\"));\n        }\n      }\n      if (!(0, _common.isUndefined)(_settings.host)) {\n        console.warn('host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.');\n        if (!(0, _common.isString)(_settings.host)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"));\n        }\n        if (_settings.host === '') {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\"));\n        }\n        if (_common.isAndroid) {\n          if (_settings.host.startsWith('localhost')) {\n            _settings.host = _settings.host.replace('localhost', '10.0.2.2');\n            console.log('Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n          }\n          if (_settings.host.startsWith('127.0.0.1')) {\n            _settings.host = _settings.host.replace('127.0.0.1', '10.0.2.2');\n            console.log('Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n          }\n        }\n      }\n      if (!(0, _common.isUndefined)(_settings.persistence) && !(0, _common.isBoolean)(_settings.persistence)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\"));\n      }\n      if (!(0, _common.isUndefined)(_settings.ssl) && !(0, _common.isBoolean)(_settings.ssl)) {\n        throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n      }\n      if (!(0, _common.isUndefined)(_settings.serverTimestampBehavior) && !['estimate', 'previous', 'none'].includes(_settings.serverTimestampBehavior)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\"));\n      }\n      if (!(0, _common.isUndefined)(_settings.ignoreUndefinedProperties)) {\n        if (!(0, _common.isBoolean)(_settings.ignoreUndefinedProperties)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\"));\n        } else {\n          this._settings.ignoreUndefinedProperties = _settings.ignoreUndefinedProperties;\n        }\n        delete _settings.ignoreUndefinedProperties;\n      }\n      return this.native.settings(_settings);\n    }\n  }]);\n  return FirebaseFirestoreModule;\n}(_internal.FirebaseModule);\nvar SDK_VERSION = _version.default;\nexports.SDK_VERSION = SDK_VERSION;\nvar _default = (0, _internal.createModuleNamespace)({\n  statics: _FirestoreStatics.default,\n  version: _version.default,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule\n});\nexports.default = _default;\nvar firebase = (0, _internal.getFirebaseRoot)();\nexports.firebase = firebase;","map":{"version":3,"names":["namespace","nativeModuleName","nativeEvents","FirebaseFirestoreModule","app","config","_referencePath","FirestorePath","_transactionHandler","FirestoreTransactionHandler","emitter","addListener","eventNameForApp","event","emit","listenerId","_settings","ignoreUndefinedProperties","FirestoreWriteBatch","native","clearPersistence","waitForPendingWrites","terminate","host","port","isString","isNumber","Error","_host","isAndroid","console","log","useEmulator","collectionPath","path","child","isCollection","FirestoreCollectionReference","collectionId","indexOf","FirestoreQuery","FirestoreQueryModifiers","asCollectionGroupQuery","disableNetwork","documentPath","isDocument","FirestoreDocumentReference","enableNetwork","updateFunction","isFunction","Promise","reject","_add","settings","isObject","keys","Object","opts","i","length","key","includes","isUndefined","cacheSizeBytes","FirestoreStatics","CACHE_SIZE_UNLIMITED","warn","startsWith","replace","persistence","isBoolean","ssl","serverTimestampBehavior","FirebaseModule","SDK_VERSION","version","createModuleNamespace","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase","getFirebaseRoot"],"sources":["C:/Users/HUSLIANA/react-native-ecommerce/node_modules/@react-native-firebase/firestore/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isAndroid,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from './FirestoreCollectionReference';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestorePath from './FirestorePath';\nimport FirestoreQuery from './FirestoreQuery';\nimport FirestoreQueryModifiers from './FirestoreQueryModifiers';\nimport FirestoreStatics from './FirestoreStatics';\nimport FirestoreTransactionHandler from './FirestoreTransactionHandler';\nimport FirestoreWriteBatch from './FirestoreWriteBatch';\nimport version from './version';\n\nconst namespace = 'firestore';\n\nconst nativeModuleName = [\n  'RNFBFirestoreModule',\n  'RNFBFirestoreCollectionModule',\n  'RNFBFirestoreDocumentModule',\n  'RNFBFirestoreTransactionModule',\n];\n\nconst nativeEvents = [\n  'firestore_collection_sync_event',\n  'firestore_document_sync_event',\n  'firestore_transaction_event',\n];\n\nclass FirebaseFirestoreModule extends FirebaseModule {\n  constructor(app, config) {\n    super(app, config);\n    this._referencePath = new FirestorePath();\n    this._transactionHandler = new FirestoreTransactionHandler(this);\n\n    // Fan out native events\n    this.emitter.addListener(this.eventNameForApp('firestore_collection_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_collection_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this.emitter.addListener(this.eventNameForApp('firestore_document_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_document_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this._settings = {\n      ignoreUndefinedProperties: false,\n    };\n  }\n\n  batch() {\n    return new FirestoreWriteBatch(this);\n  }\n\n  async clearPersistence() {\n    await this.native.clearPersistence();\n  }\n\n  async waitForPendingWrites() {\n    await this.native.waitForPendingWrites();\n  }\n\n  async terminate() {\n    await this.native.terminate();\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    if (isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n        );\n      }\n    }\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a string value.\",\n      );\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\",\n      );\n    }\n\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\",\n      );\n    }\n\n    return new FirestoreCollectionReference(this, path);\n  }\n\n  collectionGroup(collectionId) {\n    if (!isString(collectionId)) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\",\n      );\n    }\n\n    if (collectionId === '') {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\",\n      );\n    }\n\n    if (collectionId.indexOf('/') >= 0) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\",\n      );\n    }\n\n    return new FirestoreQuery(\n      this,\n      this._referencePath.child(collectionId),\n      new FirestoreQueryModifiers().asCollectionGroupQuery(),\n    );\n  }\n\n  async disableNetwork() {\n    await this.native.disableNetwork();\n  }\n\n  doc(documentPath) {\n    if (!isString(documentPath)) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n    }\n\n    if (documentPath === '') {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n    }\n\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n    }\n\n    return new FirestoreDocumentReference(this, path);\n  }\n\n  async enableNetwork() {\n    await this.native.enableNetwork();\n  }\n\n  runTransaction(updateFunction) {\n    if (!isFunction(updateFunction)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"),\n      );\n    }\n\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"),\n      );\n    }\n\n    const keys = Object.keys(settings);\n\n    const opts = [\n      'cacheSizeBytes',\n      'host',\n      'persistence',\n      'ssl',\n      'ignoreUndefinedProperties',\n      'serverTimestampBehavior',\n    ];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (!opts.includes(key)) {\n        return Promise.reject(\n          new Error(\n            `firebase.firestore().settings(*) 'settings.${key}' is not a valid settings field.`,\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.cacheSizeBytes)) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\",\n          ),\n        );\n      }\n\n      if (\n        settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < 1048576 // 1MB\n      ) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\",\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.host)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.',\n      );\n      if (!isString(settings.host)) {\n        return Promise.reject(\n          new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"),\n        );\n      }\n\n      if (settings.host === '') {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\",\n          ),\n        );\n      }\n\n      if (isAndroid) {\n        if (settings.host.startsWith('localhost')) {\n          settings.host = settings.host.replace('localhost', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n        if (settings.host.startsWith('127.0.0.1')) {\n          settings.host = settings.host.replace('127.0.0.1', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n      }\n    }\n\n    if (!isUndefined(settings.persistence) && !isBoolean(settings.persistence)) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ssl) && !isBoolean(settings.ssl)) {\n      throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n    }\n\n    if (\n      !isUndefined(settings.serverTimestampBehavior) &&\n      !['estimate', 'previous', 'none'].includes(settings.serverTimestampBehavior)\n    ) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ignoreUndefinedProperties)) {\n      if (!isBoolean(settings.ignoreUndefinedProperties)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\",\n          ),\n        );\n      } else {\n        this._settings.ignoreUndefinedProperties = settings.ignoreUndefinedProperties;\n      }\n\n      delete settings.ignoreUndefinedProperties;\n    }\n\n    return this.native.settings(settings);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/firestore';\nexport const SDK_VERSION = version;\n\n// import firestore from '@react-native-firebase/firestore';\n// firestore().X(...);\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule,\n});\n\n// import firestore, { firebase } from '@react-native-firebase/firestore';\n// firestore().X(...);\n// firebase.firestore().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}