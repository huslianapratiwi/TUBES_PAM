{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statusCodes = exports.GoogleSigninSingleton = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _reactNative = require(\"react-native\");\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar RNGoogleSignin = _reactNative.NativeModules.RNGoogleSignin;\nvar IS_IOS = _reactNative.Platform.OS === 'ios';\nvar GoogleSignin = function () {\n  function GoogleSignin() {\n    (0, _classCallCheck2.default)(this, GoogleSignin);\n    _defineProperty(this, \"configPromise\", void 0);\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\"RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.\");\n    }\n  }\n  (0, _createClass2.default)(GoogleSignin, [{\n    key: \"signIn\",\n    value: function signIn() {\n      var options,\n        _args = arguments;\n      return _regenerator.default.async(function signIn$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return _regenerator.default.awrap(this.configPromise);\n            case 3:\n              _context.next = 5;\n              return _regenerator.default.awrap(RNGoogleSignin.signIn(options));\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"hasPlayServices\",\n    value: function hasPlayServices() {\n      var options,\n        _args2 = arguments;\n      return _regenerator.default.async(function hasPlayServices$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {\n                showPlayServicesUpdateDialog: true\n              };\n              if (!IS_IOS) {\n                _context2.next = 5;\n                break;\n              }\n              return _context2.abrupt(\"return\", true);\n            case 5:\n              if (!(options && options.showPlayServicesUpdateDialog === undefined)) {\n                _context2.next = 7;\n                break;\n              }\n              throw new Error('RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`');\n            case 7:\n              return _context2.abrupt(\"return\", RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog));\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (options.offlineAccess && !options.webClientId) {\n        throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n      }\n      this.configPromise = RNGoogleSignin.configure(options);\n    }\n  }, {\n    key: \"addScopes\",\n    value: function addScopes(options) {\n      var isSignedIn;\n      return _regenerator.default.async(function addScopes$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(this.isSignedIn());\n            case 2:\n              isSignedIn = _context3.sent;\n              if (isSignedIn) {\n                _context3.next = 5;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 5:\n              return _context3.abrupt(\"return\", IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser());\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"signInSilently\",\n    value: function signInSilently() {\n      return _regenerator.default.async(function signInSilently$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regenerator.default.awrap(this.configPromise);\n            case 2:\n              return _context4.abrupt(\"return\", RNGoogleSignin.signInSilently());\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      return _regenerator.default.async(function signOut$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", RNGoogleSignin.signOut());\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"revokeAccess\",\n    value: function revokeAccess() {\n      return _regenerator.default.async(function revokeAccess$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", RNGoogleSignin.revokeAccess());\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"isSignedIn\",\n    value: function isSignedIn() {\n      return _regenerator.default.async(function isSignedIn$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", RNGoogleSignin.isSignedIn());\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getCurrentUser\",\n    value: function getCurrentUser() {\n      return _regenerator.default.async(function getCurrentUser$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", RNGoogleSignin.getCurrentUser());\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"clearCachedAccessToken\",\n    value: function clearCachedAccessToken(tokenString) {\n      return _regenerator.default.async(function clearCachedAccessToken$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(!tokenString || typeof tokenString !== 'string')) {\n                _context9.next = 2;\n                break;\n              }\n              return _context9.abrupt(\"return\", Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.'));\n            case 2:\n              if (!IS_IOS) {\n                _context9.next = 6;\n                break;\n              }\n              _context9.t0 = null;\n              _context9.next = 9;\n              break;\n            case 6:\n              _context9.next = 8;\n              return _regenerator.default.awrap(RNGoogleSignin.clearCachedAccessToken(tokenString));\n            case 8:\n              _context9.t0 = _context9.sent;\n            case 9:\n              return _context9.abrupt(\"return\", _context9.t0);\n            case 10:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getTokens\",\n    value: function getTokens() {\n      var tokens, userObject;\n      return _regenerator.default.async(function getTokens$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!IS_IOS) {\n                _context10.next = 7;\n                break;\n              }\n              _context10.next = 3;\n              return _regenerator.default.awrap(RNGoogleSignin.getTokens());\n            case 3:\n              tokens = _context10.sent;\n              return _context10.abrupt(\"return\", tokens);\n            case 7:\n              _context10.next = 9;\n              return _regenerator.default.awrap(RNGoogleSignin.getTokens());\n            case 9:\n              userObject = _context10.sent;\n              return _context10.abrupt(\"return\", {\n                idToken: userObject.idToken,\n                accessToken: userObject.accessToken\n              });\n            case 11:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n  return GoogleSignin;\n}();\nvar GoogleSigninSingleton = new GoogleSignin();\nexports.GoogleSigninSingleton = GoogleSigninSingleton;\nvar statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED\n};\nexports.statusCodes = statusCodes;","map":{"version":3,"sources":["GoogleSignin.ts"],"names":["RNGoogleSignin","NativeModules","IS_IOS","Platform","OS","GoogleSignin","constructor","__DEV__","console","error","options","configPromise","signIn","showPlayServicesUpdateDialog","undefined","Error","playServicesAvailable","offlineAccess","webClientId","configure","isSignedIn","addScopes","getCurrentUser","signInSilently","signOut","revokeAccess","tokenString","Promise","reject","clearCachedAccessToken","tokens","getTokens","userObject","idToken","accessToken","GoogleSigninSingleton","statusCodes","SIGN_IN_CANCELLED","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","SIGN_IN_REQUIRED"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport type {\n  AddScopesParams,\n  SignInParams,\n  ConfigureParams,\n  HasPlayServicesParams,\n  User,\n} from './types';\n\nconst { RNGoogleSignin } = NativeModules;\n\nconst IS_IOS = Platform.OS === 'ios';\n\nclass GoogleSignin {\n  configPromise?: Promise<void>;\n\n  constructor() {\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\n        `RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.`,\n      );\n    }\n  }\n\n  async signIn(options: SignInParams = {}): Promise<User> {\n    await this.configPromise;\n    return await RNGoogleSignin.signIn(options);\n  }\n\n  async hasPlayServices(\n    options: HasPlayServicesParams = { showPlayServicesUpdateDialog: true },\n  ): Promise<boolean> {\n    if (IS_IOS) {\n      return true;\n    } else {\n      if (options && options.showPlayServicesUpdateDialog === undefined) {\n        throw new Error(\n          'RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`',\n        );\n      }\n      return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);\n    }\n  }\n\n  configure(options: ConfigureParams = {}): void {\n    if (options.offlineAccess && !options.webClientId) {\n      throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n    }\n\n    this.configPromise = RNGoogleSignin.configure(options);\n  }\n\n  async addScopes(options: AddScopesParams): Promise<User | null> {\n    const isSignedIn = await this.isSignedIn();\n    if (!isSignedIn) {\n      return null;\n    }\n    return IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser();\n  }\n\n  async signInSilently(): Promise<User> {\n    await this.configPromise;\n    return RNGoogleSignin.signInSilently();\n  }\n\n  async signOut(): Promise<null> {\n    return RNGoogleSignin.signOut();\n  }\n\n  async revokeAccess(): Promise<null> {\n    return RNGoogleSignin.revokeAccess();\n  }\n\n  async isSignedIn(): Promise<boolean> {\n    return RNGoogleSignin.isSignedIn();\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    return RNGoogleSignin.getCurrentUser();\n  }\n\n  async clearCachedAccessToken(tokenString: string): Promise<null> {\n    if (!tokenString || typeof tokenString !== 'string') {\n      return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');\n    }\n    return IS_IOS ? null : await RNGoogleSignin.clearCachedAccessToken(tokenString);\n  }\n\n  async getTokens(): Promise<{ idToken: string; accessToken: string }> {\n    if (IS_IOS) {\n      const tokens = await RNGoogleSignin.getTokens();\n      return tokens;\n    } else {\n      const userObject = await RNGoogleSignin.getTokens();\n      return {\n        idToken: userObject.idToken,\n        accessToken: userObject.accessToken,\n      };\n    }\n  }\n}\n\nexport const GoogleSigninSingleton = new GoogleSignin();\n\nexport const statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED,\n};\n"]},"metadata":{},"sourceType":"script"}