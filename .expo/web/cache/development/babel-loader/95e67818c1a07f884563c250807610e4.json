{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport { EventEmitter, Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock };\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function lockAsync(orientationLock) {\n  var orientationLocks;\n  return _regeneratorRuntime.async(function lockAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoScreenOrientation.lockAsync) {\n            _context.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n        case 2:\n          orientationLocks = Object.values(OrientationLock);\n          if (orientationLocks.includes(orientationLock)) {\n            _context.next = 5;\n            break;\n          }\n          throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n        case 5:\n          if (!(orientationLock === OrientationLock.OTHER)) {\n            _context.next = 7;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockAsync(orientationLock));\n        case 9:\n          _lastOrientationLock = orientationLock;\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function lockPlatformAsync(options) {\n  var screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb, platformOrientationParam, orientations, _iterator, _step, orientation, webOrientationLocks;\n  return _regeneratorRuntime.async(function lockPlatformAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoScreenOrientation.lockPlatformAsync) {\n            _context2.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n        case 2:\n          screenOrientationConstantAndroid = options.screenOrientationConstantAndroid, screenOrientationArrayIOS = options.screenOrientationArrayIOS, screenOrientationLockWeb = options.screenOrientationLockWeb;\n          if (!(Platform.OS === 'android' && screenOrientationConstantAndroid)) {\n            _context2.next = 9;\n            break;\n          }\n          if (!isNaN(screenOrientationConstantAndroid)) {\n            _context2.next = 6;\n            break;\n          }\n          throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \" + screenOrientationConstantAndroid);\n        case 6:\n          platformOrientationParam = screenOrientationConstantAndroid;\n          _context2.next = 28;\n          break;\n        case 9:\n          if (!(Platform.OS === 'ios' && screenOrientationArrayIOS)) {\n            _context2.next = 23;\n            break;\n          }\n          if (Array.isArray(screenOrientationArrayIOS)) {\n            _context2.next = 12;\n            break;\n          }\n          throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \" + screenOrientationArrayIOS);\n        case 12:\n          orientations = Object.values(Orientation);\n          _iterator = _createForOfIteratorHelperLoose(screenOrientationArrayIOS);\n        case 14:\n          if ((_step = _iterator()).done) {\n            _context2.next = 20;\n            break;\n          }\n          orientation = _step.value;\n          if (orientations.includes(orientation)) {\n            _context2.next = 18;\n            break;\n          }\n          throw new TypeError(\"lockPlatformAsync iOS platform: \" + orientation + \" is not a valid Orientation\");\n        case 18:\n          _context2.next = 14;\n          break;\n        case 20:\n          platformOrientationParam = screenOrientationArrayIOS;\n          _context2.next = 28;\n          break;\n        case 23:\n          if (!(Platform.OS === 'web' && screenOrientationLockWeb)) {\n            _context2.next = 28;\n            break;\n          }\n          webOrientationLocks = Object.values(WebOrientationLock);\n          if (webOrientationLocks.includes(screenOrientationLockWeb)) {\n            _context2.next = 27;\n            break;\n          }\n          throw new TypeError(\"Invalid Web Orientation Lock: \" + screenOrientationLockWeb);\n        case 27:\n          platformOrientationParam = screenOrientationLockWeb;\n        case 28:\n          if (platformOrientationParam) {\n            _context2.next = 30;\n            break;\n          }\n          throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n        case 30:\n          _context2.next = 32;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam));\n        case 32:\n          _lastOrientationLock = OrientationLock.OTHER;\n        case 33:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function unlockAsync() {\n  return _regeneratorRuntime.async(function unlockAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoScreenOrientation.unlockAsync) {\n            _context3.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.unlockAsync());\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getOrientationAsync() {\n  return _regeneratorRuntime.async(function getOrientationAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoScreenOrientation.getOrientationAsync) {\n            _context4.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.getOrientationAsync());\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getOrientationLockAsync() {\n  return _regeneratorRuntime.async(function getOrientationLockAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoScreenOrientation.getOrientationLockAsync) {\n            _context5.next = 2;\n            break;\n          }\n          return _context5.abrupt(\"return\", _lastOrientationLock);\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.getOrientationLockAsync());\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPlatformOrientationLockAsync() {\n  var platformOrientationLock;\n  return _regeneratorRuntime.async(function getPlatformOrientationLockAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.getPlatformOrientationLockAsync());\n        case 2:\n          platformOrientationLock = _context6.sent;\n          if (!(Platform.OS === 'android')) {\n            _context6.next = 7;\n            break;\n          }\n          return _context6.abrupt(\"return\", {\n            screenOrientationConstantAndroid: platformOrientationLock\n          });\n        case 7:\n          if (!(Platform.OS === 'ios')) {\n            _context6.next = 11;\n            break;\n          }\n          return _context6.abrupt(\"return\", {\n            screenOrientationArrayIOS: platformOrientationLock\n          });\n        case 11:\n          if (!(Platform.OS === 'web')) {\n            _context6.next = 15;\n            break;\n          }\n          return _context6.abrupt(\"return\", {\n            screenOrientationLockWeb: platformOrientationLock\n          });\n        case 15:\n          return _context6.abrupt(\"return\", {});\n        case 16:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function supportsOrientationLockAsync(orientationLock) {\n  var orientationLocks;\n  return _regeneratorRuntime.async(function supportsOrientationLockAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExpoScreenOrientation.supportsOrientationLockAsync) {\n            _context7.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n        case 2:\n          orientationLocks = Object.values(OrientationLock);\n          if (orientationLocks.includes(orientationLock)) {\n            _context7.next = 5;\n            break;\n          }\n          throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n        case 5:\n          _context7.next = 7;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock));\n        case 7:\n          return _context7.abrupt(\"return\", _context7.sent);\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n}\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(\"addOrientationChangeListener cannot be called with \" + listener);\n  }\n  var subscription = _orientationChangeEmitter.addListener(getEventName(), function _callee(update) {\n    var orientationInfo, orientationLock, _await$Promise$all, _await$Promise$all2;\n    return _regeneratorRuntime.async(function _callee$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(Platform.OS === 'ios' || Platform.OS === 'web')) {\n              _context8.next = 5;\n              break;\n            }\n            orientationLock = update.orientationLock;\n            orientationInfo = update.orientationInfo;\n            _context8.next = 11;\n            break;\n          case 5:\n            _context8.next = 7;\n            return _regeneratorRuntime.awrap(Promise.all([getOrientationLockAsync(), getOrientationAsync()]));\n          case 7:\n            _await$Promise$all = _context8.sent;\n            _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n            orientationLock = _await$Promise$all2[0];\n            orientationInfo = _await$Promise$all2[1];\n          case 11:\n            listener({\n              orientationInfo: orientationInfo,\n              orientationLock: orientationLock\n            });\n          case 12:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  var i = _orientationChangeSubscribers.length;\n  while (i--) {\n    var subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(\"Must pass in a valid subscription\");\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(function (sub) {\n    return sub !== subscription;\n  });\n}","map":{"version":3,"mappings":";;;;;AAAA,SAASA,YAAY,EAAEC,QAAQ,EAAgBC,mBAAmB,QAAQ,kBAAkB;AAE5F,OAAOC,qBAAqB;AAC5B,SACEC,WAAW,EAIXC,eAAe,EAEfC,YAAY,EACZC,kBAAkB;AAGpB,SACEH,WAAW,EACXC,eAAe,EACfC,YAAY,EAKZC,kBAAkB;AAGpB,IAAMC,yBAAyB,GAAG,IAAIR,YAAY,CAACG,qBAAqB,CAAC;AACzE,IAAIM,6BAA6B,GAAmB,EAAE;AAEtD,IAAIC,oBAAoB,GAAoBL,eAAe,CAACM,OAAO;AAEnE,OAAO,SAAeC,SAAS,CAACC,eAAgC;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IACzDV,qBAAqB,CAACS,SAAS;YAAA;YAAA;UAAA;UAAA,MAC5B,IAAIV,mBAAmB,CAAC,mBAAmB,EAAE,WAAW,CAAC;QAAA;UAG3DY,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAACX,eAAe,CAAC;UAAA,IAClDS,gBAAgB,CAACG,QAAQ,CAACJ,eAAe,CAAC;YAAA;YAAA;UAAA;UAAA,MACvC,IAAIK,SAAS,gCAA8BL,eAAe,CAAG;QAAA;UAAA,MAGjEA,eAAe,KAAKR,eAAe,CAACc,KAAK;YAAA;YAAA;UAAA;UAAA;QAAA;UAAA;UAAA,iCAIvChB,qBAAqB,CAACS,SAAS,CAACC,eAAe,CAAC;QAAA;UACtDH,oBAAoB,GAAGG,eAAe;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAGzC,OAAO,SAAeO,iBAAiB,CAACC,OAAgC;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IACjElB,qBAAqB,CAACiB,iBAAiB;YAAA;YAAA;UAAA;UAAA,MACpC,IAAIlB,mBAAmB,CAAC,mBAAmB,EAAE,mBAAmB,CAAC;QAAA;UAIvEoB,gCAAgC,GAG9BD,OAAO,CAHTC,gCAAgC,EAChCC,yBAAyB,GAEvBF,OAAO,CAFTE,yBAAyB,EACzBC,wBAAwB,GACtBH,OAAO,CADTG,wBAAwB;UAAA,MAGtBvB,QAAQ,CAACwB,EAAE,KAAK,SAAS,IAAIH,gCAAgC;YAAA;YAAA;UAAA;UAAA,KAC3DI,KAAK,CAACJ,gCAAgC,CAAC;YAAA;YAAA;UAAA;UAAA,MACnC,IAAIJ,SAAS,iGAC6EI,gCAAgC,CAC/H;QAAA;UAEHK,wBAAwB,GAAGL,gCAAgC;UAAC;UAAA;QAAA;UAAA,MACnDrB,QAAQ,CAACwB,EAAE,KAAK,KAAK,IAAIF,yBAAyB;YAAA;YAAA;UAAA;UAAA,IACtDK,KAAK,CAACC,OAAO,CAACN,yBAAyB,CAAC;YAAA;YAAA;UAAA;UAAA,MACrC,IAAIL,SAAS,sFACkEK,yBAAyB,CAC7G;QAAA;UAGGO,YAAY,GAAGf,MAAM,CAACC,MAAM,CAACZ,WAAW,CAAC;UAAA,4CACvBmB,yBAAyB;QAAA;UAAA;YAAA;YAAA;UAAA;UAAxCQ,WAAW;UAAA,IACbD,YAAY,CAACb,QAAQ,CAACc,WAAW,CAAC;YAAA;YAAA;UAAA;UAAA,MAC/B,IAAIb,SAAS,sCACkBa,WAAW,iCAC/C;QAAA;UAAA;UAAA;QAAA;UAGLJ,wBAAwB,GAAGJ,yBAAyB;UAAC;UAAA;QAAA;UAAA,MAC5CtB,QAAQ,CAACwB,EAAE,KAAK,KAAK,IAAID,wBAAwB;YAAA;YAAA;UAAA;UACpDQ,mBAAmB,GAAGjB,MAAM,CAACC,MAAM,CAACT,kBAAkB,CAAC;UAAA,IACxDyB,mBAAmB,CAACf,QAAQ,CAACO,wBAAwB,CAAC;YAAA;YAAA;UAAA;UAAA,MACnD,IAAIN,SAAS,oCAAkCM,wBAAwB,CAAG;QAAA;UAElFG,wBAAwB,GAAGH,wBAAwB;QAAC;UAAA,IAGjDG,wBAAwB;YAAA;YAAA;UAAA;UAAA,MACrB,IAAIT,SAAS,CAAC,qEAAqE,CAAC;QAAA;UAAA;UAAA,iCAEtFf,qBAAqB,CAACiB,iBAAiB,CAACO,wBAAwB,CAAC;QAAA;UACvEjB,oBAAoB,GAAGL,eAAe,CAACc,KAAK;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAG/C,OAAO,SAAec,WAAW;EAAA;IAAA;MAAA;QAAA;UAAA,IAC1B9B,qBAAqB,CAAC8B,WAAW;YAAA;YAAA;UAAA;UAAA,MAC9B,IAAI/B,mBAAmB,CAAC,mBAAmB,EAAE,aAAa,CAAC;QAAA;UAAA;UAAA,iCAE7DC,qBAAqB,CAAC8B,WAAW,EAAE;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAG3C,OAAO,SAAeC,mBAAmB;EAAA;IAAA;MAAA;QAAA;UAAA,IAClC/B,qBAAqB,CAAC+B,mBAAmB;YAAA;YAAA;UAAA;UAAA,MACtC,IAAIhC,mBAAmB,CAAC,mBAAmB,EAAE,qBAAqB,CAAC;QAAA;UAAA;UAAA,iCAE9DC,qBAAqB,CAAC+B,mBAAmB,EAAE;QAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAG1D,OAAO,SAAeC,uBAAuB;EAAA;IAAA;MAAA;QAAA;UAAA,IACtChC,qBAAqB,CAACgC,uBAAuB;YAAA;YAAA;UAAA;UAAA,kCACzCzB,oBAAoB;QAAA;UAAA;UAAA,iCAEhBP,qBAAqB,CAACgC,uBAAuB,EAAE;QAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAG9D,OAAO,SAAeC,+BAA+B;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,iCACbjC,qBAAqB,CAACiC,+BAA+B,EAAE;QAAA;UAAvFC,uBAAuB;UAAA,MACzBpC,QAAQ,CAACwB,EAAE,KAAK,SAAS;YAAA;YAAA;UAAA;UAAA,kCACpB;YACLH,gCAAgC,EAAEe;WACnC;QAAA;UAAA,MACQpC,QAAQ,CAACwB,EAAE,KAAK,KAAK;YAAA;YAAA;UAAA;UAAA,kCACvB;YACLF,yBAAyB,EAAEc;WAC5B;QAAA;UAAA,MACQpC,QAAQ,CAACwB,EAAE,KAAK,KAAK;YAAA;YAAA;UAAA;UAAA,kCACvB;YACLD,wBAAwB,EAAEa;WAC3B;QAAA;UAAA,kCAEM,EAAE;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAIb,OAAO,SAAeC,4BAA4B,CAChDzB,eAAgC;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IAE3BV,qBAAqB,CAACmC,4BAA4B;YAAA;YAAA;UAAA;UAAA,MAC/C,IAAIpC,mBAAmB,CAAC,mBAAmB,EAAE,8BAA8B,CAAC;QAAA;UAG9EY,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAACX,eAAe,CAAC;UAAA,IAClDS,gBAAgB,CAACG,QAAQ,CAACJ,eAAe,CAAC;YAAA;YAAA;UAAA;UAAA,MACvC,IAAIK,SAAS,gCAA8BL,eAAe,CAAG;QAAA;UAAA;UAAA,iCAGxDV,qBAAqB,CAACmC,4BAA4B,CAACzB,eAAe,CAAC;QAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAIlF,SAAS0B,YAAY;EACnB,OAAOtC,QAAQ,CAACwB,EAAE,KAAK,KAAK,IAAIxB,QAAQ,CAACwB,EAAE,KAAK,KAAK,GACjD,yBAAyB,GACzB,qBAAqB;AAC3B;AAKA,OAAM,SAAUe,4BAA4B,CAACC,QAAmC;EAC9E,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAClC,MAAM,IAAIvB,SAAS,yDAAuDuB,QAAQ,CAAG;;EAEvF,IAAMC,YAAY,GAAGlC,yBAAyB,CAACmC,WAAW,CACxDJ,YAAY,EAAE,EACd,iBAAOK,MAA8B;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAE/B3C,QAAQ,CAACwB,EAAE,KAAK,KAAK,IAAIxB,QAAQ,CAACwB,EAAE,KAAK,KAAK;cAAA;cAAA;YAAA;YAEhDZ,eAAe,GAAG+B,MAAM,CAAC/B,eAAe;YACxCgC,eAAe,GAAGD,MAAM,CAACC,eAAe;YAAC;YAAA;UAAA;YAAA;YAAA,iCAGEC,OAAO,CAACC,GAAG,CAAC,CACrDZ,uBAAuB,EAAE,EACzBD,mBAAmB,EAAE,CACtB,CAAC;UAAA;YAAA;YAAA;YAHDrB,eAAe;YAAEgC,eAAe;UAAA;YAKnCJ,QAAQ,CAAC;cAAEI,eAAe,EAAfA,eAAe;cAAEhC,eAAe,EAAfA;YAAe,CAAE,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAChD,CACF;EACDJ,6BAA6B,CAACuC,IAAI,CAACN,YAAY,CAAC;EAChD,OAAOA,YAAY;AACrB;AAKA,OAAM,SAAUO,gCAAgC;EAE9C,IAAIC,CAAC,GAAGzC,6BAA6B,CAAC0C,MAAM;EAC5C,OAAOD,CAAC,EAAE,EAAE;IACV,IAAME,UAAU,GAAG3C,6BAA6B,CAACyC,CAAC,CAAC;IACnDE,UAAU,CAACC,MAAM,EAAE;IAGnB5C,6BAA6B,CAAC6C,GAAG,EAAE;;AAEvC;AAEA,OAAM,SAAUC,+BAA+B,CAACb,YAA0B;EACxE,IAAI,CAACA,YAAY,IAAI,CAACA,YAAY,CAACW,MAAM,EAAE;IACzC,MAAM,IAAInC,SAAS,qCAAqC;;EAE1DwB,YAAY,CAACW,MAAM,EAAE;EACrB5C,6BAA6B,GAAGA,6BAA6B,CAAC+C,MAAM,CAAC,aAAG;IAAA,OAAIC,GAAG,KAAKf,YAAY;EAAA,EAAC;AACnG","names":["EventEmitter","Platform","UnavailabilityError","ExpoScreenOrientation","Orientation","OrientationLock","SizeClassIOS","WebOrientationLock","_orientationChangeEmitter","_orientationChangeSubscribers","_lastOrientationLock","UNKNOWN","lockAsync","orientationLock","orientationLocks","Object","values","includes","TypeError","OTHER","lockPlatformAsync","options","screenOrientationConstantAndroid","screenOrientationArrayIOS","screenOrientationLockWeb","OS","isNaN","platformOrientationParam","Array","isArray","orientations","orientation","webOrientationLocks","unlockAsync","getOrientationAsync","getOrientationLockAsync","getPlatformOrientationLockAsync","platformOrientationLock","supportsOrientationLockAsync","getEventName","addOrientationChangeListener","listener","subscription","addListener","update","orientationInfo","Promise","all","push","removeOrientationChangeListeners","i","length","subscriber","remove","pop","removeOrientationChangeListener","filter","sub"],"sourceRoot":"","sources":["../../src/ScreenOrientation/ScreenOrientation.ts"],"sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationInfo,\n  OrientationLock,\n  PlatformOrientationInfo,\n  SizeClassIOS,\n  WebOrientationLock,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  SizeClassIOS,\n  OrientationInfo,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb,\n  } = options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\n\nexport async function getOrientationAsync(): Promise<OrientationInfo> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        [orientationLock, orientationInfo] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\n"]},"metadata":{},"sourceType":"module"}