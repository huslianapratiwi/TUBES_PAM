{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _NativeFirebaseError = _interopRequireDefault(require(\"@react-native-firebase/app/lib/internal/NativeFirebaseError\"));\nvar _FirestoreTransaction = _interopRequireDefault(require(\"./FirestoreTransaction\"));\nvar transactionId = 0;\nvar generateTransactionId = function generateTransactionId() {\n  return transactionId++;\n};\nvar FirestoreTransactionHandler = function () {\n  function FirestoreTransactionHandler(firestore) {\n    (0, _classCallCheck2.default)(this, FirestoreTransactionHandler);\n    this._firestore = firestore;\n    this._pending = {};\n    this._firestore.emitter.addListener(this._firestore.eventNameForApp('firestore_transaction_event'), this._onTransactionEvent.bind(this));\n  }\n  (0, _createClass2.default)(FirestoreTransactionHandler, [{\n    key: \"_onTransactionEvent\",\n    value: function _onTransactionEvent(event) {\n      switch (event.body.type) {\n        case 'update':\n          this._handleUpdate(event);\n          break;\n        case 'error':\n          this._handleError(event);\n          break;\n        case 'complete':\n          this._handleComplete(event);\n          break;\n      }\n    }\n  }, {\n    key: \"_handleUpdate\",\n    value: function _handleUpdate(event) {\n      var id, _this$_pending$id, meta, transaction, updateFunction, reject, finalError, updateFailed, pendingResult, possiblePromise;\n      return _regenerator.default.async(function _handleUpdate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = event.listenerId;\n              if (this._pending[id]) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", this._remove(id));\n            case 3:\n              _this$_pending$id = this._pending[id], meta = _this$_pending$id.meta, transaction = _this$_pending$id.transaction;\n              updateFunction = meta.updateFunction, reject = meta.reject;\n              transaction._prepare();\n              _context.prev = 6;\n              possiblePromise = updateFunction(transaction);\n              if (!(!possiblePromise || !possiblePromise.then)) {\n                _context.next = 10;\n                break;\n              }\n              throw new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must return a Promise.\");\n            case 10:\n              _context.next = 12;\n              return _regenerator.default.awrap(possiblePromise);\n            case 12:\n              pendingResult = _context.sent;\n              _context.next = 19;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](6);\n              updateFailed = true;\n              finalError = _context.t0;\n            case 19:\n              if (!(updateFailed || finalError)) {\n                _context.next = 21;\n                break;\n              }\n              return _context.abrupt(\"return\", reject(finalError));\n            case 21:\n              transaction._pendingResult = pendingResult;\n              return _context.abrupt(\"return\", this._firestore.native.transactionApplyBuffer(id, transaction._commandBuffer));\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[6, 15]], Promise);\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(event) {\n      var id = event.listenerId,\n        body = event.body;\n      var error = body.error;\n      if (!this._pending[id]) {\n        return;\n      }\n      var meta = this._pending[id].meta;\n      if (meta && error) {\n        var errorAndStack = _NativeFirebaseError.default.fromEvent(error, 'firestore', meta.stack);\n        meta.reject(errorAndStack);\n      }\n    }\n  }, {\n    key: \"_handleComplete\",\n    value: function _handleComplete(event) {\n      var id = event.listenerId;\n      if (!this._pending[id]) {\n        return;\n      }\n      var _this$_pending$id2 = this._pending[id],\n        meta = _this$_pending$id2.meta,\n        transaction = _this$_pending$id2.transaction;\n      if (meta) {\n        meta.resolve(transaction._pendingResult);\n      }\n    }\n  }, {\n    key: \"_add\",\n    value: function _add(updateFunction) {\n      var _this = this;\n      var id = generateTransactionId();\n      var meta = {\n        id: id,\n        updateFunction: updateFunction,\n        stack: new Error().stack.split('\\n').slice(2).join('\\n')\n      };\n      this._pending[id] = {\n        meta: meta,\n        transaction: new _FirestoreTransaction.default(this._firestore, meta)\n      };\n      return new Promise(function (resolve, reject) {\n        _this._firestore.native.transactionBegin(id);\n        meta.resolve = function (result) {\n          _this._remove(id);\n          resolve(result);\n        };\n        meta.reject = function (error) {\n          _this._remove(id);\n          reject(error);\n        };\n      });\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove(id) {\n      this._firestore.native.transactionDispose(id);\n      delete this._pending[id];\n    }\n  }]);\n  return FirestoreTransactionHandler;\n}();\nexports.default = FirestoreTransactionHandler;","map":{"version":3,"names":["transactionId","generateTransactionId","FirestoreTransactionHandler","firestore","_firestore","_pending","emitter","addListener","eventNameForApp","_onTransactionEvent","bind","event","body","type","_handleUpdate","_handleError","_handleComplete","id","listenerId","_remove","meta","transaction","updateFunction","reject","_prepare","possiblePromise","then","Error","pendingResult","updateFailed","finalError","_pendingResult","native","transactionApplyBuffer","_commandBuffer","error","errorAndStack","NativeError","fromEvent","stack","resolve","split","slice","join","FirestoreTransaction","Promise","transactionBegin","result","transactionDispose"],"sources":["C:/Users/HUSLIANA/react-native-ecommerce/node_modules/@react-native-firebase/firestore/lib/FirestoreTransactionHandler.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport FirestoreTransaction from './FirestoreTransaction';\n\nlet transactionId = 0;\n\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\nconst generateTransactionId = () => transactionId++;\n\nexport default class FirestoreTransactionHandler {\n  constructor(firestore) {\n    this._firestore = firestore;\n    this._pending = {};\n    this._firestore.emitter.addListener(\n      this._firestore.eventNameForApp('firestore_transaction_event'),\n      this._onTransactionEvent.bind(this),\n    );\n  }\n\n  _onTransactionEvent(event) {\n    switch (event.body.type) {\n      case 'update':\n        this._handleUpdate(event);\n        break;\n      case 'error':\n        this._handleError(event);\n        break;\n      case 'complete':\n        this._handleComplete(event);\n        break;\n    }\n  }\n\n  async _handleUpdate(event) {\n    const { listenerId: id } = event;\n\n    // abort if no longer exists js side\n    if (!this._pending[id]) {\n      return this._remove(id);\n    }\n\n    const { meta, transaction } = this._pending[id];\n    const { updateFunction, reject } = meta;\n\n    // clear any saved state from previous transaction runs\n    transaction._prepare();\n\n    let finalError;\n    let updateFailed;\n    let pendingResult;\n\n    try {\n      const possiblePromise = updateFunction(transaction);\n\n      // validate user has returned a promise in their update function\n      if (!possiblePromise || !possiblePromise.then) {\n        throw new Error(\n          \"firebase.firestore().runTransaction(*) 'updateFunction' must return a Promise.\",\n        );\n      }\n\n      pendingResult = await possiblePromise;\n    } catch (exception) {\n      // exception can still be falsey if user `Promise.reject();` 's with no args\n      // so we track the exception with a updateFailed boolean to ensure no fall-through\n      updateFailed = true;\n      finalError = exception;\n    }\n\n    // reject the final promise and remove from native\n    // update is failed when either the users updateFunction\n    // throws an error or rejects a promise\n    if (updateFailed || finalError) {\n      return reject(finalError);\n    }\n\n    // capture the resolved result as we'll need this\n    // to resolve the runTransaction() promise when\n    // native emits that the transaction is final\n    transaction._pendingResult = pendingResult;\n\n    // send the buffered update/set/delete commands for native to process\n    return this._firestore.native.transactionApplyBuffer(id, transaction._commandBuffer);\n  }\n\n  /**\n   * Reject the promise with a native error event\n   *\n   * @param event\n   * @private\n   */\n  _handleError(event) {\n    const { listenerId: id, body } = event;\n    const { error } = body;\n\n    if (!this._pending[id]) {\n      return;\n    }\n\n    const { meta } = this._pending[id];\n\n    if (meta && error) {\n      const errorAndStack = NativeError.fromEvent(error, 'firestore', meta.stack);\n      meta.reject(errorAndStack);\n    }\n  }\n\n  /**\n   * Once the transaction has completed on native, resolve the promise with any\n   * pending results\n   *\n   * @param event\n   * @private\n   */\n  _handleComplete(event) {\n    const { listenerId: id } = event;\n\n    if (!this._pending[id]) {\n      return;\n    }\n\n    const { meta, transaction } = this._pending[id];\n    if (meta) {\n      meta.resolve(transaction._pendingResult);\n    }\n  }\n\n  /**\n   * Internally adds a transaction execution function to the queue\n   *\n   * @param updateFunction\n   * @returns {Promise<any>}\n   * @private\n   */\n  _add(updateFunction) {\n    const id = generateTransactionId();\n\n    const meta = {\n      id,\n      updateFunction,\n      stack: new Error().stack.split('\\n').slice(2).join('\\n'),\n    };\n\n    this._pending[id] = {\n      meta,\n      transaction: new FirestoreTransaction(this._firestore, meta),\n    };\n\n    return new Promise((resolve, reject) => {\n      this._firestore.native.transactionBegin(id);\n\n      meta.resolve = result => {\n        this._remove(id);\n        resolve(result);\n      };\n\n      meta.reject = error => {\n        this._remove(id);\n        reject(error);\n      };\n    });\n  }\n\n  /**\n   * Internally removes the transaction once it has resolved\n   * or rejected\n   *\n   * @param id\n   * @private\n   */\n  _remove(id) {\n    this._firestore.native.transactionDispose(id);\n    delete this._pending[id];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}