{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport { adapt } from \"../core/AnimatedBlock\";\nimport invariant from 'fbjs/lib/invariant';\nvar AnimatedSet = function (_AnimatedNode) {\n  _inherits(AnimatedSet, _AnimatedNode);\n  var _super = _createSuper(AnimatedSet);\n  function AnimatedSet(what, value) {\n    var _this;\n    _classCallCheck(this, AnimatedSet);\n    _this = _super.call(this, {\n      type: 'set',\n      what: what.__nodeID,\n      value: value.__nodeID\n    }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    _this._what = what;\n    _this._value = value;\n    return _this;\n  }\n  _createClass(AnimatedSet, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var newValue = val(this._value);\n      this._what._updateValue(newValue);\n      return newValue;\n    }\n  }]);\n  return AnimatedSet;\n}(AnimatedNode);\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"names":["AnimatedNode","val","adapt","invariant","AnimatedSet","what","value","type","__nodeID","_constant","_what","_value","newValue","_updateValue","createAnimatedSet"],"sources":["C:/Users/HUSLIANA/react_native_storeapp-master/node_modules/react-native-reanimated/src/core/AnimatedSet.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    super({ type: 'set', what: what.__nodeID, value: value.__nodeID }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what._updateValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"],"mappings":";;;;;;;AAAA,OAAOA,YAAY;AACnB,SAASC,GAAG;AACZ,SAASC,KAAK;AAEd,OAAOC,SAAS,MAAM,oBAAoB;AAAC,IAErCC,WAAW;EAAA;EAAA;EAIf,qBAAYC,IAAI,EAAEC,KAAK,EAAE;IAAA;IAAA;IACvB,0BAAM;MAAEC,IAAI,EAAE,KAAK;MAAEF,IAAI,EAAEA,IAAI,CAACG,QAAQ;MAAEF,KAAK,EAAEA,KAAK,CAACE;IAAS,CAAC,EAAE,CAACF,KAAK,CAAC;IAC1EH,SAAS,CAAC,CAACE,IAAI,CAACI,SAAS,EAAE,oCAAoC,CAAC;IAChE,MAAKC,KAAK,GAAGL,IAAI;IACjB,MAAKM,MAAM,GAAGL,KAAK;IAAC;EACtB;EAAC;IAAA;IAAA,+BAEc;MACb,IAAMM,QAAQ,GAAGX,GAAG,CAAC,IAAI,CAACU,MAAM,CAAC;MACjC,IAAI,CAACD,KAAK,CAACG,YAAY,CAACD,QAAQ,CAAC;MACjC,OAAOA,QAAQ;IACjB;EAAC;EAAA;AAAA,EAfuBZ,YAAY;AAkBtC,OAAO,SAASc,iBAAiB,CAACT,IAAI,EAAEC,KAAK,EAAE;EAC7C,OAAO,IAAIF,WAAW,CAACC,IAAI,EAAEH,KAAK,CAACI,KAAK,CAAC,CAAC;AAC5C"},"metadata":{},"sourceType":"module"}