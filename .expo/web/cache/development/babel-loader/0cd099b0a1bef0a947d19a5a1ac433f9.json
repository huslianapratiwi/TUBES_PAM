{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar VELOCITY_FACTOR = 0.2;\nvar MAX_POINTERS = 20;\nvar PointerTracker = function () {\n  function PointerTracker() {\n    (0, _classCallCheck2.default)(this, PointerTracker);\n    _defineProperty(this, \"trackedPointers\", new Map());\n    _defineProperty(this, \"touchEventsIds\", new Map());\n    _defineProperty(this, \"lastMovedPointerId\", void 0);\n    _defineProperty(this, \"cachedAverages\", {\n      x: 0,\n      y: 0\n    });\n    this.lastMovedPointerId = NaN;\n    for (var i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  (0, _createClass2.default)(PointerTracker, [{\n    key: \"addToTracker\",\n    value: function addToTracker(event) {\n      if (this.trackedPointers.has(event.pointerId)) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      var newElement = {\n        lastX: event.x,\n        lastY: event.y,\n        timeStamp: event.time,\n        velocityX: 0,\n        velocityY: 0\n      };\n      this.trackedPointers.set(event.pointerId, newElement);\n      this.mapTouchEventId(event.pointerId);\n      this.cachedAverages = {\n        x: this.getLastAvgX(),\n        y: this.getLastAvgY()\n      };\n    }\n  }, {\n    key: \"removeFromTracker\",\n    value: function removeFromTracker(pointerId) {\n      this.trackedPointers.delete(pointerId);\n      this.removeMappedTouchId(pointerId);\n    }\n  }, {\n    key: \"track\",\n    value: function track(event) {\n      var element = this.trackedPointers.get(event.pointerId);\n      if (!element) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      var dx = event.x - element.lastX;\n      var dy = event.y - element.lastY;\n      var dt = event.time - element.timeStamp;\n      element.velocityX = dx / dt * 1000 * VELOCITY_FACTOR;\n      element.velocityY = dy / dt * 1000 * VELOCITY_FACTOR;\n      element.lastX = event.x;\n      element.lastY = event.y;\n      this.trackedPointers.set(event.pointerId, element);\n      var avgX = this.getLastAvgX();\n      var avgY = this.getLastAvgY();\n      this.cachedAverages = {\n        x: avgX,\n        y: avgY\n      };\n    }\n  }, {\n    key: \"mapTouchEventId\",\n    value: function mapTouchEventId(id) {\n      for (var _iterator = _createForOfIteratorHelperLoose(this.touchEventsIds), _step; !(_step = _iterator()).done;) {\n        var _ref = _step.value;\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n        var mappedId = _ref2[0];\n        var touchId = _ref2[1];\n        if (isNaN(touchId)) {\n          this.touchEventsIds.set(mappedId, id);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"removeMappedTouchId\",\n    value: function removeMappedTouchId(id) {\n      var mappedId = this.getMappedTouchEventId(id);\n      if (!isNaN(mappedId)) {\n        this.touchEventsIds.set(mappedId, NaN);\n      }\n    }\n  }, {\n    key: \"getMappedTouchEventId\",\n    value: function getMappedTouchEventId(touchEventId) {\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.touchEventsIds.entries()), _step2; !(_step2 = _iterator2()).done;) {\n        var _ref3 = _step2.value;\n        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);\n        var key = _ref4[0];\n        var value = _ref4[1];\n        if (value === touchEventId) {\n          return key;\n        }\n      }\n      return NaN;\n    }\n  }, {\n    key: \"getVelocityX\",\n    value: function getVelocityX(pointerId) {\n      var _this$trackedPointers;\n      return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;\n    }\n  }, {\n    key: \"getVelocityY\",\n    value: function getVelocityY(pointerId) {\n      var _this$trackedPointers2;\n      return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;\n    }\n  }, {\n    key: \"getLastX\",\n    value: function getLastX(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers3;\n        return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;\n      } else {\n        var _this$trackedPointers4;\n        return (_this$trackedPointers4 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastX;\n      }\n    }\n  }, {\n    key: \"getLastY\",\n    value: function getLastY(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers5;\n        return (_this$trackedPointers5 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers5 === void 0 ? void 0 : _this$trackedPointers5.lastY;\n      } else {\n        var _this$trackedPointers6;\n        return (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers6 === void 0 ? void 0 : _this$trackedPointers6.lastY;\n      }\n    }\n  }, {\n    key: \"getLastAvgX\",\n    value: function getLastAvgX() {\n      var avgX = this.getSumX() / this.trackedPointers.size;\n      return isNaN(avgX) ? this.cachedAverages.x : avgX;\n    }\n  }, {\n    key: \"getLastAvgY\",\n    value: function getLastAvgY() {\n      var avgY = this.getSumY() / this.trackedPointers.size;\n      return isNaN(avgY) ? this.cachedAverages.y : avgY;\n    }\n  }, {\n    key: \"getSumX\",\n    value: function getSumX(ignoredPointer) {\n      var sumX = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumX += value.lastX;\n        }\n      });\n      return sumX;\n    }\n  }, {\n    key: \"getSumY\",\n    value: function getSumY(ignoredPointer) {\n      var sumY = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumY += value.lastY;\n        }\n      });\n      return sumY;\n    }\n  }, {\n    key: \"getTrackedPointersCount\",\n    value: function getTrackedPointersCount() {\n      return this.trackedPointers.size;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      var keys = [];\n      this.trackedPointers.forEach(function (_value, key) {\n        keys.push(key);\n      });\n      return keys;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.trackedPointers;\n    }\n  }, {\n    key: \"resetTracker\",\n    value: function resetTracker() {\n      this.trackedPointers.clear();\n      this.lastMovedPointerId = NaN;\n      for (var i = 0; i < MAX_POINTERS; ++i) {\n        this.touchEventsIds.set(i, NaN);\n      }\n    }\n  }], [{\n    key: \"shareCommonPointers\",\n    value: function shareCommonPointers(stPointers, ndPointers) {\n      return stPointers.some(function (pointerId) {\n        return ndPointers.includes(pointerId);\n      });\n    }\n  }]);\n  return PointerTracker;\n}();\nexports.default = PointerTracker;","map":{"version":3,"sources":["PointerTracker.ts"],"names":["VELOCITY_FACTOR","MAX_POINTERS","PointerTracker","Map","x","y","constructor","lastMovedPointerId","NaN","i","touchEventsIds","set","event","trackedPointers","has","pointerId","newElement","lastX","lastY","timeStamp","time","velocityX","velocityY","mapTouchEventId","cachedAverages","getLastAvgX","getLastAvgY","delete","removeMappedTouchId","element","get","dx","dy","dt","avgX","avgY","id","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","key","value","entries","undefined","getSumX","size","getSumY","ignoredPointer","sumX","forEach","sumY","keys","_value","push","clear","stPointers","ndPointers","some","includes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,eAAe,GAAG,GAAxB;AACA,IAAMC,YAAY,GAAG,EAArB;AAAA,IAEqBC,cAAN;EAYNI,0BAAc;IAAA;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAXkC,IAAIH,GAAJ,EAWlC,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EANyB,IAAIA,GAAJ,EAMzB,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAF8B;MAAEC,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE;IAAX,CAE9B,CAAA;IACnB,IAAA,CAAKE,kBAAL,GAA0BC,GAA1B;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAApB,EAAkC,EAAEQ,CAApC,EAAuC;MACrC,IAAA,CAAKC,cAAL,CAAoBC,GAApB,CAAwBF,CAAxB,EAA2BD,GAA3B,CAAA;IACD;EACF;EAAA;IAAA;IAAA,6BAEmBI,KAAD,EAA4B;MAC7C,IAAI,IAAA,CAAKC,eAAL,CAAqBC,GAArB,CAAyBF,KAAK,CAACG,SAA/B,CAAJ,EAA+C;QAC7C;MACD;MAED,IAAA,CAAKR,kBAAL,GAA0BK,KAAK,CAACG,SAAhC;MAEA,IAAMC,UAA0B,GAAG;QACjCC,KAAK,EAAEL,KAAK,CAACR,CADoB;QAEjCc,KAAK,EAAEN,KAAK,CAACP,CAFoB;QAGjCc,SAAS,EAAEP,KAAK,CAACQ,IAHgB;QAIjCC,SAAS,EAAE,CAJsB;QAKjCC,SAAS,EAAE;MALsB,CAAnC;MAQA,IAAA,CAAKT,eAAL,CAAqBF,GAArB,CAAyBC,KAAK,CAACG,SAA/B,EAA0CC,UAA1C,CAAA;MACA,IAAA,CAAKO,eAAL,CAAqBX,KAAK,CAACG,SAA3B,CAAA;MAEA,IAAA,CAAKS,cAAL,GAAsB;QACpBpB,CAAC,EAAE,IAAA,CAAKqB,WAAL,EADiB;QAEpBpB,CAAC,EAAE,IAAA,CAAKqB,WAAL;MAFiB,CAAtB;IAID;EAAA;IAAA;IAAA,kCAEwBX,SAAD,EAA0B;MAChD,IAAA,CAAKF,eAAL,CAAqBc,MAArB,CAA4BZ,SAA5B,CAAA;MACA,IAAA,CAAKa,mBAAL,CAAyBb,SAAzB,CAAA;IACD;EAAA;IAAA;IAAA,sBAEYH,KAAD,EAA4B;MACtC,IAAMiB,OAAuB,GAAG,IAAA,CAAKhB,eAAL,CAAqBiB,GAArB,CAC9BlB,KAAK,CAACG,SADwB,CAAhC;MAIA,IAAI,CAACc,OAAL,EAAc;QACZ;MACD;MAED,IAAA,CAAKtB,kBAAL,GAA0BK,KAAK,CAACG,SAAhC;MAEA,IAAMgB,EAAE,GAAGnB,KAAK,CAACR,CAANQ,GAAUiB,OAAO,CAACZ,KAA7B;MACA,IAAMe,EAAE,GAAGpB,KAAK,CAACP,CAANO,GAAUiB,OAAO,CAACX,KAA7B;MACA,IAAMe,EAAE,GAAGrB,KAAK,CAACQ,IAANR,GAAaiB,OAAO,CAACV,SAAhC;MAEAU,OAAO,CAACR,SAARQ,GAAqBE,EAAE,GAAGE,EAAN,GAAY,IAAZ,GAAmBjC,eAAvC6B;MACAA,OAAO,CAACP,SAARO,GAAqBG,EAAE,GAAGC,EAAN,GAAY,IAAZ,GAAmBjC,eAAvC6B;MAEAA,OAAO,CAACZ,KAARY,GAAgBjB,KAAK,CAACR,CAAtByB;MACAA,OAAO,CAACX,KAARW,GAAgBjB,KAAK,CAACP,CAAtBwB;MAEA,IAAA,CAAKhB,eAAL,CAAqBF,GAArB,CAAyBC,KAAK,CAACG,SAA/B,EAA0Cc,OAA1C,CAAA;MAEA,IAAMK,IAAY,GAAG,IAAA,CAAKT,WAAL,EAArB;MACA,IAAMU,IAAY,GAAG,IAAA,CAAKT,WAAL,EAArB;MAEA,IAAA,CAAKF,cAAL,GAAsB;QACpBpB,CAAC,EAAE8B,IADiB;QAEpB7B,CAAC,EAAE8B;MAFiB,CAAtB;IAID;EA/EiC;IAAA;IAAA,gCAkFVC,EAAD,EAAmB;MACxC,qDAAkC,IAAA,CAAK1B,cAAvC,wCAAuD;QAAA;QAAA;QAAA,IAA3C2B,QAAD;QAAA,IAAWC,OAAtB;QACE,IAAIC,KAAK,CAACD,OAAD,CAAT,EAAoB;UAClB,IAAA,CAAK5B,cAAL,CAAoBC,GAApB,CAAwB0B,QAAxB,EAAkCD,EAAlC,CAAA;UACA;QACD;MACF;IACF;EAAA;IAAA;IAAA,oCAE2BA,EAAD,EAAmB;MAC5C,IAAMC,QAAgB,GAAG,IAAA,CAAKG,qBAAL,CAA2BJ,EAA3B,CAAzB;MACA,IAAI,CAACG,KAAK,CAACF,QAAD,CAAV,EAAsB;QACpB,IAAA,CAAK3B,cAAL,CAAoBC,GAApB,CAAwB0B,QAAxB,EAAkC7B,GAAlC,CAAA;MACD;IACF;EAAA;IAAA;IAAA,sCAE4BiC,YAAD,EAA+B;MACzD,sDAA2B,IAAA,CAAK/B,cAAL,CAAoBkC,OAApB,EAA3B,2CAA0D;QAAA;QAAA;QAAA,IAA9CF,GAAD;QAAA,IAAMC,KAAjB;QACE,IAAIA,KAAK,KAAKF,YAAd,EAA4B;UAC1B,OAAOC,GAAP;QACD;MACF;MAED,OAAOlC,GAAP;IACD;EAAA;IAAA;IAAA,6BAEmBO,SAAD,EAA4B;MAAA,IAAA,qBAAA;MAC7C,OAAA,CAAA,qBAAA,GAAO,IAAA,CAAKF,eAAL,CAAqBiB,GAArB,CAAyBf,SAAzB,CAAP,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,qBAAA,CAAqCM,SAA5C;IACD;EAAA;IAAA;IAAA,6BACmBN,SAAD,EAA4B;MAAA,IAAA,sBAAA;MAC7C,OAAA,CAAA,sBAAA,GAAO,IAAA,CAAKF,eAAL,CAAqBiB,GAArB,CAAyBf,SAAzB,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,sBAAA,CAAqCO,SAA5C;IACD;EAAA;IAAA;IAAA,yBAeeP,SAAD,EAA6B;MAC1C,IAAIA,SAAS,KAAK8B,SAAlB,EAA6B;QAAA,IAAA,sBAAA;QAC3B,OAAA,CAAA,sBAAA,GAAO,IAAA,CAAKhC,eAAL,CAAqBiB,GAArB,CAAyBf,SAAzB,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,sBAAA,CAAqCE,KAA5C;MACD,CAFD,MAEO;QAAA,IAAA,sBAAA;QACL,OAAA,CAAA,sBAAA,GAAO,IAAA,CAAKJ,eAAL,CAAqBiB,GAArB,CAAyB,IAAA,CAAKvB,kBAA9B,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,sBAAA,CAAmDU,KAA1D;MACD;IACF;EAAA;IAAA;IAAA,yBAeeF,SAAD,EAA6B;MAC1C,IAAIA,SAAS,KAAK8B,SAAlB,EAA6B;QAAA,IAAA,sBAAA;QAC3B,OAAA,CAAA,sBAAA,GAAO,IAAA,CAAKhC,eAAL,CAAqBiB,GAArB,CAAyBf,SAAzB,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,sBAAA,CAAqCG,KAA5C;MACD,CAFD,MAEO;QAAA,IAAA,sBAAA;QACL,OAAA,CAAA,sBAAA,GAAO,IAAA,CAAKL,eAAL,CAAqBiB,GAArB,CAAyB,IAAA,CAAKvB,kBAA9B,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,sBAAA,CAAmDW,KAA1D;MACD;IACF;EA3JiC;IAAA;IAAA,8BAiKL;MAC3B,IAAMgB,IAAY,GAAG,IAAA,CAAKY,OAAL,EAAA,GAAiB,IAAA,CAAKjC,eAAL,CAAqBkC,IAA3D;MACA,OAAOR,KAAK,CAACL,IAAD,CAALK,GAAc,IAAA,CAAKf,cAAL,CAAoBpB,CAAlCmC,GAAsCL,IAA7C;IACD;EAAA;IAAA;IAAA,8BAC4B;MAC3B,IAAMC,IAAY,GAAG,IAAA,CAAKa,OAAL,EAAA,GAAiB,IAAA,CAAKnC,eAAL,CAAqBkC,IAA3D;MACA,OAAOR,KAAK,CAACJ,IAAD,CAALI,GAAc,IAAA,CAAKf,cAAL,CAAoBnB,CAAlCkC,GAAsCJ,IAA7C;IACD;EAAA;IAAA;IAAA,wBACcc,cAAD,EAAkC;MAC9C,IAAIC,IAAI,GAAG,CAAX;MAEA,IAAA,CAAKrC,eAAL,CAAqBsC,OAArB,CAA6B,UAACR,KAAD,EAAQD,GAAR,EAAgB;QAC3C,IAAIA,GAAG,KAAKO,cAAZ,EAA4B;UAC1BC,IAAI,IAAIP,KAAK,CAAC1B,KAAdiC;QACD;MACF,CAJD,CAAA;MAMA,OAAOA,IAAP;IACD;EAAA;IAAA;IAAA,wBACcD,cAAD,EAAkC;MAC9C,IAAIG,IAAI,GAAG,CAAX;MAEA,IAAA,CAAKvC,eAAL,CAAqBsC,OAArB,CAA6B,UAACR,KAAD,EAAQD,GAAR,EAAgB;QAC3C,IAAIA,GAAG,KAAKO,cAAZ,EAA4B;UAC1BG,IAAI,IAAIT,KAAK,CAACzB,KAAdkC;QACD;MACF,CAJD,CAAA;MAMA,OAAOA,IAAP;IACD;EAAA;IAAA;IAAA,0CACwC;MACvC,OAAO,IAAA,CAAKvC,eAAL,CAAqBkC,IAA5B;IACD;EAAA;IAAA;IAAA,uCACuC;MACtC,IAAMM,IAAc,GAAG,EAAvB;MAEA,IAAA,CAAKxC,eAAL,CAAqBsC,OAArB,CAA6B,UAACG,MAAD,EAASZ,GAAT,EAAiB;QAC5CW,IAAI,CAACE,IAALF,CAAUX,GAAVW,CAAAA;MACD,CAFD,CAAA;MAIA,OAAOA,IAAP;IACD;EAAA;IAAA;IAAA,0BAE6C;MAC5C,OAAO,IAAA,CAAKxC,eAAZ;IACD;EAAA;IAAA;IAAA,+BAE2B;MAC1B,IAAA,CAAKA,eAAL,CAAqB2C,KAArB,EAAA;MACA,IAAA,CAAKjD,kBAAL,GAA0BC,GAA1B;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAApB,EAAkC,EAAEQ,CAApC,EAAuC;QACrC,IAAA,CAAKC,cAAL,CAAoBC,GAApB,CAAwBF,CAAxB,EAA2BD,GAA3B,CAAA;MACD;IACF;EAAA;IAAA;IAAA,oCAGCiD,UAD+B,EAE/BC,UAF+B,EAGtB;MACT,OAAOD,UAAU,CAACE,IAAXF,CAAiB1C,UAAAA,SAAD;QAAA,OAAe2C,UAAU,CAACE,QAAXF,CAAoB3C,SAApB2C,CAA/BD;MAAAA,EAAP;IACD;EAAA;EAAA;AAAA;AAAA","sourcesContent":["import { AdaptedEvent } from '../interfaces';\n\nexport interface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\n// Used to scale velocity so that it is similar to velocity in Android/iOS\nconst VELOCITY_FACTOR = 0.2;\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAverages = {\n      x: this.getLastAvgX(),\n      y: this.getLastAvgY(),\n    };\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const dx = event.x - element.lastX;\n    const dy = event.y - element.lastY;\n    const dt = event.time - element.timeStamp;\n\n    element.velocityX = (dx / dt) * 1000 * VELOCITY_FACTOR;\n    element.velocityY = (dy / dt) * 1000 * VELOCITY_FACTOR;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    const avgX: number = this.getLastAvgX();\n    const avgY: number = this.getLastAvgY();\n\n    this.cachedAverages = {\n      x: avgX,\n      y: avgY,\n    };\n  }\n\n  //Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n\n  /**\n   * Returns X coordinate of last moved pointer\n   */\n  public getLastX(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns X coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastX(pointerId: number): number;\n\n  public getLastX(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastX as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastX as number;\n    }\n  }\n\n  /**\n   * Returns Y coordinate of last moved pointer\n   */\n  public getLastY(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns Y coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastY(pointerId: number): number;\n\n  public getLastY(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastY as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastY as number;\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n  public getLastAvgX(): number {\n    const avgX: number = this.getSumX() / this.trackedPointers.size;\n    return isNaN(avgX) ? this.cachedAverages.x : avgX;\n  }\n  public getLastAvgY(): number {\n    const avgY: number = this.getSumY() / this.trackedPointers.size;\n    return isNaN(avgY) ? this.cachedAverages.y : avgY;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}