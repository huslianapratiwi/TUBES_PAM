{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Badge;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _native = require(\"@react-navigation/native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction Badge(_ref) {\n  var _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 18 : _ref$size,\n    children = _ref.children,\n    style = _ref.style,\n    rest = (0, _objectWithoutProperties2.default)(_ref, [\"visible\", \"size\", \"children\", \"style\"]);\n  var _React$useState = React.useState(function () {\n      return new _reactNative.Animated.Value(visible ? 1 : 0);\n    }),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n    opacity = _React$useState2[0];\n  var _React$useState3 = React.useState(visible ? true : false),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    rendered = _React$useState4[0],\n    setRendered = _React$useState4[1];\n  var theme = (0, _native.useTheme)();\n  React.useEffect(function () {\n    if (!rendered) {\n      return;\n    }\n    _reactNative.Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true\n    }).start(function (_ref2) {\n      var finished = _ref2.finished;\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n  if (!visible && !rendered) {\n    return null;\n  }\n  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},\n    _ref3$backgroundColor = _ref3.backgroundColor,\n    backgroundColor = _ref3$backgroundColor === void 0 ? theme.colors.notification : _ref3$backgroundColor,\n    restStyle = (0, _objectWithoutProperties2.default)(_ref3, [\"backgroundColor\"]);\n  var textColor = (0, _color.default)(backgroundColor).isLight() ? 'black' : 'white';\n  var borderRadius = size / 2;\n  var fontSize = Math.floor(size * 3 / 4);\n  return React.createElement(_reactNative.Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [{\n      opacity: opacity,\n      transform: [{\n        scale: opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        })\n      }],\n      backgroundColor: backgroundColor,\n      color: textColor,\n      fontSize: fontSize,\n      lineHeight: size - 1,\n      height: size,\n      minWidth: size,\n      borderRadius: borderRadius\n    }, styles.container, restStyle]\n  }, rest), children);\n}\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["Badge","visible","size","children","style","rest","opacity","React","useState","Animated","Value","rendered","setRendered","theme","useTheme","useEffect","timing","toValue","duration","useNativeDriver","start","finished","backgroundColor","colors","notification","restStyle","StyleSheet","flatten","textColor","color","isLight","borderRadius","fontSize","Math","floor","transform","scale","interpolate","inputRange","outputRange","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  visible = true,\n  size = 18,\n  children,\n  style,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible ? true : false);\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          transform: [\n            {\n              scale: opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n          backgroundColor,\n          color: textColor,\n          fontSize,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}