{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _native = require(\"@react-navigation/native\");\nvar _StackView = _interopRequireDefault(require(\"../views/Stack/StackView\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    children = _ref.children,\n    screenOptions = _ref.screenOptions,\n    rest = (0, _objectWithoutProperties2.default)(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n  var defaultOptions = {\n    gestureEnabled: _reactNative.Platform.OS === 'ios',\n    animationEnabled: _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos'\n  };\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n      initialRouteName: initialRouteName,\n      children: children,\n      screenOptions: typeof screenOptions === 'function' ? function () {\n        return (0, _extends3.default)({}, defaultOptions, screenOptions.apply(void 0, arguments));\n      } : (0, _extends3.default)({}, defaultOptions, screenOptions)\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation;\n  React.useEffect(function () {\n    var _navigation$addListen;\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch((0, _extends3.default)({}, _native.StackActions.popToTop(), {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(_StackView.default, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\nvar _default = (0, _native.createNavigatorFactory)(StackNavigator);\nexports.default = _default;","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["StackNavigator","initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","Platform","OS","animationEnabled","state","descriptors","navigation","useNavigationBuilder","StackRouter","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","createNavigatorFactory"],"mappings":";;;;;;;AAAA;AACA;AACA;AAYA;AAAA;AAAA;;;;;;;;;;;;;;;AAWA,SAASA,cAAT,OAKU;EAAA,IAJRC,gBADsB,QACtBA,gBADsB;IAEtBC,QAFsB,QAEtBA,QAFsB;IAGtBC,aAHsB,QAGtBA,aAHsB;IAInBC,IAAAA;EAEH,IAAMC,cAAc,GAAG;IACrBC,cAAc,EAAEC,qBAAQ,CAACC,EAATD,KAAgB,KADX;IAErBE,gBAAgB,EACdF,qBAAQ,CAACC,EAATD,KAAgB,KAAhBA,IACAA,qBAAQ,CAACC,EAATD,KAAgB,SADhBA,IAEAA,qBAAQ,CAACC,EAATD,KAAgB;EALG,CAAvB;EAAA,4BAQ2CM,IAAAA,4BAAoB,EAM7DC,mBAN6D,EAMhD;MACbb,gBADa,EACbA,gBADa;MAEbC,QAFa,EAEbA,QAFa;MAGbC,aAAa,EACX,OAAOA,aAAP,KAAyB,UAAzB,GACI;QAAA,kCACKE,cADS,EAETF,aAAa,yBAAA;MAAA,CAHtB,8BAMSE,cADL,EAEKF,aAAAA;IAXE,CANgD,CAA/D;IAAQO,KAAF,yBAAEA,KAAF;IAASC,WAAT,yBAASA,WAAT;IAAsBC,UAAAA,yBAAAA,UAAAA;EAqB5BG,KAAK,CAACC,SAAND,CACE,YAAA;IAAA,IAAA,qBAAA;IAAA,OAAA,CAAA,qBAAA,GACEH,UAAU,CAACK,WADb,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEL,qBAAAA,CAAAA,IAAAA,CAAAA,UAAU,EAAe,UAAf,EAA4BM,UAAAA,CAAD,EAAO;MAC1C,IAAMC,SAAS,GAAGP,UAAU,CAACO,SAAXP,EADwB;MAK1CQ,qBAAqB,CAAC,YAAM;QAC1B,IACEV,KAAK,CAACW,KAANX,GAAc,CAAdA,IACAS,SADAT,IAEA,CAAEQ,CAAD,CAAkCI,gBAHrC,EAIE;UAGAV,UAAU,CAACW,QAAXX,4BACKY,oBAAY,CAACC,QAAbD,EADe;YAElBE,MAAM,EAAEhB,KAAK,CAACiB;UAAAA,GAFhBf;QAID;MACF,CAboB,CAArBQ;IAcD,CAnBS,CADZ;EAAA,CADFL,EAsBE,CAACH,UAAD,EAAaF,KAAK,CAACW,KAAnB,EAA0BX,KAAK,CAACiB,GAAhC,CAtBFZ,CAAAA;EAyBA,OACE,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMX,IADN,EAAA;IAEE,KAAK,EAAEM,KAFT;IAGE,WAAW,EAAEC,WAHf;IAIE,UAAU,EAAEC;EAJd,CAAA,CAAA,CADF;AAQD;AAAA,eAEcgB,IAAAA,8BAAsB,EAKnC5B,cALmC,CAArC;AAAA","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"script"}