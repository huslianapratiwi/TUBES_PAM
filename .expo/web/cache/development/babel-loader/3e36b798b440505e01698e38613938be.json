{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Constants from 'expo-constants';\nimport qs from 'qs';\nimport URL from 'url-parse';\nimport Linking from \"./LinkingModule\";\nvar manifest = Constants.manifest;\nvar USES_CUSTOM_SCHEME = Constants.appOwnership === 'standalone' && manifest.scheme;\nvar HOST_URI = manifest.hostUri;\nif (!HOST_URI && !USES_CUSTOM_SCHEME) {\n  HOST_URI = _removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n}\nvar IS_EXPO_HOSTED = HOST_URI && (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(HOST_URI) || manifest.developer);\nfunction _removeScheme(url) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\nfunction _removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\nfunction _removeLeadingSlash(url) {\n  return url.replace(/^\\//, '');\n}\nfunction _removeTrailingSlash(url) {\n  return url.replace(/\\/$/, '');\n}\nfunction _removeTrailingSlashAndQueryString(url) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\nfunction makeUrl() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var scheme = 'exp';\n  var manifestScheme = manifest.scheme || manifest.detach && manifest.detach.scheme;\n  if (Constants.appOwnership === 'standalone' && manifestScheme) {\n    scheme = manifestScheme;\n  } else if (Constants.appOwnership === 'standalone' && !manifestScheme) {\n    throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');\n  } else if (Constants.appOwnership === 'expo' && !manifestScheme) {\n    console.warn('Linking requires that you provide a `scheme` in app.json for standalone apps - if it is left blank, your app may crash. The scheme does not apply to development in the Expo client but you should add it as soon as you start working with Linking to avoid creating a broken build. Add a `scheme` to silence this warning. Learn more about Linking at https://docs.expo.io/versions/latest/workflow/linking/');\n  }\n  var hostUri = HOST_URI || '';\n  if (USES_CUSTOM_SCHEME && IS_EXPO_HOSTED) {\n    hostUri = '';\n  }\n  if (path) {\n    if (IS_EXPO_HOSTED && hostUri) {\n      path = \"/--/\" + _removeLeadingSlash(path);\n    }\n    if (!path.startsWith('/') && hostUri) {\n      path = \"/\" + path;\n    } else if (path.startsWith('/') && !hostUri) {\n      path = path.substr(1);\n    }\n  } else {\n    path = '';\n  }\n  var queryString = '';\n  var queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    var paramsFromHostUri = {};\n    try {\n      var parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = _objectSpread(_objectSpread({}, queryParams), paramsFromHostUri);\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = \"?\" + queryString;\n  }\n  hostUri = _removeTrailingSlash(hostUri);\n  return encodeURI(scheme + \"://\" + hostUri + path + queryString);\n}\nfunction parse(url) {\n  if (!url) {\n    throw new Error('parse cannot be called with a null value');\n  }\n  var parsed = URL(url, true);\n  var queryParams = parsed.query;\n  var hostUri = HOST_URI || '';\n  var hostUriStripped = _removePort(_removeTrailingSlashAndQueryString(hostUri));\n  var path = parsed.pathname || null;\n  var hostname = parsed.hostname || null;\n  var scheme = parsed.protocol || null;\n  if (scheme) {\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n  if (path) {\n    path = _removeLeadingSlash(path);\n    var expoPrefix = null;\n    if (hostUriStripped) {\n      var parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).join('/') + \"/--/\";\n    }\n    if (IS_EXPO_HOSTED && !USES_CUSTOM_SCHEME && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n  return {\n    hostname: hostname,\n    path: path,\n    queryParams: queryParams,\n    scheme: scheme\n  };\n}\nfunction parseInitialURLAsync() {\n  var initialUrl;\n  return _regeneratorRuntime.async(function parseInitialURLAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Linking.getInitialURL());\n        case 2:\n          initialUrl = _context.sent;\n          if (initialUrl) {\n            _context.next = 5;\n            break;\n          }\n          return _context.abrupt(\"return\", {\n            scheme: null,\n            hostname: null,\n            path: null,\n            queryParams: null\n          });\n        case 5:\n          return _context.abrupt(\"return\", parse(initialUrl));\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar newLinking = new Linking.constructor();\nnewLinking.makeUrl = makeUrl;\nnewLinking.parse = parse;\nnewLinking.parseInitialURLAsync = parseInitialURLAsync;\nexport default newLinking;","map":{"version":3,"mappings":"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","names":["Constants","qs","URL","Linking","manifest","USES_CUSTOM_SCHEME","appOwnership","scheme","HOST_URI","hostUri","_removeScheme","linkingUri","replace","IS_EXPO_HOSTED","test","developer","url","_removePort","_removeLeadingSlash","_removeTrailingSlash","_removeTrailingSlashAndQueryString","makeUrl","path","queryParams","manifestScheme","detach","Error","console","warn","startsWith","substr","queryString","queryStringMatchResult","match","paramsFromHostUri","parsedParams","parse","e","stringify","encodeURI","parsed","query","hostUriStripped","pathname","hostname","protocol","substring","length","expoPrefix","parts","split","slice","join","indexOf","parseInitialURLAsync","getInitialURL","initialUrl","newLinking","constructor"],"sourceRoot":"","sources":["../../src/Linking/Linking.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport qs from 'qs';\nimport { LinkingStatic } from 'react-native';\nimport URL from 'url-parse';\nimport { ParsedURL, QueryParams } from './Linking.types';\nimport Linking from './LinkingModule';\n\nconst { manifest } = Constants;\n\nconst USES_CUSTOM_SCHEME = Constants.appOwnership === 'standalone' && manifest.scheme;\n\nlet HOST_URI = manifest.hostUri;\nif (!HOST_URI && !USES_CUSTOM_SCHEME) {\n  // we're probably not using up-to-date xdl, so just fake it for now\n  // we have to remove the /--/ on the end since this will be inserted again later\n  HOST_URI = _removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n}\nconst IS_EXPO_HOSTED =\n  HOST_URI &&\n  (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(HOST_URI) ||\n    manifest.developer);\n\nfunction _removeScheme(url: string) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction _removePort(url: string) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction _removeLeadingSlash(url: string) {\n  return url.replace(/^\\//, '');\n}\n\nfunction _removeTrailingSlash(url: string) {\n  return url.replace(/\\/$/, '');\n}\n\nfunction _removeTrailingSlashAndQueryString(url: string) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction makeUrl(path: string = '', queryParams: QueryParams = {}): string {\n  let scheme = 'exp';\n  let manifestScheme = manifest.scheme || (manifest.detach && manifest.detach.scheme);\n\n  if (Constants.appOwnership === 'standalone' && manifestScheme) {\n    scheme = manifestScheme;\n  } else if (Constants.appOwnership === 'standalone' && !manifestScheme) {\n    throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');\n  } else if (Constants.appOwnership === 'expo' && !manifestScheme) {\n    console.warn(\n      'Linking requires that you provide a `scheme` in app.json for standalone apps - if it is left blank, your app may crash. The scheme does not apply to development in the Expo client but you should add it as soon as you start working with Linking to avoid creating a broken build. Add a `scheme` to silence this warning. Learn more about Linking at https://docs.expo.io/versions/latest/workflow/linking/'\n    );\n  }\n\n  let hostUri = HOST_URI || '';\n  if (USES_CUSTOM_SCHEME && IS_EXPO_HOSTED) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (IS_EXPO_HOSTED && hostUri) {\n      path = `/--/${_removeLeadingSlash(path)}`;\n    }\n\n    if (!path.startsWith('/') && hostUri) {\n      path = `/${path}`;\n    } else if (path.startsWith('/') && !hostUri) {\n      path = path.substr(1);\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  let queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      let parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = _removeTrailingSlash(hostUri);\n\n  return encodeURI(`${scheme}://${hostUri}${path}${queryString}`);\n}\n\nfunction parse(url: string): ParsedURL {\n  if (!url) {\n    throw new Error('parse cannot be called with a null value');\n  }\n\n  const parsed = URL(url, /* parseQueryString */ true);\n\n  let queryParams = parsed.query;\n\n  let hostUri = HOST_URI || '';\n  let hostUriStripped = _removePort(_removeTrailingSlashAndQueryString(hostUri));\n\n  let path = parsed.pathname || null;\n  let hostname = parsed.hostname || null;\n  let scheme = parsed.protocol || null;\n\n  if (scheme) {\n    // Remove colon at end\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n\n  if (path) {\n    path = _removeLeadingSlash(path);\n\n    let expoPrefix: string | null = null;\n    if (hostUriStripped) {\n      const parts = hostUriStripped.split('/');\n      expoPrefix = `${parts.slice(1).join('/')}/--/`;\n    }\n\n    if (IS_EXPO_HOSTED && !USES_CUSTOM_SCHEME && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n\n  return {\n    hostname,\n    path,\n    queryParams,\n    scheme,\n  };\n}\n\nasync function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await Linking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\ninterface ExpoLinking extends LinkingStatic {\n  makeUrl: typeof makeUrl;\n  parse: typeof parse;\n  parseInitialURLAsync: typeof parseInitialURLAsync;\n}\n\n// @ts-ignore fix this...\nlet newLinking = new Linking.constructor();\n\nnewLinking.makeUrl = makeUrl;\nnewLinking.parse = parse;\nnewLinking.parseInitialURLAsync = parseInitialURLAsync;\n\nexport default newLinking as ExpoLinking;\n"]},"metadata":{},"sourceType":"module"}