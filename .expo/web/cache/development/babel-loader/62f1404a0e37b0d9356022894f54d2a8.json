{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SafeAreaProviderCompat;\nexports.initialSafeAreaInsets = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _reactNativeIphoneXHelper = require(\"react-native-iphone-x-helper\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar initialSafeAreaInsets = (0, _extends2.default)({\n  top: (0, _reactNativeIphoneXHelper.getStatusBarHeight)(true),\n  bottom: (0, _reactNativeIphoneXHelper.getBottomSpace)(),\n  right: 0,\n  left: 0\n}, _reactNativeSafeAreaContext.initialWindowSafeAreaInsets);\nexports.initialSafeAreaInsets = initialSafeAreaInsets;\nfunction SafeAreaProviderCompat(_ref) {\n  var children = _ref.children;\n  return React.createElement(_reactNativeSafeAreaContext.SafeAreaConsumer, null, function (insets) {\n    if (insets) {\n      return children;\n    }\n    return React.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n      initialSafeAreaInsets: initialSafeAreaInsets\n    }, children);\n  });\n}","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["initialSafeAreaInsets","top","getStatusBarHeight","bottom","getBottomSpace","right","left","initialWindowSafeAreaInsets","SafeAreaProviderCompat","children","insets"],"mappings":";;;;;;;AAAA;AACA;AAKA;AAKA;AAAA;AAGO,IAAMA,qBAAqB;EAEhCC,GAAG,EAAEC,IAAAA,4CAAkB,EAAC,IAAD,CAFY;EAGnCC,MAAM,EAAEC,IAAAA,wCAAc,GAHa;EAInCC,KAAK,EAAE,CAJ4B;EAKnCC,IAAI,EAAE;AAL6B,GAQhCC,uDAAAA,CARE;AAAA;AAeQ,SAASC,sBAAT,OAAqD;EAAA,IAAnBC,QAAAA,QAAAA,QAAAA;EAC/C,OACE,KAAA,CAAA,aAAA,CAAC,4CAAD,EAAA,IAAA,EACIC,UAAAA,MAAD,EAAY;IACX,IAAIA,MAAJ,EAAY;MAIV,OAAOD,QAAP;IACD;IAED,OACE,KAAA,CAAA,aAAA,CAAC,4CAAD,EAAA;MAAkB,qBAAqB,EAAET;IAAzC,CAAA,EACGS,QADH,CADF;EAKD,CAdH,CADF;AAkBD","sourcesContent":["import * as React from 'react';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  initialWindowSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\n\n// The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\nexport const initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets,\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaConsumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialSafeAreaInsets={initialSafeAreaInsets}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaConsumer>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}