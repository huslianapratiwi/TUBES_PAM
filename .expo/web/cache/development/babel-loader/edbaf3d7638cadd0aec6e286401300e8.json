{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'invariant';\nvar EventTypes = ['url'];\nvar listeners = [];\nfunction _validateURL(url) {\n  invariant(typeof url === 'string', \"Invalid URL: should be a string. Instead found: \" + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\nvar Linking = function () {\n  function Linking() {\n    _classCallCheck(this, Linking);\n  }\n  _createClass(Linking, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener) {\n      invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n      var nativeListener = function nativeListener(nativeEvent) {\n        return listener({\n          url: window.location.href,\n          nativeEvent: nativeEvent\n        });\n      };\n      listeners.push({\n        listener: listener,\n        nativeListener: nativeListener\n      });\n      window.addEventListener('message', nativeListener, false);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, listener) {\n      invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n      var listenerIndex = listeners.findIndex(function (pair) {\n        return pair.listener === listener;\n      });\n      invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n      var nativeListener = listeners[listenerIndex].nativeListener;\n      window.removeEventListener('message', nativeListener, false);\n      listeners.splice(listenerIndex, 1);\n    }\n  }, {\n    key: \"canOpenURL\",\n    value: function canOpenURL(url) {\n      return _regeneratorRuntime.async(function canOpenURL$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _validateURL(url);\n              return _context.abrupt(\"return\", true);\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getInitialURL\",\n    value: function getInitialURL() {\n      return _regeneratorRuntime.async(function getInitialURL$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", window.location.href);\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"openURL\",\n    value: function openURL(url) {\n      return _regeneratorRuntime.async(function openURL$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _validateURL(url);\n              window.location.href = url;\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n  return Linking;\n}();\nexport default new Linking();","map":{"version":3,"mappings":";;;AAAA,OAAOA,SAAS,MAAM,WAAW;AAIjC,IAAMC,UAAU,GAAG,CAAC,KAAK,CAAC;AAE1B,IAAMC,SAAS,GAAwE,EAAE;AAEzF,SAASC,YAAY,CAACC,GAAW;EAC/BJ,SAAS,CAAC,OAAOI,GAAG,KAAK,QAAQ,uDAAqDA,GAAG,CAAG;EAC5FJ,SAAS,CAACI,GAAG,EAAE,8BAA8B,CAAC;AAChD;AAAC,IAGKC,OAAO;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,iCACMC,IAAW,EAAEC,QAAqB;MACjDP,SAAS,CACPC,UAAU,CAACO,OAAO,CAACF,IAAI,CAAC,KAAK,CAAC,CAAC,mCACAA,IAAI,2BACpC;MACD,IAAMG,cAAc,GAAsB,SAApCA,cAAc,CAAsBC,WAAW;QAAA,OACnDH,QAAQ,CAAC;UAAEH,GAAG,EAAEO,MAAM,CAACC,QAAQ,CAACC,IAAI;UAAEH,WAAW,EAAXA;QAAW,CAAE,CAAC;MAAA;MACtDR,SAAS,CAACY,IAAI,CAAC;QAAEP,QAAQ,EAARA,QAAQ;QAAEE,cAAc,EAAdA;MAAc,CAAE,CAAC;MAC5CE,MAAM,CAACI,gBAAgB,CAAC,SAAS,EAAEN,cAAc,EAAE,KAAK,CAAC;IAC3D;EAAC;IAAA;IAAA,oCAEmBH,IAAW,EAAEC,QAAqB;MACpDP,SAAS,CACPC,UAAU,CAACO,OAAO,CAACF,IAAI,CAAC,KAAK,CAAC,CAAC,sCACGA,IAAI,4BACvC;MACD,IAAMU,aAAa,GAAGd,SAAS,CAACe,SAAS,CAAC,cAAI;QAAA,OAAIC,IAAI,CAACX,QAAQ,KAAKA,QAAQ;MAAA,EAAC;MAC7EP,SAAS,CACPgB,aAAa,KAAK,CAAC,CAAC,EACpB,8EAA8E,CAC/E;MACD,IAAMP,cAAc,GAAGP,SAAS,CAACc,aAAa,CAAC,CAACP,cAAc;MAC9DE,MAAM,CAACQ,mBAAmB,CAAC,SAAS,EAAEV,cAAc,EAAE,KAAK,CAAC;MAC5DP,SAAS,CAACkB,MAAM,CAACJ,aAAa,EAAE,CAAC,CAAC;IACpC;EAAC;IAAA;IAAA,2BAEgBZ,GAAW;MAAA;QAAA;UAAA;YAAA;cAC1BD,YAAY,CAACC,GAAG,CAAC;cAAC,iCACX,IAAI;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,kCAIJO,MAAM,CAACC,QAAQ,CAACC,IAAI;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA;IAAA;IAAA,wBAGfT,GAAW;MAAA;QAAA;UAAA;YAAA;cACvBD,YAAY,CAACC,GAAG,CAAC;cACjBO,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGT,GAAG;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAI/B,eAAe,IAAIC,OAAO,EAAE","names":["invariant","EventTypes","listeners","_validateURL","url","Linking","type","listener","indexOf","nativeListener","nativeEvent","window","location","href","push","addEventListener","listenerIndex","findIndex","pair","removeEventListener","splice"],"sourceRoot":"","sources":["../../src/Linking/LinkingModule.web.ts"],"sourcesContent":["import invariant from 'invariant';\n\nimport { URLListener, NativeURLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: Array<{ listener: URLListener; nativeListener: NativeURLListener }> = [];\n\nfunction _validateURL(url: string): void {\n  invariant(typeof url === 'string', `Invalid URL: should be a string. Instead found: ${url}`);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\n// TODO: Bacon: For better parity this should extend EventEmitter like React Native.\nclass Linking {\n  addEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = nativeEvent =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n  }\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex(pair => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  }\n\n  async canOpenURL(url: string): Promise<boolean> {\n    _validateURL(url);\n    return true;\n  }\n\n  async getInitialURL(): Promise<string> {\n    return window.location.href;\n  }\n\n  async openURL(url: string): Promise<void> {\n    _validateURL(url);\n    window.location.href = url;\n  }\n}\n\nexport default new Linking();\n"]},"metadata":{},"sourceType":"module"}