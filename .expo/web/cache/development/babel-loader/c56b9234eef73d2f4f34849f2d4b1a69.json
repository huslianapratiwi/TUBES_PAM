{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from 'react-native-reanimated';\nvar interpolateDeprecated = Animated.interpolate,\n  interpolateNode = Animated.interpolateNode,\n  cond = Animated.cond,\n  greaterThan = Animated.greaterThan;\nvar interpolate = interpolateNode !== null && interpolateNode !== void 0 ? interpolateNode : interpolateDeprecated;\nvar PROGRESS_EPSILON = 0.05;\nvar Overlay = React.forwardRef(function Overlay(_ref, ref) {\n  var progress = _ref.progress,\n    style = _ref.style,\n    props = _objectWithoutProperties(_ref, [\"progress\", \"style\"]);\n  var animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1]\n    }),\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1)\n  };\n  return React.createElement(Animated.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, overlayStyle, animatedStyle, style]\n  }));\n});\nvar overlayStyle = Platform.select({\n  web: {\n    WebkitTapHighlightColor: 'transparent'\n  },\n  default: {}\n});\nvar styles = StyleSheet.create({\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  })\n});\nexport default Overlay;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAEA,OAAOC,QAAP,MAAqB,yBAArB;AAAA,IAGeC,qBADT,GAMFD,QANJ,CACEE,WAAW;EAEXC,eAHI,GAMFH,QANJ,CAGEG,eAHI;EAIJC,IAJI,GAMFJ,QANJ,CAIEI,IAJI;EAKJC,cACEL,QANJ,CAKEK;AAGF,IAAMH,WAAyC,GAC7CC,eAD6C,aAC7CA,eAD6C,cAC7CA,eAD6C,GAC1BF,qBADrB;AAGA,IAAMK,gBAAgB,GAAG,IAAzB;AAMA,IAAMC,OAAO,GAAGR,KAAK,CAACS,UAAN,CAAiB,SAASD,OAAT,OAE/BE,GAF+B,EAG/B;EAAA,IAFEC,QAAF,GAEAC,KAFED,QAAF;IAAYE,QAEZD,KAFYC;IAAUC,KAEtB;EACA,IAAMC,aAAa,GAAG;IACpBC,OAAO,EAAEb,WAAW,CAACQ,QAAD,EAAW;MAC7BM,UAAU,EAAE,CAACV,gBAAD,EAAmB,CAAnB,CADiB;MAE7BW,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;IAFgB,CAAX,CADA;IAQpBC,MAAM,EAAEd,IAAI,CAACC,WAAW,CAACK,QAAD,EAAWJ,gBAAX,CAAZ,EAA0C,CAA1C,EAA6C,CAAC,CAA9C;EARQ,CAAtB;EAWA,OACEP,oBAACC,QAAD,CAAUmB,IAAV,eACMN,KADN;IAEEJ,GAAG,EAAEA,GAFP;IAGEG,KAAK,EAAE,CAACQ,MAAM,CAACC,OAAR,EAAiBC,YAAjB,EAA+BR,aAA/B,EAA8CF,KAA9C;EAHT,GADF;AAOD,CAtBe,CAAhB;AAwBA,IAAMU,YAAY,GAAGC,QAAQ,CAACC,MAAT,CAAwC;EAC3DC,GAAG,EAAE;IAGHC,uBAAuB,EAAE;EAHtB,CADsD;EAM3DC,OAAO,EAAE;AANkD,CAAxC,CAArB;AASA,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;EAC/BR,OAAO,kCACFO,UAAU,CAACE,kBADT;IAELC,eAAe,EAAE;EAFZ;AADwB,CAAlB,CAAf;AAOA,eAAexB,OAAf","names":["React","Animated","interpolateDeprecated","interpolate","interpolateNode","cond","greaterThan","PROGRESS_EPSILON","Overlay","forwardRef","ref","progress","_ref","style","props","animatedStyle","opacity","inputRange","outputRange","zIndex","View","styles","overlay","overlayStyle","Platform","select","web","WebkitTapHighlightColor","default","StyleSheet","create","absoluteFillObject","backgroundColor"],"sources":["Overlay.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  interpolate: interpolateDeprecated,\n  // @ts-expect-error: this property is only present in Reanimated 2\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateDeprecated =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    />\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}