{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get3 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\nvar _DiscreteGestureHandler = _interopRequireDefault(require(\"./DiscreteGestureHandler\"));\nvar _utils = require(\"./utils\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  (0, _inherits2.default)(TapGestureHandler, _DiscreteGestureHandl);\n  var _super = _createSuper(TapGestureHandler);\n  function TapGestureHandler() {\n    var _this;\n    (0, _classCallCheck2.default)(this, TapGestureHandler);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_shouldFireEndEvent\", null);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_timer\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_multiTapTimer\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onSuccessfulTap\", function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n      if (ev.eventType === _hammerjs.default.INPUT_END) {\n        _this.sendEvent((0, _extends2.default)({}, ev, {\n          eventType: _hammerjs.default.INPUT_MOVE\n        }));\n      }\n      _this.sendEvent((0, _extends2.default)({}, ev, {\n        isFinal: true\n      }));\n      _this.onGestureEnded(ev);\n    });\n    return _this;\n  }\n  (0, _createClass2.default)(TapGestureHandler, [{\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n      (0, _get3.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n      if (this.hasGestureFailed) {\n        return;\n      }\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture2 = this.hammer.get(this.name);\n        if (_gesture2.options.enable(_gesture2, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return (0, _extends2.default)({}, (0, _get3.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        event: this.name,\n        taps: (0, _utils.isnan)(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: (0, _utils.isnan)(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n        shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n        _ref$maxDeltaX = _ref.maxDeltaX,\n        maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n        _ref$maxDeltaY = _ref.maxDeltaY,\n        maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n        _ref$numberOfTaps = _ref.numberOfTaps,\n        numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n        _ref$minDurationMs = _ref.minDurationMs,\n        minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n        _ref$maxDelayMs = _ref.maxDelayMs,\n        maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n        _ref$maxDurationMs = _ref.maxDurationMs,\n        maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n        _ref$maxDist = _ref.maxDist,\n        maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n        _ref$minPointers = _ref.minPointers,\n        minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n        _ref$maxPointers = _ref.maxPointers,\n        maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n        props = (0, _objectWithoutProperties2.default)(_ref, [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n      return (0, _get3.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, (0, _extends2.default)({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n      clearTimeout(this._timer);\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n      (_get2 = (0, _get3.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return (0, _utils.isnan)(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }]);\n  return TapGestureHandler;\n}(_DiscreteGestureHandler.default);\nvar _default = TapGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["TapGestureHandler.ts"],"names":["TapGestureHandler","DiscreteGestureHandler","Hammer","Tap","isnan","config","maxDelayMs","inputData","isGestureRunning","cancelEvent","ev","onSuccessfulTap","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","event","taps","numberOfTaps","interval","time","maxDurationMs","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","_gesture"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"script"}