{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeViewGestureHandler = exports.nativeViewHandlerName = exports.nativeViewProps = exports.nativeViewGestureHandlerProps = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _createHandler = _interopRequireDefault(require(\"./createHandler\"));\nvar _gestureHandlerCommon = require(\"./gestureHandlerCommon\");\nvar nativeViewGestureHandlerProps = ['shouldActivateOnStart', 'disallowInterruption'];\nexports.nativeViewGestureHandlerProps = nativeViewGestureHandlerProps;\nvar nativeViewProps = [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerProps), nativeViewGestureHandlerProps);\nexports.nativeViewProps = nativeViewProps;\nvar nativeViewHandlerName = 'NativeViewGestureHandler';\nexports.nativeViewHandlerName = nativeViewHandlerName;\nvar NativeViewGestureHandler = (0, _createHandler.default)({\n  name: nativeViewHandlerName,\n  allowedProps: nativeViewProps,\n  config: {}\n});\nexports.NativeViewGestureHandler = NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["nativeViewGestureHandlerProps","nativeViewProps","baseGestureHandlerProps","nativeViewHandlerName","NativeViewGestureHandler","createHandler","name","allowedProps","config"],"mappings":";;;;;;AAAA;AACA;AAKO,IAAMA,6BAA6B,GAAG,CAC3C,uBAD2C,EAE3C,sBAF2C,CAAtC;AAAA;AAgCA,IAAMC,eAAe,8CACvBC,6CAD0B,GAE1BF,6BAF0B,CAAxB;AAAA;AAKA,IAAMG,qBAAqB,GAAG,0BAA9B;AAAA;AAIA,IAAMC,wBAAwB,GAAGC,IAAAA,sBAAa,EAGnD;EACAC,IAAI,EAAEH,qBADN;EAEAI,YAAY,EAAEN,eAFd;EAGAO,MAAM,EAAE,CAAA;AAHR,CAHmD,CAA9C;AAAA","sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const nativeViewGestureHandlerProps = [\n  'shouldActivateOnStart',\n  'disallowInterruption',\n] as const;\n\nexport interface NativeViewGestureConfig {\n  /**\n   * Android only.\n   *\n   * Determines whether the handler should check for an existing touch event on\n   * instantiation.\n   */\n  shouldActivateOnStart?: boolean;\n\n  /**\n   * When `true`, cancels all other gesture handlers when this\n   * `NativeViewGestureHandler` receives an `ACTIVE` state event.\n   */\n  disallowInterruption?: boolean;\n}\n\nexport interface NativeViewGestureHandlerProps\n  extends BaseGestureHandlerProps<NativeViewGestureHandlerPayload>,\n    NativeViewGestureConfig {}\n\nexport type NativeViewGestureHandlerPayload = {\n  /**\n   * True if gesture was performed inside of containing view, false otherwise.\n   */\n  pointerInside: boolean;\n};\n\nexport const nativeViewProps = [\n  ...baseGestureHandlerProps,\n  ...nativeViewGestureHandlerProps,\n] as const;\n\nexport const nativeViewHandlerName = 'NativeViewGestureHandler';\n\nexport type NativeViewGestureHandler = typeof NativeViewGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const NativeViewGestureHandler = createHandler<\n  NativeViewGestureHandlerProps,\n  NativeViewGestureHandlerPayload\n>({\n  name: nativeViewHandlerName,\n  allowedProps: nativeViewProps,\n  config: {},\n});\n"]},"metadata":{},"sourceType":"script"}