{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nfunction reduce(fn) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn(val(a), val(b));\n    });\n  };\n}\nfunction reduceFrom(fn, initialValue) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn(val(a), val(b));\n    }, initialValue);\n  };\n}\nfunction infix(fn) {\n  return function (input) {\n    return fn(val(input[0]), val(input[1]));\n  };\n}\nfunction single(fn) {\n  return function (input) {\n    return fn(val(input[0]));\n  };\n}\nvar OPERATIONS = {\n  add: reduce(function (a, b) {\n    return a + b;\n  }),\n  sub: reduce(function (a, b) {\n    return a - b;\n  }),\n  multiply: reduce(function (a, b) {\n    return a * b;\n  }),\n  divide: reduce(function (a, b) {\n    return a / b;\n  }),\n  pow: reduce(function (a, b) {\n    return Math.pow(a, b);\n  }),\n  modulo: reduce(function (a, b) {\n    return (a % b + b) % b;\n  }),\n  sqrt: single(function (a) {\n    return Math.sqrt(a);\n  }),\n  log: single(function (a) {\n    return Math.log(a);\n  }),\n  sin: single(function (a) {\n    return Math.sin(a);\n  }),\n  cos: single(function (a) {\n    return Math.cos(a);\n  }),\n  tan: single(function (a) {\n    return Math.tan(a);\n  }),\n  acos: single(function (a) {\n    return Math.acos(a);\n  }),\n  asin: single(function (a) {\n    return Math.asin(a);\n  }),\n  atan: single(function (a) {\n    return Math.atan(a);\n  }),\n  exp: single(function (a) {\n    return Math.exp(a);\n  }),\n  round: single(function (a) {\n    return Math.round(a);\n  }),\n  and: reduceFrom(function (a, b) {\n    return a && b;\n  }, true),\n  or: reduceFrom(function (a, b) {\n    return a || b;\n  }, false),\n  not: single(function (a) {\n    return !a;\n  }),\n  defined: single(function (a) {\n    return a !== null && a !== undefined && !isNaN(a);\n  }),\n  lessThan: infix(function (a, b) {\n    return a < b;\n  }),\n  eq: infix(function (a, b) {\n    return a == b;\n  }),\n  greaterThan: infix(function (a, b) {\n    return a > b;\n  }),\n  lessOrEq: infix(function (a, b) {\n    return a <= b;\n  }),\n  greaterOrEq: infix(function (a, b) {\n    return a >= b;\n  }),\n  neq: infix(function (a, b) {\n    return a != b;\n  })\n};\nvar AnimatedOperator = function (_AnimatedNode) {\n  _inherits(AnimatedOperator, _AnimatedNode);\n  var _super = _createSuper(AnimatedOperator);\n  function AnimatedOperator(operator, input) {\n    var _this;\n    _classCallCheck(this, AnimatedOperator);\n    _this = _super.call(this, {\n      type: 'op',\n      op: operator,\n      input: input.map(function (n) {\n        return n.__nodeID;\n      })\n    }, input);\n    _this._op = operator;\n    _this._input = input;\n    return _this;\n  }\n  _createClass(AnimatedOperator, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (!this._operation) {\n        this._operation = OPERATIONS[this._op];\n        invariant(this._operation, \"Illegal operator '%s'\", this._op);\n      }\n      return this._operation(this._input);\n    }\n  }]);\n  return AnimatedOperator;\n}(AnimatedNode);\nexport function createAnimatedOperator(name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new AnimatedOperator(name, args.map(adapt));\n  };\n}","map":{"version":3,"names":["AnimatedNode","val","invariant","adapt","reduce","fn","input","a","b","reduceFrom","initialValue","infix","single","OPERATIONS","add","sub","multiply","divide","pow","Math","modulo","sqrt","log","sin","cos","tan","acos","asin","atan","exp","round","and","or","not","defined","undefined","isNaN","lessThan","eq","greaterThan","lessOrEq","greaterOrEq","neq","AnimatedOperator","operator","type","op","map","n","__nodeID","_op","_input","_operation","createAnimatedOperator","name","args"],"sources":["C:/Users/HUSLIANA/react_native_storeapp-master/node_modules/react-native-reanimated/src/core/AnimatedOperator.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    super(\n      { type: 'op', op: operator, input: input.map(n => n.__nodeID) },\n      input\n    );\n    this._op = operator;\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}