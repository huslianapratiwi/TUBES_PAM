{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _State = require(\"../../State\");\nvar _constants = require(\"../constants\");\nvar _GestureHandler2 = _interopRequireDefault(require(\"./GestureHandler\"));\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar NativeViewGestureHandler = function (_GestureHandler) {\n  (0, _inherits2.default)(NativeViewGestureHandler, _GestureHandler);\n  var _super = _createSuper(NativeViewGestureHandler);\n  function NativeViewGestureHandler() {\n    var _this;\n    (0, _classCallCheck2.default)(this, NativeViewGestureHandler);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"buttonRole\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"shouldActivateOnStart\", false);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"disallowInterruption\", false);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"startX\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"startY\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"minDistSq\", _constants.DEFAULT_TOUCH_SLOP * _constants.DEFAULT_TOUCH_SLOP);\n    return _this;\n  }\n  (0, _createClass2.default)(NativeViewGestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"init\", this).call(this, ref, propsRef);\n      this.setShouldCancelWhenOutside(true);\n      this.view.style['touchAction'] = 'auto';\n      this.view.style['WebkitTouchCallout'] = 'auto';\n      if (this.view.hasAttribute('role')) {\n        this.buttonRole = true;\n      } else {\n        this.buttonRole = false;\n      }\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n        enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n        props = (0, _objectWithoutProperties2.default)(_ref, [\"enabled\"]);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"updateGestureConfig\", this).call(this, (0, _extends2.default)({\n        enabled: enabled\n      }, props));\n      if (this.config.shouldActivateOnStart !== undefined) {\n        this.shouldActivateOnStart = this.config.shouldActivateOnStart;\n      }\n      if (this.config.disallowInterruption !== undefined) {\n        this.disallowInterruption = this.config.disallowInterruption;\n      }\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"resetConfig\", this).call(this);\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      this.tracker.addToTracker(event);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"onPointerDown\", this).call(this, event);\n      this.newPointerAction();\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(event) {\n      this.tracker.addToTracker(event);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"onPointerAdd\", this).call(this, event);\n      this.newPointerAction();\n    }\n  }, {\n    key: \"newPointerAction\",\n    value: function newPointerAction() {\n      this.startX = this.tracker.getLastAvgX();\n      this.startY = this.tracker.getLastAvgY();\n      if (this.currentState !== _State.State.UNDETERMINED) {\n        return;\n      }\n      this.begin();\n      if (this.buttonRole) {\n        this.activate();\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.tracker.track(event);\n      var dx = this.startX - this.tracker.getLastAvgX();\n      var dy = this.startY - this.tracker.getLastAvgY();\n      var distSq = dx * dx + dy * dy;\n      if (!this.buttonRole && distSq >= this.minDistSq && this.currentState === _State.State.BEGAN) {\n        this.activate();\n      }\n    }\n  }, {\n    key: \"onPointerOut\",\n    value: function onPointerOut() {\n      this.cancel();\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"onPointerUp\", this).call(this, event);\n      this.onUp(event);\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"onPointerRemove\", this).call(this, event);\n      this.onUp(event);\n    }\n  }, {\n    key: \"onUp\",\n    value: function onUp(event) {\n      this.tracker.removeFromTracker(event.pointerId);\n      if (this.tracker.getTrackedPointersCount() === 0) {\n        if (this.currentState === _State.State.ACTIVE) {\n          this.end();\n        } else {\n          this.fail();\n        }\n      }\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"onPointerCancel\", this).call(this, event);\n      this.cancel();\n      this.reset();\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler) {\n      if ((0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"shouldRecognizeSimultaneously\", this).call(this, handler)) {\n        return true;\n      }\n      if (handler instanceof NativeViewGestureHandler && handler.getState() === _State.State.ACTIVE && handler.disallowsInterruption()) {\n        return false;\n      }\n      var canBeInterrupted = !this.disallowInterruption;\n      if (this.currentState === _State.State.ACTIVE && handler.getState() === _State.State.ACTIVE && canBeInterrupted) {\n        return false;\n      }\n      return this.currentState === _State.State.ACTIVE && canBeInterrupted && handler.getTag() > 0;\n    }\n  }, {\n    key: \"shouldBeCancelledByOther\",\n    value: function shouldBeCancelledByOther(_handler) {\n      return !this.disallowInterruption;\n    }\n  }, {\n    key: \"disallowsInterruption\",\n    value: function disallowsInterruption() {\n      return this.disallowInterruption;\n    }\n  }]);\n  return NativeViewGestureHandler;\n}(_GestureHandler2.default);\nexports.default = NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["NativeViewGestureHandler","GestureHandler","DEFAULT_TOUCH_SLOP","ref","propsRef","setShouldCancelWhenOutside","view","style","hasAttribute","buttonRole","enabled","props","config","shouldActivateOnStart","undefined","disallowInterruption","event","tracker","addToTracker","newPointerAction","startX","getLastAvgX","startY","getLastAvgY","currentState","State","UNDETERMINED","begin","activate","track","dx","dy","distSq","minDistSq","BEGAN","cancel","onUp","removeFromTracker","pointerId","getTrackedPointersCount","ACTIVE","end","fail","reset","handler","getState","disallowsInterruption","canBeInterrupted","getTag","_handler"],"mappings":"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","sourcesContent":["import { State } from '../../State';\nimport { DEFAULT_TOUCH_SLOP } from '../constants';\nimport { AdaptedEvent, Config } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\nexport default class NativeViewGestureHandler extends GestureHandler {\n  private buttonRole!: boolean;\n\n  //TODO: Implement logic for activation on start\n  //@ts-ignore Logic yet to be implemented\n  private shouldActivateOnStart = false;\n  private disallowInterruption = false;\n\n  private startX = 0;\n  private startY = 0;\n  private minDistSq = DEFAULT_TOUCH_SLOP * DEFAULT_TOUCH_SLOP;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n\n    this.setShouldCancelWhenOutside(true);\n\n    this.view.style['touchAction'] = 'auto';\n\n    //@ts-ignore Turns on defualt touch behavior on Safari\n    this.view.style['WebkitTouchCallout'] = 'auto';\n\n    if (this.view.hasAttribute('role')) {\n      this.buttonRole = true;\n    } else {\n      this.buttonRole = false;\n    }\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    if (this.config.shouldActivateOnStart !== undefined) {\n      this.shouldActivateOnStart = this.config.shouldActivateOnStart;\n    }\n    if (this.config.disallowInterruption !== undefined) {\n      this.disallowInterruption = this.config.disallowInterruption;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n  }\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n    this.newPointerAction();\n  }\n\n  protected onPointerAdd(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerAdd(event);\n    this.newPointerAction();\n  }\n\n  private newPointerAction(): void {\n    this.startX = this.tracker.getLastAvgX();\n    this.startY = this.tracker.getLastAvgY();\n\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.begin();\n    if (this.buttonRole) {\n      this.activate();\n    }\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tracker.track(event);\n\n    const dx = this.startX - this.tracker.getLastAvgX();\n    const dy = this.startY - this.tracker.getLastAvgY();\n    const distSq = dx * dx + dy * dy;\n\n    if (\n      !this.buttonRole &&\n      distSq >= this.minDistSq &&\n      this.currentState === State.BEGAN\n    ) {\n      this.activate();\n    }\n  }\n\n  protected onPointerOut(): void {\n    this.cancel();\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.onUp(event);\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.onUp(event);\n  }\n\n  private onUp(event: AdaptedEvent): void {\n    this.tracker.removeFromTracker(event.pointerId);\n\n    if (this.tracker.getTrackedPointersCount() === 0) {\n      if (this.currentState === State.ACTIVE) {\n        this.end();\n      } else {\n        this.fail();\n      }\n    }\n  }\n\n  protected onPointerCancel(event: AdaptedEvent): void {\n    super.onPointerCancel(event);\n    this.cancel();\n    this.reset();\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (super.shouldRecognizeSimultaneously(handler)) {\n      return true;\n    }\n\n    if (\n      handler instanceof NativeViewGestureHandler &&\n      handler.getState() === State.ACTIVE &&\n      handler.disallowsInterruption()\n    ) {\n      return false;\n    }\n\n    const canBeInterrupted = !this.disallowInterruption;\n\n    if (\n      this.currentState === State.ACTIVE &&\n      handler.getState() === State.ACTIVE &&\n      canBeInterrupted\n    ) {\n      return false;\n    }\n\n    return (\n      this.currentState === State.ACTIVE &&\n      canBeInterrupted &&\n      handler.getTag() > 0\n    );\n  }\n\n  public shouldBeCancelledByOther(_handler: GestureHandler): boolean {\n    return !this.disallowInterruption;\n  }\n\n  public disallowsInterruption(): boolean {\n    return this.disallowInterruption;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}