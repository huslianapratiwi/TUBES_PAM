{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nvar parser = new UAParser();\nvar ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\nvar _sessionId = uuidv4();\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n  get appOwnership() {\n    return 'expo';\n  },\n  get installationId() {\n    var installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId() {\n    return _sessionId;\n  },\n  get platform() {\n    return {\n      web: canUseDOM ? UAParser(navigator.userAgent) : undefined\n    };\n  },\n  get isHeadless() {\n    return false;\n  },\n  get isDevice() {\n    return true;\n  },\n  get isDetached() {\n    return false;\n  },\n  get expoVersion() {\n    return this.manifest.sdkVersion || null;\n  },\n  get linkingUri() {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get expoRuntimeVersion() {\n    return this.expoVersion;\n  },\n  get deviceName() {\n    var _parser$getResult = parser.getResult(),\n      browser = _parser$getResult.browser,\n      engine = _parser$getResult.engine,\n      OS = _parser$getResult.os;\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion() {\n    return null;\n  },\n  get nativeBuildVersion() {\n    return null;\n  },\n  get systemFonts() {\n    return [];\n  },\n  get statusBarHeight() {\n    return 0;\n  },\n  get deviceYearClass() {\n    return null;\n  },\n  get manifest() {\n    return process && process.env && process.env.APP_MANIFEST || undefined || {};\n  },\n  get experienceUrl() {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get debugMode() {\n    return __DEV__;\n  },\n  getWebViewUserAgentAsync: function getWebViewUserAgentAsync() {\n    return _regeneratorRuntime.async(function getWebViewUserAgentAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!canUseDOM) {\n              _context.next = 4;\n              break;\n            }\n            return _context.abrupt(\"return\", navigator.userAgent);\n          case 4:\n            return _context.abrupt(\"return\", null);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,+BAA+B;AACzD,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAOC,MAAM,MAAM,SAAS;AAI5B,IAAMC,MAAM,GAAG,IAAIF,QAAQ,EAAE;AAC7B,IAAMG,MAAM,GAAG,gCAAgC;AAQ/C,IAAMC,UAAU,GAAGH,MAAM,EAAE;AAE3B,eAAe;EACb,IAAII,IAAI;IACN,OAAO,mBAAmB;EAC5B,CAAC;EACD,IAAIC,YAAY;IACd,OAAO,MAAM;EACf,CAAC;EACD,IAAIC,cAAc;IAChB,IAAIA,cAAc;IAClB,IAAI;MACFA,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACN,MAAM,CAAC;MAC7C,IAAII,cAAc,IAAI,IAAI,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;QAChEA,cAAc,GAAGN,MAAM,EAAE;QACzBO,YAAY,CAACE,OAAO,CAACP,MAAM,EAAEI,cAAwB,CAAC;;KAEzD,CAAC,OAAOI,KAAK,EAAE;MACdJ,cAAc,GAAGH,UAAU;KAC5B,SAAS;MACR,OAAOG,cAAc;;EAEzB,CAAC;EACD,IAAIK,SAAS;IACX,OAAOR,UAAU;EACnB,CAAC;EACD,IAAIS,QAAQ;IACV,OAAO;MAAEC,GAAG,EAAEf,SAAS,GAAGC,QAAQ,CAACe,SAAS,CAACC,SAAS,CAAC,GAAGC;IAAS,CAAE;EACvE,CAAC;EACD,IAAIC,UAAU;IACZ,OAAO,KAAK;EACd,CAAC;EACD,IAAIC,QAAQ;IAEV,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,UAAU;IACZ,OAAO,KAAK;EACd,CAAC;EACD,IAAIC,WAAW;IACb,OAAO,IAAI,CAACC,QAAQ,CAACC,UAAU,IAAI,IAAI;EACzC,CAAC;EACD,IAAIC,UAAU;IACZ,IAAIzB,SAAS,EAAE;MAEb,OAAO0B,QAAQ,CAACC,MAAM,GAAGD,QAAQ,CAACE,QAAQ;KAC3C,MAAM;MACL,OAAO,EAAE;;EAEb,CAAC;EACD,IAAIC,kBAAkB;IACpB,OAAO,IAAI,CAACP,WAAW;EACzB,CAAC;EACD,IAAIQ,UAAU;IAAA,wBACwB3B,MAAM,CAAC4B,SAAS,EAAE;MAA9CC,OAAO,qBAAPA,OAAO;MAAEC,MAAM,qBAANA,MAAM;MAAMC,EAAE,qBAANC,EAAE;IAE3B,OAAOH,OAAO,CAAC1B,IAAI,IAAI2B,MAAM,CAAC3B,IAAI,IAAI4B,EAAE,CAAC5B,IAAI,IAAIY,SAAS;EAC5D,CAAC;EACD,IAAIkB,gBAAgB;IAClB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,kBAAkB;IACpB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,WAAW;IAEb,OAAO,EAAE;EACX,CAAC;EACD,IAAIC,eAAe;IACjB,OAAO,CAAC;EACV,CAAC;EACD,IAAIC,eAAe;IAEjB,OAAO,IAAI;EACb,CAAC;EACD,IAAIjB,QAAQ;IAGV,OAAO,mEAA4B,EAAE;EACvC,CAAC;EACD,IAAIkB,aAAa;IACf,IAAIzC,SAAS,EAAE;MACb,OAAO0B,QAAQ,CAACC,MAAM,GAAGD,QAAQ,CAACE,QAAQ;KAC3C,MAAM;MACL,OAAO,EAAE;;EAEb,CAAC;EACD,IAAIc,SAAS;IACX,OAAOC,OAAO;EAChB,CAAC;EACKC,wBAAwB;IAAA;MAAA;QAAA;UAAA;YAAA,KACxB5C,SAAS;cAAA;cAAA;YAAA;YAAA,iCACJgB,SAAS,CAACC,SAAS;UAAA;YAAA,iCAEnB,IAAI;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;CAGG","names":["canUseDOM","UAParser","uuidv4","parser","ID_KEY","_sessionId","name","appOwnership","installationId","localStorage","getItem","setItem","error","sessionId","platform","web","navigator","userAgent","undefined","isHeadless","isDevice","isDetached","expoVersion","manifest","sdkVersion","linkingUri","location","origin","pathname","expoRuntimeVersion","deviceName","getResult","browser","engine","OS","os","nativeAppVersion","nativeBuildVersion","systemFonts","statusBarHeight","deviceYearClass","experienceUrl","debugMode","__DEV__","getWebViewUserAgentAsync"],"sourceRoot":"","sources":["../src/ExponentConstants.web.ts"],"sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\n\nimport { PlatformManifest, WebManifest, NativeConstants } from './Constants.types';\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership(): 'expo' {\n    return 'expo';\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: canUseDOM ? UAParser(navigator.userAgent) : undefined };\n  },\n  get isHeadless(): false {\n    return false;\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get isDetached(): false {\n    return false;\n  },\n  get expoVersion(): string | null {\n    return this.manifest.sdkVersion || null;\n  },\n  get linkingUri(): string {\n    if (canUseDOM) {\n      // On native this is `exp://`\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get expoRuntimeVersion(): string | null {\n    return this.expoVersion;\n  },\n  get deviceName(): string | undefined {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string | null> {\n    if (canUseDOM) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  },\n} as NativeConstants;\n"]},"metadata":{},"sourceType":"module"}