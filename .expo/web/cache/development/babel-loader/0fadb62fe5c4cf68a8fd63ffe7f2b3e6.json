{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PanGesture = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _gesture = require(\"./gesture\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  var changePayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY\n    };\n  }\n  return (0, _extends2.default)({}, current, changePayload);\n}\nvar PanGesture = function (_ContinousBaseGesture) {\n  (0, _inherits2.default)(PanGesture, _ContinousBaseGesture);\n  var _super = _createSuper(PanGesture);\n  function PanGesture() {\n    var _this;\n    (0, _classCallCheck2.default)(this, PanGesture);\n    _this = _super.call(this);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"config\", {});\n    _this.handlerName = 'PanGestureHandler';\n    return _this;\n  }\n  (0, _createClass2.default)(PanGesture, [{\n    key: \"activeOffsetY\",\n    value: function activeOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetYStart = offset[0];\n        this.config.activeOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetYStart = offset;\n      } else {\n        this.config.activeOffsetYEnd = offset;\n      }\n      return this;\n    }\n  }, {\n    key: \"activeOffsetX\",\n    value: function activeOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetXStart = offset[0];\n        this.config.activeOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetXStart = offset;\n      } else {\n        this.config.activeOffsetXEnd = offset;\n      }\n      return this;\n    }\n  }, {\n    key: \"failOffsetY\",\n    value: function failOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetYStart = offset[0];\n        this.config.failOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetYStart = offset;\n      } else {\n        this.config.failOffsetYEnd = offset;\n      }\n      return this;\n    }\n  }, {\n    key: \"failOffsetX\",\n    value: function failOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetXStart = offset[0];\n        this.config.failOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetXStart = offset;\n      } else {\n        this.config.failOffsetXEnd = offset;\n      }\n      return this;\n    }\n  }, {\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"maxPointers\",\n    value: function maxPointers(_maxPointers) {\n      this.config.maxPointers = _maxPointers;\n      return this;\n    }\n  }, {\n    key: \"minDistance\",\n    value: function minDistance(distance) {\n      this.config.minDist = distance;\n      return this;\n    }\n  }, {\n    key: \"minVelocity\",\n    value: function minVelocity(velocity) {\n      this.config.minVelocity = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityX\",\n    value: function minVelocityX(velocity) {\n      this.config.minVelocityX = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityY\",\n    value: function minVelocityY(velocity) {\n      this.config.minVelocityY = velocity;\n      return this;\n    }\n  }, {\n    key: \"averageTouches\",\n    value: function averageTouches(value) {\n      this.config.avgTouches = value;\n      return this;\n    }\n  }, {\n    key: \"enableTrackpadTwoFingerGesture\",\n    value: function enableTrackpadTwoFingerGesture(value) {\n      this.config.enableTrackpadTwoFingerGesture = value;\n      return this;\n    }\n  }, {\n    key: \"activateAfterLongPress\",\n    value: function activateAfterLongPress(duration) {\n      this.config.activateAfterLongPress = duration;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(PanGesture.prototype), \"onChange\", this).call(this, callback);\n    }\n  }]);\n  return PanGesture;\n}(_gesture.ContinousBaseGesture);\nexports.PanGesture = PanGesture;","map":{"version":3,"sources":["panGesture.ts"],"names":["changeEventCalculator","current","previous","changePayload","undefined","changeX","translationX","changeY","translationY","PanGesture","ContinousBaseGesture","constructor","handlerName","offset","Array","isArray","config","activeOffsetYStart","activeOffsetYEnd","activeOffsetXStart","activeOffsetXEnd","failOffsetYStart","failOffsetYEnd","failOffsetXStart","failOffsetXEnd","minPointers","maxPointers","distance","minDist","velocity","minVelocity","minVelocityX","minVelocityY","value","avgTouches","enableTrackpadTwoFingerGesture","duration","activateAfterLongPress","callback","handlers"],"mappings":"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","sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\nexport type PanGestureChangeEventPayload = {\n  changeX: number;\n  changeY: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PanGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PanGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY,\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PanGesture extends ContinousBaseGesture<\n  PanGestureHandlerEventPayload,\n  PanGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n\n  activateAfterLongPress(duration: number) {\n    this.config.activateAfterLongPress = duration;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PanGestureHandlerEventPayload & PanGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]},"metadata":{},"sourceType":"script"}