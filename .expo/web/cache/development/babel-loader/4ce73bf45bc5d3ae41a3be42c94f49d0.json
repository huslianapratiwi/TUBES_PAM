{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _OrientationWebToAPI;\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { canUseViewport, canUseEventListeners } from 'fbjs/lib/ExecutionEnvironment';\nimport { Orientation, WebOrientationLock, WebOrientation } from \"./ScreenOrientation.types\";\nimport { getOrientationLockAsync, getOrientationAsync } from \"./ScreenOrientation\";\nvar OrientationLockAPIToWeb = {\n  DEFAULT: WebOrientationLock.NATURAL,\n  ALL: WebOrientationLock.ANY,\n  PORTRAIT: WebOrientationLock.PORTRAIT,\n  PORTRAIT_UP: WebOrientationLock.PORTRAIT_PRIMARY,\n  PORTRAIT_DOWN: WebOrientationLock.PORTRAIT_SECONDARY,\n  LANDSCAPE: WebOrientationLock.LANDSCAPE,\n  LANDSCAPE_LEFT: WebOrientationLock.LANDSCAPE_PRIMARY,\n  LANDSCAPE_RIGHT: WebOrientationLock.LANDSCAPE_SECONDARY\n};\nvar OrientationWebToAPI = (_OrientationWebToAPI = {}, _defineProperty(_OrientationWebToAPI, WebOrientation.PORTRAIT_PRIMARY, Orientation.PORTRAIT_UP), _defineProperty(_OrientationWebToAPI, WebOrientation.PORTRAIT_SECONDARY, Orientation.PORTRAIT_DOWN), _defineProperty(_OrientationWebToAPI, WebOrientation.LANDSCAPE_PRIMARY, Orientation.LANDSCAPE_LEFT), _defineProperty(_OrientationWebToAPI, WebOrientation.LANDSCAPE_SECONDARY, Orientation.LANDSCAPE_RIGHT), _OrientationWebToAPI);\nvar _ref = canUseViewport && window,\n  screen = _ref.screen;\nvar orientation = canUseViewport && (screen.orientation || screen.msOrientation || null);\nfunction emitOrientationEvent() {\n  var _await$Promise$all, _await$Promise$all2, orientationLock, orientationInfo;\n  return _regeneratorRuntime.async(function emitOrientationEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([getOrientationLockAsync(), getOrientationAsync()]));\n        case 2:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n          orientationLock = _await$Promise$all2[0];\n          orientationInfo = _await$Promise$all2[1];\n          SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n            orientationLock: orientationLock,\n            orientationInfo: orientationInfo\n          });\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nif (canUseEventListeners) {\n  if (orientation && orientation.addEventListener) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\nfunction _convertToLegacyOrientationLock(orientationLock) {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.\");\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\nfunction _lockAsync(webOrientationLock) {\n  var legacyLock, lockOrientation, isSuccess;\n  return _regeneratorRuntime.async(function _lockAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(webOrientationLock === WebOrientationLock.UNKNOWN)) {\n            _context2.next = 2;\n            break;\n          }\n          throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.\");\n        case 2:\n          if (!(screen.orientation && screen.orientation.lock)) {\n            _context2.next = 7;\n            break;\n          }\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(screen.orientation.lock(webOrientationLock));\n        case 5:\n          _context2.next = 16;\n          break;\n        case 7:\n          if (!(screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'])) {\n            _context2.next = 15;\n            break;\n          }\n          legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n          lockOrientation = screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n          isSuccess = lockOrientation.call(screen, legacyLock);\n          if (isSuccess) {\n            _context2.next = 13;\n            break;\n          }\n          throw new Error(\"Applying orientation lock: \" + JSON.stringify(webOrientationLock) + \" to device was denied\");\n        case 13:\n          _context2.next = 16;\n          break;\n        case 15:\n          throw new Error(\"expo-screen-orientation: The browser doesn't support locking screen orientation.\");\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar _lastWebOrientationLock = WebOrientationLock.UNKNOWN;\nexport default {\n  get name() {\n    return 'ExpoScreenOrientation';\n  },\n  supportsOrientationLockAsync: function supportsOrientationLockAsync(orientationLock) {\n    return _regeneratorRuntime.async(function supportsOrientationLockAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", orientationLock in OrientationLockAPIToWeb);\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getPlatformOrientationLockAsync: function getPlatformOrientationLockAsync() {\n    return _regeneratorRuntime.async(function getPlatformOrientationLockAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", _lastWebOrientationLock);\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getOrientationAsync: function getOrientationAsync() {\n    var webOrientation;\n    return _regeneratorRuntime.async(function getOrientationAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            webOrientation = screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n            if (webOrientation) {\n              _context5.next = 3;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              orientation: Orientation.UNKNOWN\n            });\n          case 3:\n            return _context5.abrupt(\"return\", {\n              orientation: OrientationWebToAPI[webOrientation]\n            });\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  lockAsync: function lockAsync(orientationLock) {\n    var webOrientationLock;\n    return _regeneratorRuntime.async(function lockAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n            if (webOrientationLock) {\n              _context6.next = 3;\n              break;\n            }\n            throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n          case 3:\n            _context6.next = 5;\n            return _regeneratorRuntime.awrap(_lockAsync(webOrientationLock));\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  lockPlatformAsync: function lockPlatformAsync(webOrientationLock) {\n    return _regeneratorRuntime.async(function lockPlatformAsync$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regeneratorRuntime.awrap(_lockAsync(webOrientationLock));\n          case 2:\n            _lastWebOrientationLock = webOrientationLock;\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  unlockAsync: function unlockAsync() {\n    var unlockOrientation, isSuccess;\n    return _regeneratorRuntime.async(function unlockAsync$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(screen.orientation && screen.orientation.unlock)) {\n              _context8.next = 4;\n              break;\n            }\n            screen.orientation.unlock();\n            _context8.next = 12;\n            break;\n          case 4:\n            if (!(screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'])) {\n              _context8.next = 11;\n              break;\n            }\n            unlockOrientation = screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'];\n            isSuccess = unlockOrientation.call(screen);\n            if (isSuccess) {\n              _context8.next = 9;\n              break;\n            }\n            throw new Error(\"Unlocking screen orientation on device was denied\");\n          case 9:\n            _context8.next = 12;\n            break;\n          case 11:\n            throw new Error(\"expo-screen-orientation: The browser doesn't support unlocking screen orientation.\");\n          case 12:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"mappings":"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","names":["SyntheticPlatformEmitter","canUseViewport","canUseEventListeners","Orientation","WebOrientationLock","WebOrientation","getOrientationLockAsync","getOrientationAsync","OrientationLockAPIToWeb","DEFAULT","NATURAL","ALL","ANY","PORTRAIT","PORTRAIT_UP","PORTRAIT_PRIMARY","PORTRAIT_DOWN","PORTRAIT_SECONDARY","LANDSCAPE","LANDSCAPE_LEFT","LANDSCAPE_PRIMARY","LANDSCAPE_RIGHT","LANDSCAPE_SECONDARY","OrientationWebToAPI","window","screen","orientation","msOrientation","emitOrientationEvent","Promise","all","orientationLock","orientationInfo","emit","addEventListener","_convertToLegacyOrientationLock","UNKNOWN","Error","_lockAsync","webOrientationLock","lock","legacyLock","lockOrientation","isSuccess","call","JSON","stringify","_lastWebOrientationLock","name","supportsOrientationLockAsync","getPlatformOrientationLockAsync","webOrientation","type","lockAsync","TypeError","lockPlatformAsync","unlockAsync","unlock","unlockOrientation"],"sourceRoot":"","sources":["../../src/ScreenOrientation/ExpoScreenOrientation.web.ts"],"sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { canUseViewport, canUseEventListeners } from 'fbjs/lib/ExecutionEnvironment';\n\nimport {\n  OrientationInfo,\n  Orientation,\n  OrientationLock,\n  WebOrientationLock,\n  WebOrientation,\n} from './ScreenOrientation.types';\n\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\n\nconst OrientationLockAPIToWeb: {\n  [lock: string]: WebOrientationLock;\n} = {\n  DEFAULT: WebOrientationLock.NATURAL,\n  ALL: WebOrientationLock.ANY,\n  PORTRAIT: WebOrientationLock.PORTRAIT,\n  PORTRAIT_UP: WebOrientationLock.PORTRAIT_PRIMARY,\n  PORTRAIT_DOWN: WebOrientationLock.PORTRAIT_SECONDARY,\n  LANDSCAPE: WebOrientationLock.LANDSCAPE,\n  LANDSCAPE_LEFT: WebOrientationLock.LANDSCAPE_PRIMARY,\n  LANDSCAPE_RIGHT: WebOrientationLock.LANDSCAPE_SECONDARY,\n};\n\nconst OrientationWebToAPI: {\n  [orientationWeb: string]: Orientation;\n} = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT,\n};\n\ndeclare const window: Window;\n\nconst { screen } = canUseViewport && window;\nconst orientation: ScreenOrientation | null =\n  canUseViewport && (screen.orientation || (screen as any).msOrientation || null);\n\nasync function emitOrientationEvent() {\n  const [orientationLock, orientationInfo] = await Promise.all([\n    getOrientationLockAsync(),\n    getOrientationAsync(),\n  ]);\n  SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo,\n  });\n}\n\nif (canUseEventListeners) {\n  if (orientation && orientation.addEventListener) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock: WebOrientationLock): string | string[] {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\n        `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`\n      );\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\n      `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`\n    );\n  }\n  if (screen.orientation && screen.orientation.lock) {\n    await screen.orientation.lock(webOrientationLock);\n  } else if (\n    screen['lockOrientation'] ||\n    screen['mozLockOrientation'] ||\n    screen['msLockOrientation']\n  ) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation =\n      screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    // correct `this` context must be passed in otherwise method call is disallowed by browser\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(\n        `Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`\n      );\n    }\n  } else {\n    throw new Error(\n      `expo-screen-orientation: The browser doesn't support locking screen orientation.`\n    );\n  }\n}\n\nlet _lastWebOrientationLock: WebOrientationLock = WebOrientationLock.UNKNOWN;\n\nexport default {\n  get name(): string {\n    return 'ExpoScreenOrientation';\n  },\n  async supportsOrientationLockAsync(orientationLock: OrientationLock): Promise<boolean> {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n  async getPlatformOrientationLockAsync(): Promise<WebOrientationLock> {\n    return _lastWebOrientationLock;\n  },\n  async getOrientationAsync(): Promise<OrientationInfo> {\n    const webOrientation =\n      screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      return {\n        orientation: Orientation.UNKNOWN,\n      };\n    }\n    return {\n      orientation: OrientationWebToAPI[webOrientation],\n    };\n  },\n  async lockAsync(orientationLock: OrientationLock): Promise<void> {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  },\n  async lockPlatformAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n  async unlockAsync(): Promise<void> {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (\n      screen['unlockOrientation'] ||\n      screen['mozUnlockOrientation'] ||\n      screen['msUnlockOrientation']\n    ) {\n      const unlockOrientation =\n        screen['unlockOrientation'] ||\n        screen['mozUnlockOrientation'] ||\n        screen['msUnlockOrientation'];\n      // correct `this` context must be passed in otherwise method call is disallowed by browser\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(\n        `expo-screen-orientation: The browser doesn't support unlocking screen orientation.`\n      );\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}