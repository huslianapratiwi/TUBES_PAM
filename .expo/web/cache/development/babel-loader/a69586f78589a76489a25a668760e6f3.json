{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\n\nimport { ScreenContainer } from 'react-native-screens';\nimport { NavigationHelpersContext, DrawerActions, useTheme } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport useWindowDimensions from \"../utils/useWindowDimensions\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    _ref2$lazy = _ref2.lazy,\n    lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$drawerPosition = _ref2.drawerPosition,\n    drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n    _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n    keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n    _ref2$overlayColor = _ref2.overlayColor,\n    overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n    _ref2$drawerType = _ref2.drawerType,\n    drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n    _ref2$hideStatusBar = _ref2.hideStatusBar,\n    hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n    _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n    statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n    drawerContentOptions = _ref2.drawerContentOptions,\n    drawerStyle = _ref2.drawerStyle,\n    edgeWidth = _ref2.edgeWidth,\n    gestureHandlerProps = _ref2.gestureHandlerProps,\n    minSwipeDistance = _ref2.minSwipeDistance,\n    sceneContainerStyle = _ref2.sceneContainerStyle;\n  var _React$useState = React.useState([state.index]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  var dimensions = useWindowDimensions();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var isDrawerOpen = state.history.some(function (it) {\n    return it.type === 'drawer';\n  });\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n    if (isDrawerOpen) {\n      subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n    return function () {\n      var _subscription;\n      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  if (!loaded.includes(state.index)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [state.index]));\n  }\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n  var renderContent = function renderContent() {\n    return React.createElement(ScreenContainer, {\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(index) && !isFocused) {\n        return null;\n      }\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused\n      }, descriptor.render());\n    }));\n  };\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n    gestureEnabled = _descriptors$activeKe.gestureEnabled,\n    swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(SafeAreaProviderCompat, null, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","ScreenContainer","NavigationHelpersContext","DrawerActions","useTheme","GestureHandlerRootView","SafeAreaProviderCompat","ResourceSavingScene","DrawerContent","Drawer","DrawerOpenContext","DrawerPositionContext","useWindowDimensions","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","useState","index","loaded","setLoaded","dimensions","colors","isDrawerOpen","history","some","it","type","handleDrawerOpen","useCallback","dispatch","openDrawer","target","key","handleDrawerClose","closeDrawer","useEffect","emit","subscription","BackHandler","addEventListener","_subscription","remove","includes","renderNavigationView","progress","Provider","value","renderContent","style","styles","content","routes","map","route","descriptor","unmountOnBlur","options","isFocused","StyleSheet","absoluteFill","opacity","isVisible","render","activeKey","gestureEnabled","swipeEnabled","open","onOpen","onClose","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","swipeEdgeWidth","swipeDistanceThreshold","renderDrawerContent","renderSceneContent","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = state.history.some((it) => it.type === 'drawer');\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}