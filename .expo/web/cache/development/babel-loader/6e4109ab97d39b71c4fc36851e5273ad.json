{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useDescriptors;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _SceneView = _interopRequireDefault(require(\"./SceneView\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nvar _useNavigationCache = _interopRequireDefault(require(\"./useNavigationCache\"));\nvar _useRouteCache = _interopRequireDefault(require(\"./useRouteCache\"));\nvar _NavigationContext = _interopRequireDefault(require(\"./NavigationContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useDescriptors(_ref) {\n  var state = _ref.state,\n    screens = _ref.screens,\n    navigation = _ref.navigation,\n    screenOptions = _ref.screenOptions,\n    onAction = _ref.onAction,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    addListener = _ref.addListener,\n    addKeyedListener = _ref.addKeyedListener,\n    onRouteFocus = _ref.onRouteFocus,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var _React$useState = React.useState({}),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    options = _React$useState2[0],\n    setOptions = _React$useState2[1];\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n    onDispatchAction = _React$useContext.onDispatchAction,\n    onOptionsChange = _React$useContext.onOptionsChange;\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  var navigations = (0, _useNavigationCache.default)({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = (0, _useRouteCache.default)(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n    var routeOptions = (0, _extends2.default)({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n      route: route,\n      navigation: navigation\n    }), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n      route: route,\n      navigation: navigation\n    }), options[route.key]);\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(_NavigationBuilderContext.default.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(_NavigationContext.default.Provider, {\n          value: navigation\n        }, React.createElement(_NavigationRouteContext.default.Provider, {\n          value: route\n        }, React.createElement(_SceneView.default, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: routeOptions\n        }))));\n      },\n      options: routeOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","React","useState","onDispatchAction","onOptionsChange","useContext","NavigationBuilderContext","context","useMemo","navigations","useNavigationCache","routes","useRouteCache","reduce","acc","route","i","screen","name","key","routeOptions","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"script"}