{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var IS_MANAGED_ENV = false;\nexport var manifestBaseUrl = null;\nexport function downloadAsync(uri, hash, type, name) {\n  return _regeneratorRuntime.async(function downloadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", uri);\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getManifest() {\n  return {};\n}","map":{"version":3,"mappings":";AAAA,OAAO,IAAMA,cAAc,GAAG,KAAK;AAGnC,OAAO,IAAMC,eAAe,GAAG,IAAI;AAEnC,OAAO,SAAeC,aAAa,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI;EAAA;IAAA;MAAA;QAAA;UAAA,iCAChDH,GAAG;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAGZ,OAAM,SAAUI,WAAW;EACzB,OAAO,EAAE;AACX","names":["IS_MANAGED_ENV","manifestBaseUrl","downloadAsync","uri","hash","type","name","getManifest"],"sourceRoot":"","sources":["../src/PlatformUtils.web.ts"],"sourcesContent":["export const IS_MANAGED_ENV = false;\n\n// Compute manifest base URL if available\nexport const manifestBaseUrl = null;\n\nexport async function downloadAsync(uri, hash, type, name): Promise<string> {\n  return uri;\n}\n\nexport function getManifest() {\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}