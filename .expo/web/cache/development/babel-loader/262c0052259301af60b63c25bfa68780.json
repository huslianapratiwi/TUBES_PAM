{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reanimated = void 0;\nvar _utils = require(\"../../utils\");\nvar Reanimated;\nexports.Reanimated = Reanimated;\ntry {\n  exports.Reanimated = Reanimated = require('react-native-reanimated');\n  if (!Reanimated.useSharedValue) {\n    exports.Reanimated = Reanimated = undefined;\n    throw new Error('react-native-reanimated is not found');\n  }\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = function () {\n      'worklet';\n\n      console.warn((0, _utils.tagMessage)('Please use newer version of react-native-reanimated in order to control state of the gestures.'));\n    };\n  }\n} catch (e) {}","map":{"version":3,"sources":["reanimatedWrapper.ts"],"names":["Reanimated","require","useSharedValue","undefined","Error","setGestureState","console","warn","tagMessage","e"],"mappings":";;;;AAKA;AAMA,IAAIA,UAAJ;AAAA;AAkBA,IAAI;EACFA,qBAAAA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAApBD;EAEA,IAAI,CAACA,UAAU,CAACE,cAAhB,EAAgC;IAG9BF,qBAAAA,UAAU,GAAGG,SAAbH;IACA,MAAM,IAAII,KAAJ,CAAU,sCAAV,CAAN;EACD;EAED,IAAI,CAACJ,UAAU,CAACK,eAAhB,EAAiC;IAC/BL,UAAU,CAACK,eAAXL,GAA6B,YAAM;MACjC,SAAA;;MACAM,OAAO,CAACC,IAARD,CACEE,IAAAA,iBAAU,EACR,gGADQ,CADZF,CAAAA;IAKD,CAPDN;EAXA;AAuBH,CAvBD,CAuBE,OAAOS,CAAP,EAAU,CAAE","sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { tagMessage } from '../../utils';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated: {\n  default: {\n    // Slightly modified definition copied from 'react-native-reanimated'\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    createAnimatedComponent<P extends object>(\n      component: ComponentClass<P>,\n      options?: unknown\n    ): ComponentClass<P>;\n  };\n  useEvent: (\n    callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n    events: string[],\n    rebuild: boolean\n  ) => unknown;\n  useSharedValue: <T>(value: T) => SharedValue<T>;\n  setGestureState: (handlerTag: number, newState: number) => void;\n};\n\ntry {\n  Reanimated = require('react-native-reanimated');\n\n  if (!Reanimated.useSharedValue) {\n    // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not\n    // reset the module to undefined so we can fallback to the default implementation\n    Reanimated = undefined;\n    throw new Error('react-native-reanimated is not found');\n  }\n\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = () => {\n      'worklet';\n      console.warn(\n        tagMessage(\n          'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n        )\n      );\n    };\n  }\n  // When 'react-native-reanimated' is not available we want to\n  // quietly continue\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nexport { Reanimated };\n"]},"metadata":{},"sourceType":"script"}