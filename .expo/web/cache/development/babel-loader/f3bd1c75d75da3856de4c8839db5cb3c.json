{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Constants from 'expo-constants';\nimport qs from 'qs';\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\nimport Linking from \"./Linking/Linking\";\nvar BASE_URL = \"https://auth.expo.io\";\nvar _authLock = false;\nfunction startAsync(options) {\n  var returnUrl, authUrl, startUrl, result, _parseUrl, params, errorCode;\n  return _regeneratorRuntime.async(function startAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          returnUrl = options.returnUrl || getDefaultReturnUrl();\n          authUrl = options.authUrl;\n          startUrl = getStartUrl(authUrl, returnUrl);\n          if (authUrl) {\n            _context.next = 5;\n            break;\n          }\n          throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n        case 5:\n          if (!_authLock) {\n            _context.next = 8;\n            break;\n          }\n          if (__DEV__) {\n            console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n          }\n          return _context.abrupt(\"return\", {\n            type: 'locked'\n          });\n        case 8:\n          _authLock = true;\n          _context.prev = 9;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(_openWebBrowserAsync(startUrl, returnUrl));\n        case 12:\n          result = _context.sent;\n        case 13:\n          _context.prev = 13;\n          _authLock = false;\n          return _context.finish(13);\n        case 16:\n          if (result) {\n            _context.next = 18;\n            break;\n          }\n          throw new Error('Unexpected missing AuthSession result');\n        case 18:\n          if (result.url) {\n            _context.next = 24;\n            break;\n          }\n          if (!result.type) {\n            _context.next = 23;\n            break;\n          }\n          return _context.abrupt(\"return\", result);\n        case 23:\n          throw new Error('Unexpected AuthSession result with missing type');\n        case 24:\n          _parseUrl = parseUrl(result.url), params = _parseUrl.params, errorCode = _parseUrl.errorCode;\n          return _context.abrupt(\"return\", {\n            type: errorCode ? 'error' : 'success',\n            params: params,\n            errorCode: errorCode,\n            url: result.url\n          });\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[9,, 13, 16]], Promise);\n}\nfunction dismiss() {\n  dismissAuthSession();\n}\nfunction _openWebBrowserAsync(startUrl, returnUrl) {\n  var result;\n  return _regeneratorRuntime.async(function _openWebBrowserAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(openAuthSessionAsync(startUrl, returnUrl));\n        case 2:\n          result = _context2.sent;\n          if (!(result.type === 'cancel' || result.type === 'dismiss')) {\n            _context2.next = 5;\n            break;\n          }\n          return _context2.abrupt(\"return\", {\n            type: result.type\n          });\n        case 5:\n          return _context2.abrupt(\"return\", result);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getStartUrl(authUrl, returnUrl) {\n  var queryString = qs.stringify({\n    authUrl: authUrl,\n    returnUrl: returnUrl\n  });\n  return getRedirectUrl() + \"/start?\" + queryString;\n}\nfunction getRedirectUrl() {\n  var redirectUrl = BASE_URL + \"/\" + Constants.manifest.id;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\nfunction getDefaultReturnUrl() {\n  return Linking.makeUrl('expo-auth-session');\n}\nfunction parseUrl(url) {\n  var parts = url.split('#');\n  var hash = parts[1];\n  var partsWithoutHash = parts[0].split('?');\n  var queryString = partsWithoutHash[partsWithoutHash.length - 1];\n  var parsedSearch = qs.parse(queryString);\n  var errorCode = parsedSearch.errorCode;\n  delete parsedSearch.errorCode;\n  var parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n  var params = _objectSpread(_objectSpread({}, parsedSearch), parsedHash);\n  return {\n    errorCode: errorCode,\n    params: params\n  };\n}\nfunction _warnIfAnonymous(id, url) {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\" + url + \"\\\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\");\n  }\n}\nexport default {\n  dismiss: dismiss,\n  getRedirectUrl: getRedirectUrl,\n  getStartUrl: getStartUrl,\n  getDefaultReturnUrl: getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');\n    return getRedirectUrl;\n  },\n  startAsync: startAsync\n};","map":{"version":3,"mappings":"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","names":["Constants","qs","openAuthSessionAsync","dismissAuthSession","Linking","BASE_URL","_authLock","startAsync","options","returnUrl","getDefaultReturnUrl","authUrl","startUrl","getStartUrl","Error","__DEV__","console","warn","type","_openWebBrowserAsync","result","url","parseUrl","params","errorCode","dismiss","queryString","stringify","getRedirectUrl","redirectUrl","manifest","id","_warnIfAnonymous","makeUrl","parts","split","hash","partsWithoutHash","length","parsedSearch","parse","parsedHash","startsWith","getRedirectUri"],"sourceRoot":"","sources":["../src/AuthSession.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport qs from 'qs';\n\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\nimport Linking from './Linking/Linking';\n\ntype AuthSessionOptions = {\n  authUrl: string;\n  returnUrl?: string;\n};\n\ntype AuthSessionResult =\n  | { type: 'cancel' | 'dismiss' | 'locked' }\n  | {\n      type: 'error' | 'success';\n      errorCode: string | null;\n      params: { [key: string]: string };\n      url: string;\n    };\n\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl);\n\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  let { params, errorCode } = parseUrl(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    url: result.url,\n  };\n}\n\nfunction dismiss() {\n  dismissAuthSession();\n}\n\nasync function _openWebBrowserAsync(startUrl, returnUrl) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  let result = await openAuthSessionAsync(startUrl, returnUrl);\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nfunction getStartUrl(authUrl: string, returnUrl: string): string {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl,\n  });\n\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl(): string {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl(): string {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url: string): { errorCode: string | null; params: { [key: string]: string } } {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  let parsedSearch = qs.parse(queryString);\n\n  // Pull errorCode off of params\n  let { errorCode } = parsedSearch;\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  let params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction _warnIfAnonymous(id, url): void {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\n      `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n    );\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn(\n      'Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)'\n    );\n    return getRedirectUrl;\n  },\n  startAsync,\n};\n"]},"metadata":{},"sourceType":"module"}