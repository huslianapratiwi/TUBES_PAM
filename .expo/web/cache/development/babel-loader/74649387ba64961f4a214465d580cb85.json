{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nexport var AUTHENTICATE = 'AUTHENTICATE';\nexport var LOGOUT = 'LOGOUT';\nexport var SET_DID_TRY_AL = 'SET_DID_TRY_AL';\nvar timer;\nexport var setDidTryAL = function setDidTryAL() {\n  return {\n    type: SET_DID_TRY_AL\n  };\n};\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + (process && process.env && process.env.API_KEY || undefined), {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n          case 2:\n            response = _context.sent;\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n          case 6:\n            errorResData = _context.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong!';\n            if (errorId === 'EMAIL_EXISTS') {\n              message = 'This email exists already!';\n            }\n            throw new Error(message);\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n          case 13:\n            resData = _context.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + (process && process.env && process.env.API_KEY || undefined), {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n          case 2:\n            response = _context2.sent;\n            if (response.ok) {\n              _context2.next = 11;\n              break;\n            }\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n          case 6:\n            errorResData = _context2.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong!';\n            if (errorId === 'EMAIL_NOT_FOUND') {\n              message = 'This email could not be found!';\n            } else if (errorId === 'INVALID_PASSWORD') {\n              message = 'This password is not valid!';\n            }\n            throw new Error(message);\n          case 11:\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n          case 13:\n            resData = _context2.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem('userData');\n  return {\n    type: LOGOUT\n  };\n};\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};","map":{"version":3,"names":["AUTHENTICATE","LOGOUT","SET_DID_TRY_AL","timer","setDidTryAL","type","authenticate","userId","token","expiryTime","dispatch","setLogoutTimer","signup","email","password","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","ok","json","errorResData","errorId","error","message","Error","resData","console","log","localId","idToken","parseInt","expiresIn","expirationDate","Date","getTime","saveDataToStorage","login","logout","clearLogoutTimer","AsyncStorage","removeItem","clearTimeout","expirationTime","setTimeout","setItem","expiryDate","toISOString"],"sources":["C:/Users/HUSLIANA/react_native_storeapp-master/store/actions/auth.js"],"sourcesContent":["import { AsyncStorage } from 'react-native';\n\nexport const AUTHENTICATE = 'AUTHENTICATE';\nexport const LOGOUT = 'LOGOUT';\nexport const SET_DID_TRY_AL = 'SET_DID_TRY_AL';\n\nlet timer;\n\nexport const setDidTryAL = () => {\n  return { type: SET_DID_TRY_AL };\n};\n\nexport const authenticate = (userId, token, expiryTime) => {\n  //console.log(config);\n  return dispatch => {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({ type: AUTHENTICATE, userId: userId, token: token });\n  };\n};\n\nexport const signup = (email, password) => {\n  return async dispatch => {\n    const response = await fetch(\n      'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + process.env.API_KEY,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password,\n          returnSecureToken: true\n        })\n      }\n    );\n\n    if (!response.ok) {\n      const errorResData = await response.json();\n      const errorId = errorResData.error.message;\n      let message = 'Something went wrong!';\n      if (errorId === 'EMAIL_EXISTS') {\n        message = 'This email exists already!';\n      }\n      throw new Error(message);\n    }\n\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n  };\n};\n\nexport const login = (email, password) => {\n  return async dispatch => {\n    const response = await fetch(\n      'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key='  + process.env.API_KEY,      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password,\n          returnSecureToken: true\n        })\n      }\n    );\n\n    if (!response.ok) {\n      const errorResData = await response.json();\n      const errorId = errorResData.error.message;\n      let message = 'Something went wrong!';\n      if (errorId === 'EMAIL_NOT_FOUND') {\n        message = 'This email could not be found!';\n      } else if (errorId === 'INVALID_PASSWORD') {\n        message = 'This password is not valid!';\n      }\n      throw new Error(message);\n    }\n\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n  };\n};\n\nexport const logout = () => {\n  clearLogoutTimer();\n  AsyncStorage.removeItem('userData');\n  return { type: LOGOUT };\n};\n\nconst clearLogoutTimer = () => {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nconst setLogoutTimer = expirationTime => {\n  return dispatch => {\n    timer = setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nconst saveDataToStorage = (token, userId, expirationDate) => {\n  AsyncStorage.setItem(\n    'userData',\n    JSON.stringify({\n      token: token,\n      userId: userId,\n      expiryDate: expirationDate.toISOString()\n    })\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}