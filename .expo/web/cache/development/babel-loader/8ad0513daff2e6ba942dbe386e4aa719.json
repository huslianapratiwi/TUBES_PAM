{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _common = require(\"@react-native-firebase/app/lib/common\");\nvar _serialize = require(\"./utils/serialize\");\nvar _FirestoreFieldPath = require(\"./FirestoreFieldPath\");\nvar OPERATORS = {\n  '==': 'EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  '!=': 'NOT_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS',\n  'array-contains-any': 'ARRAY_CONTAINS_ANY',\n  'not-in': 'NOT_IN',\n  in: 'IN'\n};\nvar INEQUALITY = {\n  LESS_THAN: true,\n  LESS_THAN_OR_EQUAL: true,\n  GREATER_THAN: true,\n  GREATER_THAN_OR_EQUAL: true,\n  NOT_EQUAL: true\n};\nvar DIRECTIONS = {\n  asc: 'ASCENDING',\n  desc: 'DESCENDING'\n};\nvar FirestoreQueryModifiers = function () {\n  function FirestoreQueryModifiers() {\n    (0, _classCallCheck2.default)(this, FirestoreQueryModifiers);\n    this._limit = undefined;\n    this._limitToLast = undefined;\n    this._filters = [];\n    this._orders = [];\n    this._type = 'collection';\n    this._startAt = undefined;\n    this._startAfter = undefined;\n    this._endAt = undefined;\n    this._endBefore = undefined;\n  }\n  (0, _createClass2.default)(FirestoreQueryModifiers, [{\n    key: \"_copy\",\n    value: function _copy() {\n      var newInstance = new FirestoreQueryModifiers();\n      newInstance._limit = this._limit;\n      newInstance._limitToLast = this._limitToLast;\n      newInstance._filters = (0, _toConsumableArray2.default)(this._filters);\n      newInstance._orders = (0, _toConsumableArray2.default)(this._orders);\n      newInstance._type = this._type;\n      newInstance._startAt = this._startAt;\n      newInstance._startAfter = this._startAfter;\n      newInstance._endAt = this._endAt;\n      newInstance._endBefore = this._endBefore;\n      return newInstance;\n    }\n  }, {\n    key: \"setFieldsCursor\",\n    value: function setFieldsCursor(cursor, fields) {\n      this[\"_\" + cursor] = (0, _serialize.buildNativeArray)(fields);\n      return this;\n    }\n  }, {\n    key: \"hasStart\",\n    value: function hasStart() {\n      return !!(this._startAt || this._startAfter);\n    }\n  }, {\n    key: \"hasEnd\",\n    value: function hasEnd() {\n      return !!(this._endAt || this._endBefore);\n    }\n  }, {\n    key: \"asCollectionGroupQuery\",\n    value: function asCollectionGroupQuery() {\n      this._type = 'collectionGroup';\n      return this;\n    }\n  }, {\n    key: \"isCollectionGroupQuery\",\n    value: function isCollectionGroupQuery() {\n      return this._type === 'collectionGroup';\n    }\n  }, {\n    key: \"isValidLimit\",\n    value: function isValidLimit(limit) {\n      return !(0, _common.isNumber)(limit) || Math.floor(limit) !== limit || limit <= 0;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      this._limitToLast = undefined;\n      this._limit = _limit;\n      return this;\n    }\n  }, {\n    key: \"isValidLimitToLast\",\n    value: function isValidLimitToLast(limit) {\n      return !(0, _common.isNumber)(limit) || Math.floor(limit) !== limit || limit <= 0;\n    }\n  }, {\n    key: \"validatelimitToLast\",\n    value: function validatelimitToLast() {\n      if (this._limitToLast) {\n        if (!this._orders.length) {\n          throw new Error('firebase.firestore().collection().limitToLast() queries require specifying at least one firebase.firestore().collection().orderBy() clause');\n        }\n      }\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(_limitToLast) {\n      this._limit = undefined;\n      this._limitToLast = _limitToLast;\n      return this;\n    }\n  }, {\n    key: \"isValidOperator\",\n    value: function isValidOperator(operator) {\n      return !!OPERATORS[operator];\n    }\n  }, {\n    key: \"isEqualOperator\",\n    value: function isEqualOperator(operator) {\n      return OPERATORS[operator] === 'EQUAL';\n    }\n  }, {\n    key: \"isInOperator\",\n    value: function isInOperator(operator) {\n      return OPERATORS[operator] === 'IN' || OPERATORS[operator] === 'ARRAY_CONTAINS_ANY' || OPERATORS[operator] === 'NOT_IN';\n    }\n  }, {\n    key: \"where\",\n    value: function where(fieldPath, opStr, value) {\n      var filter = {\n        fieldPath: fieldPath,\n        operator: OPERATORS[opStr],\n        value: (0, _serialize.generateNativeData)(value, true)\n      };\n      this._filters = this._filters.concat(filter);\n      return this;\n    }\n  }, {\n    key: \"validateWhere\",\n    value: function validateWhere() {\n      var hasInequality;\n      var hasNotEqual;\n      for (var i = 0; i < this._filters.length; i++) {\n        var filter = this._filters[i];\n        if (!INEQUALITY[filter.operator]) {\n          continue;\n        }\n        if (filter.operator === OPERATORS['!=']) {\n          if (hasNotEqual) {\n            throw new Error(\"Invalid query. You cannot use more than one '!=' inequality filter.\");\n          }\n          hasNotEqual = true;\n        }\n        if (!hasInequality) {\n          hasInequality = filter;\n          continue;\n        }\n        if (INEQUALITY[filter.operator] && hasInequality) {\n          if (hasInequality.fieldPath._toPath() !== filter.fieldPath._toPath()) {\n            throw new Error(\"Invalid query. All where filters with an inequality (<, <=, >, != or >=) must be on the same field. But you have inequality filters on '\" + hasInequality.fieldPath._toPath() + \"' and '\" + filter.fieldPath._toPath() + \"'\");\n          }\n        }\n      }\n      var hasArrayContains;\n      var hasArrayContainsAny;\n      var hasIn;\n      var hasNotIn;\n      for (var _i = 0; _i < this._filters.length; _i++) {\n        var _filter = this._filters[_i];\n        if (_filter.operator === OPERATORS['array-contains']) {\n          if (hasArrayContains) {\n            throw new Error('Invalid query. Queries only support a single array-contains filter.');\n          }\n          hasArrayContains = true;\n        }\n        if (_filter.operator === OPERATORS['array-contains-any']) {\n          if (hasArrayContainsAny) {\n            throw new Error(\"Invalid query. You cannot use more than one 'array-contains-any' filter.\");\n          }\n          if (hasIn) {\n            throw new Error(\"Invalid query. You cannot use 'array-contains-any' filters with 'in' filters.\");\n          }\n          if (hasNotIn) {\n            throw new Error(\"Invalid query. You cannot use 'array-contains-any' filters with 'not-in' filters.\");\n          }\n          hasArrayContainsAny = true;\n        }\n        if (_filter.operator === OPERATORS.in) {\n          if (hasIn) {\n            throw new Error(\"Invalid query. You cannot use more than one 'in' filter.\");\n          }\n          if (hasArrayContainsAny) {\n            throw new Error(\"Invalid query. You cannot use 'in' filters with 'array-contains-any' filters.\");\n          }\n          if (hasNotIn) {\n            throw new Error(\"Invalid query. You cannot use 'in' filters with 'not-in' filters.\");\n          }\n          hasIn = true;\n        }\n        if (_filter.operator === OPERATORS['not-in']) {\n          if (hasNotIn) {\n            throw new Error(\"Invalid query. You cannot use more than one 'not-in' filter.\");\n          }\n          if (hasNotEqual) {\n            throw new Error(\"Invalid query. You cannot use 'not-in' filters with '!=' inequality filters\");\n          }\n          if (hasIn) {\n            throw new Error(\"Invalid query. You cannot use 'not-in' filters with 'in' filters.\");\n          }\n          if (hasArrayContainsAny) {\n            throw new Error(\"Invalid query. You cannot use 'not-in' filters with 'array-contains-any' filters.\");\n          }\n          hasNotIn = true;\n        }\n      }\n    }\n  }, {\n    key: \"isValidDirection\",\n    value: function isValidDirection(directionStr) {\n      return !!DIRECTIONS[directionStr.toLowerCase()];\n    }\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath, directionStr) {\n      var order = {\n        fieldPath: fieldPath._toPath(),\n        direction: directionStr ? DIRECTIONS[directionStr.toLowerCase()] : DIRECTIONS.asc\n      };\n      this._orders = this._orders.concat(order);\n      return this;\n    }\n  }, {\n    key: \"validateOrderBy\",\n    value: function validateOrderBy() {\n      if (this._orders.length > 1) {\n        var orders = this._orders.map(function ($) {\n          return $.fieldPath;\n        });\n        var set = new Set(orders);\n        if (set.size !== orders.length) {\n          throw new Error('Invalid query. Order by clause cannot contain duplicate fields.');\n        }\n      }\n      if (this._filters.length === 0) {\n        return;\n      }\n      for (var i = 0; i < this._filters.length; i++) {\n        var filter = this._filters[i];\n        var filterFieldPath = filter.fieldPath._toPath();\n        for (var k = 0; k < this._orders.length; k++) {\n          var order = this._orders[k];\n          var orderFieldPath = order.fieldPath;\n          if (filter.operator === OPERATORS['==']) {\n            if (filterFieldPath === orderFieldPath) {\n              throw new Error(\"Invalid query. Query.orderBy() parameter: \" + orderFieldPath + \" cannot be the same as your Query.where() fieldPath parameter: \" + filterFieldPath);\n            }\n          }\n          if (filterFieldPath === _FirestoreFieldPath.DOCUMENT_ID._toPath() && orderFieldPath !== _FirestoreFieldPath.DOCUMENT_ID._toPath()) {\n            throw new Error(\"Invalid query. Query.where() fieldPath parameter: 'FirestoreFieldPath' cannot be used in conjunction with a different Query.orderBy() parameter\");\n          }\n          if (INEQUALITY[filter.operator]) {\n            if (filterFieldPath !== this._orders[0].fieldPath) {\n              throw new Error(\"Invalid query. Initial Query.orderBy() parameter: \" + orderFieldPath + \" has to be the same as the Query.where() fieldPath parameter(s): \" + filterFieldPath + \" when an inequality operator is invoked \");\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"filters\",\n    get: function get() {\n      return this._filters.map(function (f) {\n        return (0, _extends2.default)({}, f, {\n          fieldPath: f.fieldPath._toArray()\n        });\n      });\n    }\n  }, {\n    key: \"orders\",\n    get: function get() {\n      return this._orders;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      var options = {};\n      if (this._limit) {\n        options.limit = this._limit;\n      }\n      if (this._limitToLast) {\n        options.limitToLast = this._limitToLast;\n      }\n      if (this._startAt) {\n        options.startAt = this._startAt;\n      }\n      if (this._startAfter) {\n        options.startAfter = this._startAfter;\n      }\n      if (this._endAt) {\n        options.endAt = this._endAt;\n      }\n      if (this._endBefore) {\n        options.endBefore = this._endBefore;\n      }\n      return options;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }]);\n  return FirestoreQueryModifiers;\n}();\nexports.default = FirestoreQueryModifiers;","map":{"version":3,"names":["OPERATORS","in","INEQUALITY","LESS_THAN","LESS_THAN_OR_EQUAL","GREATER_THAN","GREATER_THAN_OR_EQUAL","NOT_EQUAL","DIRECTIONS","asc","desc","FirestoreQueryModifiers","_limit","undefined","_limitToLast","_filters","_orders","_type","_startAt","_startAfter","_endAt","_endBefore","newInstance","cursor","fields","buildNativeArray","limit","isNumber","Math","floor","length","Error","limitToLast","operator","fieldPath","opStr","value","filter","generateNativeData","concat","hasInequality","hasNotEqual","i","_toPath","hasArrayContains","hasArrayContainsAny","hasIn","hasNotIn","directionStr","toLowerCase","order","direction","orders","map","$","set","Set","size","filterFieldPath","k","orderFieldPath","DOCUMENT_ID","f","_toArray","options","startAt","startAfter","endAt","endBefore"],"sources":["C:/Users/HUSLIANA/react-native-ecommerce/node_modules/@react-native-firebase/firestore/lib/FirestoreQueryModifiers.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, generateNativeData } from './utils/serialize';\nimport { DOCUMENT_ID } from './FirestoreFieldPath';\n\nconst OPERATORS = {\n  '==': 'EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  '!=': 'NOT_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS',\n  'array-contains-any': 'ARRAY_CONTAINS_ANY',\n  'not-in': 'NOT_IN',\n  in: 'IN',\n};\n\nconst INEQUALITY = {\n  LESS_THAN: true,\n  LESS_THAN_OR_EQUAL: true,\n  GREATER_THAN: true,\n  GREATER_THAN_OR_EQUAL: true,\n  NOT_EQUAL: true,\n};\n\nconst DIRECTIONS = {\n  asc: 'ASCENDING',\n  desc: 'DESCENDING',\n};\n\nexport default class FirestoreQueryModifiers {\n  constructor() {\n    this._limit = undefined;\n    this._limitToLast = undefined;\n    this._filters = [];\n    this._orders = [];\n    this._type = 'collection';\n    // Cursors\n    this._startAt = undefined;\n    this._startAfter = undefined;\n    this._endAt = undefined;\n    this._endBefore = undefined;\n  }\n\n  _copy() {\n    const newInstance = new FirestoreQueryModifiers();\n    newInstance._limit = this._limit;\n    newInstance._limitToLast = this._limitToLast;\n    newInstance._filters = [...this._filters];\n    newInstance._orders = [...this._orders];\n    newInstance._type = this._type;\n    newInstance._startAt = this._startAt;\n    newInstance._startAfter = this._startAfter;\n    newInstance._endAt = this._endAt;\n    newInstance._endBefore = this._endBefore;\n    return newInstance;\n  }\n\n  get filters() {\n    return this._filters.map(f => ({ ...f, fieldPath: f.fieldPath._toArray() }));\n  }\n\n  get orders() {\n    return this._orders;\n  }\n\n  get options() {\n    const options = {};\n\n    if (this._limit) {\n      options.limit = this._limit;\n    }\n\n    if (this._limitToLast) {\n      options.limitToLast = this._limitToLast;\n    }\n\n    if (this._startAt) {\n      options.startAt = this._startAt;\n    }\n    if (this._startAfter) {\n      options.startAfter = this._startAfter;\n    }\n    if (this._endAt) {\n      options.endAt = this._endAt;\n    }\n    if (this._endBefore) {\n      options.endBefore = this._endBefore;\n    }\n\n    return options;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  setFieldsCursor(cursor, fields) {\n    this[`_${cursor}`] = buildNativeArray(fields);\n    return this;\n  }\n\n  /**\n   * Options\n   */\n\n  hasStart() {\n    return !!(this._startAt || this._startAfter);\n  }\n\n  hasEnd() {\n    return !!(this._endAt || this._endBefore);\n  }\n\n  /**\n   * Collection Group Query\n   */\n\n  asCollectionGroupQuery() {\n    this._type = 'collectionGroup';\n    return this;\n  }\n\n  isCollectionGroupQuery() {\n    return this._type === 'collectionGroup';\n  }\n\n  /**\n   * Limit\n   */\n\n  isValidLimit(limit) {\n    return !isNumber(limit) || Math.floor(limit) !== limit || limit <= 0;\n  }\n\n  limit(limit) {\n    this._limitToLast = undefined;\n    this._limit = limit;\n    return this;\n  }\n\n  /**\n   * limitToLast\n   */\n\n  isValidLimitToLast(limit) {\n    return !isNumber(limit) || Math.floor(limit) !== limit || limit <= 0;\n  }\n\n  validatelimitToLast() {\n    if (this._limitToLast) {\n      if (!this._orders.length) {\n        throw new Error(\n          'firebase.firestore().collection().limitToLast() queries require specifying at least one firebase.firestore().collection().orderBy() clause',\n        );\n      }\n    }\n  }\n\n  limitToLast(limitToLast) {\n    this._limit = undefined;\n    this._limitToLast = limitToLast;\n    return this;\n  }\n\n  /**\n   * Filters\n   */\n\n  isValidOperator(operator) {\n    return !!OPERATORS[operator];\n  }\n\n  isEqualOperator(operator) {\n    return OPERATORS[operator] === 'EQUAL';\n  }\n\n  isInOperator(operator) {\n    return (\n      OPERATORS[operator] === 'IN' ||\n      OPERATORS[operator] === 'ARRAY_CONTAINS_ANY' ||\n      OPERATORS[operator] === 'NOT_IN'\n    );\n  }\n\n  where(fieldPath, opStr, value) {\n    const filter = {\n      fieldPath,\n      operator: OPERATORS[opStr],\n      value: generateNativeData(value, true),\n    };\n\n    this._filters = this._filters.concat(filter);\n    return this;\n  }\n\n  validateWhere() {\n    let hasInequality;\n    let hasNotEqual;\n\n    for (let i = 0; i < this._filters.length; i++) {\n      const filter = this._filters[i];\n      // Skip if no inequality\n      if (!INEQUALITY[filter.operator]) {\n        continue;\n      }\n\n      if (filter.operator === OPERATORS['!=']) {\n        if (hasNotEqual) {\n          throw new Error(\"Invalid query. You cannot use more than one '!=' inequality filter.\");\n        }\n        //needs to set hasNotEqual = true  before setting first hasInequality = filter. It is used in a condition check later\n        hasNotEqual = true;\n      }\n\n      // Set the first inequality\n      if (!hasInequality) {\n        hasInequality = filter;\n        continue;\n      }\n\n      // Check the set value is the same as the new one\n      if (INEQUALITY[filter.operator] && hasInequality) {\n        if (hasInequality.fieldPath._toPath() !== filter.fieldPath._toPath()) {\n          throw new Error(\n            `Invalid query. All where filters with an inequality (<, <=, >, != or >=) must be on the same field. But you have inequality filters on '${hasInequality.fieldPath._toPath()}' and '${filter.fieldPath._toPath()}'`,\n          );\n        }\n      }\n    }\n\n    let hasArrayContains;\n    let hasArrayContainsAny;\n    let hasIn;\n    let hasNotIn;\n\n    for (let i = 0; i < this._filters.length; i++) {\n      const filter = this._filters[i];\n\n      if (filter.operator === OPERATORS['array-contains']) {\n        if (hasArrayContains) {\n          throw new Error('Invalid query. Queries only support a single array-contains filter.');\n        }\n        hasArrayContains = true;\n      }\n\n      if (filter.operator === OPERATORS['array-contains-any']) {\n        if (hasArrayContainsAny) {\n          throw new Error(\n            \"Invalid query. You cannot use more than one 'array-contains-any' filter.\",\n          );\n        }\n\n        if (hasIn) {\n          throw new Error(\n            \"Invalid query. You cannot use 'array-contains-any' filters with 'in' filters.\",\n          );\n        }\n\n        if (hasNotIn) {\n          throw new Error(\n            \"Invalid query. You cannot use 'array-contains-any' filters with 'not-in' filters.\",\n          );\n        }\n\n        hasArrayContainsAny = true;\n      }\n\n      if (filter.operator === OPERATORS.in) {\n        if (hasIn) {\n          throw new Error(\"Invalid query. You cannot use more than one 'in' filter.\");\n        }\n\n        if (hasArrayContainsAny) {\n          throw new Error(\n            \"Invalid query. You cannot use 'in' filters with 'array-contains-any' filters.\",\n          );\n        }\n\n        if (hasNotIn) {\n          throw new Error(\"Invalid query. You cannot use 'in' filters with 'not-in' filters.\");\n        }\n\n        hasIn = true;\n      }\n\n      if (filter.operator === OPERATORS['not-in']) {\n        if (hasNotIn) {\n          throw new Error(\"Invalid query. You cannot use more than one 'not-in' filter.\");\n        }\n\n        if (hasNotEqual) {\n          throw new Error(\n            \"Invalid query. You cannot use 'not-in' filters with '!=' inequality filters\",\n          );\n        }\n\n        if (hasIn) {\n          throw new Error(\"Invalid query. You cannot use 'not-in' filters with 'in' filters.\");\n        }\n\n        if (hasArrayContainsAny) {\n          throw new Error(\n            \"Invalid query. You cannot use 'not-in' filters with 'array-contains-any' filters.\",\n          );\n        }\n\n        hasNotIn = true;\n      }\n    }\n  }\n\n  /**\n   * Orders\n   */\n\n  isValidDirection(directionStr) {\n    return !!DIRECTIONS[directionStr.toLowerCase()];\n  }\n\n  orderBy(fieldPath, directionStr) {\n    const order = {\n      fieldPath: fieldPath._toPath(),\n      direction: directionStr ? DIRECTIONS[directionStr.toLowerCase()] : DIRECTIONS.asc,\n    };\n\n    this._orders = this._orders.concat(order);\n    return this;\n  }\n\n  validateOrderBy() {\n    // Ensure order hasn't been called on the same field\n    if (this._orders.length > 1) {\n      const orders = this._orders.map($ => $.fieldPath);\n      const set = new Set(orders);\n\n      if (set.size !== orders.length) {\n        throw new Error('Invalid query. Order by clause cannot contain duplicate fields.');\n      }\n    }\n\n    // Skip if no where filters\n    if (this._filters.length === 0) {\n      return;\n    }\n\n    // Ensure the first order field path is equal to the inequality filter field path\n    for (let i = 0; i < this._filters.length; i++) {\n      const filter = this._filters[i];\n      const filterFieldPath = filter.fieldPath._toPath();\n\n      for (let k = 0; k < this._orders.length; k++) {\n        const order = this._orders[k];\n        const orderFieldPath = order.fieldPath;\n        if (filter.operator === OPERATORS['==']) {\n          // Any where() fieldPath parameter cannot match any orderBy() parameter when '==' operand is invoked\n          if (filterFieldPath === orderFieldPath) {\n            throw new Error(\n              `Invalid query. Query.orderBy() parameter: ${orderFieldPath} cannot be the same as your Query.where() fieldPath parameter: ${filterFieldPath}`,\n            );\n          }\n        }\n\n        if (filterFieldPath === DOCUMENT_ID._toPath() && orderFieldPath !== DOCUMENT_ID._toPath()) {\n          throw new Error(\n            \"Invalid query. Query.where() fieldPath parameter: 'FirestoreFieldPath' cannot be used in conjunction with a different Query.orderBy() parameter\",\n          );\n        }\n\n        if (INEQUALITY[filter.operator]) {\n          // Initial orderBy() parameter has to match every where() fieldPath parameter when inequality operator is invoked\n          if (filterFieldPath !== this._orders[0].fieldPath) {\n            throw new Error(\n              `Invalid query. Initial Query.orderBy() parameter: ${orderFieldPath} has to be the same as the Query.where() fieldPath parameter(s): ${filterFieldPath} when an inequality operator is invoked `,\n            );\n          }\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}