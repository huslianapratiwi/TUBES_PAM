{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _callee;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _auth = _interopRequireDefault(require(\"@react-native-firebase/auth\"));\nvar _googleSignin = require(\"@react-native-google-signin/google-signin\");\nfunction _callee() {\n  var _await$GoogleSignin$s, idToken, googleCredential;\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _googleSignin.GoogleSignin.configure({\n            webClientId: '1015972329649-kdmpvmdagf6f3ndqnmqqpp7svgoe699e.apps.googleusercontent.com'\n          });\n          _context.next = 3;\n          return _regenerator.default.awrap(_googleSignin.GoogleSignin.signIn());\n        case 3:\n          _await$GoogleSignin$s = _context.sent;\n          idToken = _await$GoogleSignin$s.idToken;\n          googleCredential = _auth.default.GoogleAuthProvider.credential(idToken);\n          return _context.abrupt(\"return\", (0, _auth.default)().signInWithCredential(googleCredential));\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["GoogleSignin","configure","webClientId","signIn","idToken","googleCredential","auth","GoogleAuthProvider","credential","signInWithCredential"],"sources":["C:/Users/HUSLIANA/react-native-ecommerce/app/services/googleLogin.js"],"sourcesContent":["import auth from '@react-native-firebase/auth';\r\nimport { GoogleSignin } from '@react-native-google-signin/google-signin';\r\n\r\nexport default async function  () {\r\n    GoogleSignin.configure({\r\n        webClientId: '1015972329649-kdmpvmdagf6f3ndqnmqqpp7svgoe699e.apps.googleusercontent.com',\r\n      });\r\n  // Get the users ID token\r\n  const { idToken } = await GoogleSignin.signIn();\r\n\r\n  // Create a Google credential with the token\r\n  const googleCredential = auth.GoogleAuthProvider.credential(idToken);\r\n\r\n  // Sign-in the user with the credential\r\n  return auth().signInWithCredential(googleCredential); \r\n}"],"mappings":";;;;;;AAAA;AACA;AAEe;EAAA;EAAA;IAAA;MAAA;QAAA;UACXA,0BAAY,CAACC,SAAS,CAAC;YACnBC,WAAW,EAAE;UACf,CAAC,CAAC;UAAC;UAAA,kCAEmBF,0BAAY,CAACG,MAAM,EAAE;QAAA;UAAA;UAAvCC,OAAO,yBAAPA,OAAO;UAGTC,gBAAgB,GAAGC,aAAI,CAACC,kBAAkB,CAACC,UAAU,CAACJ,OAAO,CAAC;UAAA,iCAG7D,IAAAE,aAAI,GAAE,CAACG,oBAAoB,CAACJ,gBAAgB,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}