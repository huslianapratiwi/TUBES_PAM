{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport FontObserver from 'fontfaceobserver';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nexport default {\n  get name() {\n    return 'ExpoFontLoader';\n  },\n  loadAsync: function loadAsync(fontFamilyName, resource) {\n    var canInjectStyle, style;\n    return _regeneratorRuntime.async(function loadAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (canUseDOM) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 2:\n            canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n            if (canInjectStyle) {\n              _context.next = 5;\n              break;\n            }\n            throw new Error('E_FONT_CREATION_FAILED : document element cannot support injecting fonts');\n          case 5:\n            style = _createWebStyle(fontFamilyName, resource);\n            document.head.appendChild(style);\n            if (!navigator.userAgent.includes('Edge')) {\n              _context.next = 9;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 9:\n            return _context.abrupt(\"return\", new FontObserver(fontFamilyName).load());\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nvar ID = 'expo-generated-fonts';\nfunction getStyleElement() {\n  var element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  var styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\nfunction _createWebStyle(fontFamily, resource) {\n  var fontStyle = \"@font-face {\\n    font-family: \" + fontFamily + \";\\n    src: url(\" + resource.uri + \");\\n  }\";\n  var styleElement = getStyleElement();\n  if (styleElement.styleSheet) {\n    var styleElementIE = styleElement;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;\n  } else {\n    var textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}","map":{"version":3,"mappings":";AAAA,OAAOA,YAAY,MAAM,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,+BAA+B;AAGzD,eAAe;EACb,IAAIC,IAAI;IACN,OAAO,gBAAgB;EACzB,CAAC;EAEKC,SAAS,qBAACC,cAAsB,EAAEC,QAAsB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,IACvDJ,SAAS;cAAA;cAAA;YAAA;YAAA;UAAA;YAIRK,cAAc,GAAGC,QAAQ,CAACC,IAAI,IAAI,OAAOD,QAAQ,CAACC,IAAI,CAACC,WAAW,KAAK,UAAU;YAAA,IAClFH,cAAc;cAAA;cAAA;YAAA;YAAA,MACX,IAAII,KAAK,CAAC,0EAA0E,CAAC;UAAA;YAGvFC,KAAK,GAAGC,eAAe,CAACR,cAAc,EAAEC,QAAQ,CAAC;YACvDE,QAAQ,CAACC,IAAK,CAACC,WAAW,CAACE,KAAK,CAAC;YAAC,KAE9BE,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA,iCAGjC,IAAIf,YAAY,CAACI,cAAc,CAAC,CAACY,IAAI,EAAE;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;CAEjD;AAED,IAAMC,EAAE,GAAG,sBAAsB;AAEjC,SAASC,eAAe;EACtB,IAAMC,OAAO,GAAGZ,QAAQ,CAACa,cAAc,CAACH,EAAE,CAAC;EAC3C,IAAIE,OAAO,IAAIA,OAAO,YAAYE,gBAAgB,EAAE;IAClD,OAAOF,OAAO;;EAEhB,IAAMG,YAAY,GAAGf,QAAQ,CAACgB,aAAa,CAAC,OAAO,CAAC;EACpDD,YAAY,CAACE,EAAE,GAAGP,EAAE;EACpBK,YAAY,CAACG,IAAI,GAAG,UAAU;EAC9B,OAAOH,YAAY;AACrB;AAEA,SAASV,eAAe,CAACc,UAAkB,EAAErB,QAAsB;EACjE,IAAMsB,SAAS,uCACED,UAAU,wBACdrB,QAAQ,CAACuB,GAAG,YACvB;EAEF,IAAMN,YAAY,GAAGJ,eAAe,EAAE;EAGtC,IAAII,YAAY,CAACO,UAAU,EAAE;IAC3B,IAAMC,cAAc,GAAGR,YAAmB;IAC1CQ,cAAc,CAACD,UAAU,CAACE,OAAO,GAAGD,cAAc,CAACD,UAAU,CAACE,OAAO,GACjED,cAAc,CAACD,UAAU,CAACE,OAAO,GAAGJ,SAAS,GAC7CA,SAAS;GACd,MAAM;IACL,IAAMK,QAAQ,GAAGzB,QAAQ,CAAC0B,cAAc,CAACN,SAAS,CAAC;IACnDL,YAAY,CAACb,WAAW,CAACuB,QAAQ,CAAC;;EAEpC,OAAOV,YAAY;AACrB","names":["FontObserver","canUseDOM","name","loadAsync","fontFamilyName","resource","canInjectStyle","document","head","appendChild","Error","style","_createWebStyle","navigator","userAgent","includes","load","ID","getStyleElement","element","getElementById","HTMLStyleElement","styleElement","createElement","id","type","fontFamily","fontStyle","uri","styleSheet","styleElementIE","cssText","textNode","createTextNode"],"sourceRoot":"","sources":["../src/ExpoFontLoader.web.ts"],"sourcesContent":["import FontObserver from 'fontfaceobserver';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { FontResource } from './Font.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoFontLoader';\n  },\n\n  async loadAsync(fontFamilyName: string, resource: FontResource): Promise<void> {\n    if (!canUseDOM) {\n      return;\n    }\n\n    const canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new Error('E_FONT_CREATION_FAILED : document element cannot support injecting fonts');\n    }\n\n    const style = _createWebStyle(fontFamilyName, resource);\n    document.head!.appendChild(style);\n    // https://github.com/bramstein/fontfaceobserver/issues/109#issuecomment-333356795\n    if (navigator.userAgent.includes('Edge')) {\n      return;\n    }\n    return new FontObserver(fontFamilyName).load();\n  },\n};\n\nconst ID = 'expo-generated-fonts';\n\nfunction getStyleElement(): HTMLStyleElement {\n  const element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily: string, resource: FontResource): HTMLStyleElement {\n  const fontStyle = `@font-face {\n    font-family: ${fontFamily};\n    src: url(${resource.uri});\n  }`;\n\n  const styleElement = getStyleElement();\n  // @ts-ignore: TypeScript does not define HTMLStyleElement::styleSheet. This is just for IE and\n  // possibly can be removed if it's unnecessary on IE 11.\n  if (styleElement.styleSheet) {\n    const styleElementIE = styleElement as any;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText\n      ? styleElementIE.styleSheet.cssText + fontStyle\n      : fontStyle;\n  } else {\n    const textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\n"]},"metadata":{},"sourceType":"module"}