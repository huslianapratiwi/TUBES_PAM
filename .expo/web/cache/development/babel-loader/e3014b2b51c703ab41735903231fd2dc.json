{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName } from \"./FontLoader\";\nvar loaded = {};\nvar loadPromises = {};\nexport function processFontFamily(name) {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\"You started loading the font \\\"\" + name + \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + name + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n    return 'System';\n  }\n  return \"ExpoFont-\" + getNativeFontName(name);\n}\nexport function isLoaded(name) {\n  return loaded.hasOwnProperty(name);\n}\nexport function isLoading(name) {\n  return loadPromises.hasOwnProperty(name);\n}\nexport function loadAsync(nameOrMap, source) {\n  var fontMap, names, name, asset;\n  return _regeneratorRuntime.async(function loadAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(typeof nameOrMap === 'object')) {\n            _context2.next = 6;\n            break;\n          }\n          fontMap = nameOrMap;\n          names = Object.keys(fontMap);\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n            return loadAsync(name, fontMap[name]);\n          })));\n        case 5:\n          return _context2.abrupt(\"return\");\n        case 6:\n          name = nameOrMap;\n          if (!loaded[name]) {\n            _context2.next = 9;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 9:\n          if (!loadPromises[name]) {\n            _context2.next = 11;\n            break;\n          }\n          return _context2.abrupt(\"return\", loadPromises[name]);\n        case 11:\n          if (source) {\n            _context2.next = 13;\n            break;\n          }\n          throw new Error(\"No source from which to load font \\\"\" + name + \"\\\"\");\n        case 13:\n          asset = getAssetForSource(source);\n          loadPromises[name] = function _callee() {\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(loadSingleFontAsync(name, asset));\n                  case 3:\n                    loaded[name] = true;\n                  case 4:\n                    _context.prev = 4;\n                    delete loadPromises[name];\n                    return _context.finish(4);\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0,, 4, 7]], Promise);\n          }();\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(loadPromises[name]);\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nif (module && module.exports) {\n  var wasImportWarningShown = false;\n  Object.defineProperty(exports, 'Font', {\n    get: function get() {\n      if (!wasImportWarningShown) {\n        console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily: processFontFamily,\n        isLoaded: isLoaded,\n        isLoading: isLoading,\n        loadAsync: loadAsync\n      };\n    }\n  });\n}","map":{"version":3,"mappings":";AAAA,SACEA,iBAAiB,EACjBC,mBAAmB,EACnBC,sBAAsB,EACtBC,iBAAiB;AAKnB,IAAMC,MAAM,GAAgC,EAAE;AAC9C,IAAMC,YAAY,GAAsC,EAAE;AAS1D,OAAM,SAAUC,iBAAiB,CAACC,IAAmB;EACnD,IAAI,CAACA,IAAI,IAAI,CAACL,sBAAsB,CAACK,IAAI,CAAC,EAAE;IAC1C,OAAOA,IAAI;;EAGb,IAAI,CAACC,QAAQ,CAACD,IAAI,CAAC,EAAE;IACnB,IAAIE,OAAO,EAAE;MACX,IAAIC,SAAS,CAACH,IAAI,CAAC,EAAE;QACnBI,OAAO,CAACC,KAAK,qCACsBL,IAAI,qQAGtC;OACF,MAAM;QACLI,OAAO,CAACC,KAAK,mBACIL,IAAI,gSAGpB;;;IAIL,OAAO,QAAQ;;EAGjB,qBAAmBJ,iBAAiB,CAACI,IAAI,CAAC;AAC5C;AAEA,OAAM,SAAUC,QAAQ,CAACD,IAAY;EACnC,OAAOH,MAAM,CAACS,cAAc,CAACN,IAAI,CAAC;AACpC;AAEA,OAAM,SAAUG,SAAS,CAACH,IAAY;EACpC,OAAOF,YAAY,CAACQ,cAAc,CAACN,IAAI,CAAC;AAC1C;AAEA,OAAO,SAAeO,SAAS,CAC7BC,SAAkD,EAClDC,MAAmB;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,MAEf,OAAOD,SAAS,KAAK,QAAQ;YAAA;YAAA;UAAA;UACzBE,OAAO,GAAGF,SAAS;UACnBG,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC;UAAA;UAAA,iCAC5BI,OAAO,CAACC,GAAG,CAACJ,KAAK,CAACK,GAAG,CAAC,cAAI;YAAA,OAAIT,SAAS,CAACP,IAAI,EAAEU,OAAO,CAACV,IAAI,CAAC,CAAC;UAAA,EAAC,CAAC;QAAA;UAAA;QAAA;UAIhEA,IAAI,GAAGQ,SAAS;UAAA,KAElBX,MAAM,CAACG,IAAI,CAAC;YAAA;YAAA;UAAA;UAAA;QAAA;UAAA,KAIZF,YAAY,CAACE,IAAI,CAAC;YAAA;YAAA;UAAA;UAAA,kCACbF,YAAY,CAACE,IAAI,CAAC;QAAA;UAAA,IAQtBS,MAAM;YAAA;YAAA;UAAA;UAAA,MACH,IAAIQ,KAAK,0CAAuCjB,IAAI,QAAI;QAAA;UAE1DkB,KAAK,GAAGzB,iBAAiB,CAACgB,MAAM,CAAC;UACvCX,YAAY,CAACE,IAAI,CAAC,GAAI;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA;oBAAA,iCAEZN,mBAAmB,CAACM,IAAI,EAAEkB,KAAK,CAAC;kBAAA;oBACtCrB,MAAM,CAACG,IAAI,CAAC,GAAG,IAAI;kBAAC;oBAAA;oBAEpB,OAAOF,YAAY,CAACE,IAAI,CAAC;oBAAC;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAE7B,EAAG;UAAC;UAAA,iCAECF,YAAY,CAACE,IAAI,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAO1B,IAAImB,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAE;EAC5B,IAAIC,qBAAqB,GAAG,KAAK;EAEjCT,MAAM,CAACU,cAAc,CAACF,OAAO,EAAE,MAAM,EAAE;IACrCG,GAAG;MACD,IAAI,CAACF,qBAAqB,EAAE;QAC1BjB,OAAO,CAACoB,IAAI,mMAEX;QACDH,qBAAqB,GAAG,IAAI;;MAE9B,OAAO;QACLtB,iBAAiB,EAAjBA,iBAAiB;QACjBE,QAAQ,EAARA,QAAQ;QACRE,SAAS,EAATA,SAAS;QACTI,SAAS,EAATA;OACD;IACH;GACD,CAAC","names":["getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","processFontFamily","name","isLoaded","__DEV__","isLoading","console","error","hasOwnProperty","loadAsync","nameOrMap","source","fontMap","names","Object","keys","Promise","all","map","Error","asset","module","exports","wasImportWarningShown","defineProperty","get","warn"],"sourceRoot":"","sources":["../src/Font.ts"],"sourcesContent":["import {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nimport { FontSource, FontResource } from './Font.types';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n */\nexport function processFontFamily(name: string | null): string | null {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [name: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!source) {\n    throw new Error(`No source from which to load font \"${name}\"`);\n  }\n  const asset = getAssetForSource(source);\n  loadPromises[name] = (async () => {\n    try {\n      await loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nexport { FontSource, FontResource };\n\ndeclare var module: any;\n\nif (module && module.exports) {\n  let wasImportWarningShown = false;\n  // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\n          `The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`\n        );\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync,\n      };\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"module"}