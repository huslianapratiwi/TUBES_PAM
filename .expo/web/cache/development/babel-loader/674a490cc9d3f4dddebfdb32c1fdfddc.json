{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nvar EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n    cardOverlay = _ref.cardOverlay,\n    cardOverlayEnabled = _ref.cardOverlayEnabled,\n    cardShadowEnabled = _ref.cardShadowEnabled,\n    cardStyle = _ref.cardStyle,\n    cardStyleInterpolator = _ref.cardStyleInterpolator,\n    closing = _ref.closing,\n    gesture = _ref.gesture,\n    focused = _ref.focused,\n    gestureDirection = _ref.gestureDirection,\n    gestureEnabled = _ref.gestureEnabled,\n    gestureResponseDistance = _ref.gestureResponseDistance,\n    gestureVelocityImpact = _ref.gestureVelocityImpact,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    mode = _ref.mode,\n    headerMode = _ref.headerMode,\n    headerShown = _ref.headerShown,\n    headerStyleInterpolator = _ref.headerStyleInterpolator,\n    hasAbsoluteHeader = _ref.hasAbsoluteHeader,\n    headerHeight = _ref.headerHeight,\n    onHeaderHeightChange = _ref.onHeaderHeightChange,\n    index = _ref.index,\n    layout = _ref.layout,\n    onCloseRoute = _ref.onCloseRoute,\n    onOpenRoute = _ref.onOpenRoute,\n    onPageChangeCancel = _ref.onPageChangeCancel,\n    onPageChangeConfirm = _ref.onPageChangeConfirm,\n    onPageChangeStart = _ref.onPageChangeStart,\n    onGestureCancel = _ref.onGestureCancel,\n    onGestureEnd = _ref.onGestureEnd,\n    onGestureStart = _ref.onGestureStart,\n    onTransitionEnd = _ref.onTransitionEnd,\n    onTransitionStart = _ref.onTransitionStart,\n    renderHeader = _ref.renderHeader,\n    renderScene = _ref.renderScene,\n    safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n    safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n    safeAreaInsetRight = _ref.safeAreaInsetRight,\n    safeAreaInsetTop = _ref.safeAreaInsetTop,\n    scene = _ref.scene,\n    transitionSpec = _ref.transitionSpec;\n  React.useEffect(function () {\n    onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n  }, [active, onPageChangeConfirm]);\n  var handleOpen = function handleOpen() {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, false);\n    onOpenRoute({\n      route: scene.route\n    });\n  };\n  var handleClose = function handleClose() {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, true);\n    onCloseRoute({\n      route: scene.route\n    });\n  };\n  var handleGestureBegin = function handleGestureBegin() {\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route: scene.route\n    });\n  };\n  var handleGestureCanceled = function handleGestureCanceled() {\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route: scene.route\n    });\n  };\n  var handleGestureEnd = function handleGestureEnd() {\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route: scene.route\n    });\n  };\n  var handleTransitionStart = function handleTransitionStart(_ref2) {\n    var closing = _ref2.closing;\n    if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: scene.route\n    }, closing);\n  };\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var _React$useState = React.useState('box-none'),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    pointerEvents = _React$useState2[0],\n    setPointerEvents = _React$useState2[1];\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var isParentHeaderShown = React.useContext(HeaderShownContext);\n  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  var previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransitionStart: handleTransitionStart,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: StyleSheet.absoluteFill\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","useTheme","Card","HeaderHeightContext","HeaderShownContext","PreviousSceneContext","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","useEffect","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransitionStart","insets","top","right","bottom","left","colors","useState","pointerEvents","setPointerEvents","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","removeListener","isParentHeaderShown","useContext","isCurrentHeaderShown","previousScene","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","StyleSheet","absoluteFill","View","styles","container","Provider","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["CardContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleGestureBegin = () => {\n    onPageChangeStart?.();\n    onGestureStart?.({ route: scene.route });\n  };\n\n  const handleGestureCanceled = () => {\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route: scene.route });\n  };\n\n  const handleGestureEnd = () => {\n    onGestureEnd?.({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}