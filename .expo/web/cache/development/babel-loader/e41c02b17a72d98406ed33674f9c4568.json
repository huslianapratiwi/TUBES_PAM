{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = TouchableItem;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar ANDROID_VERSION_LOLLIPOP = 21;\nfunction TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n    borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n    _ref$pressColor = _ref.pressColor,\n    pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n    style = _ref.style,\n    children = _ref.children,\n    rest = (0, _objectWithoutProperties2.default)(_ref, [\"borderless\", \"pressColor\", \"style\", \"children\"]);\n  if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n    return React.createElement(_reactNative.TouchableNativeFeedback, _extends({}, rest, {\n      useForeground: _reactNative.TouchableNativeFeedback.canUseNativeForeground(),\n      background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless)\n    }), React.createElement(_reactNative.View, {\n      style: style\n    }, React.Children.only(children)));\n  } else {\n    return React.createElement(_reactNative.TouchableOpacity, _extends({\n      style: style\n    }, rest), children);\n  }\n}","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","borderless","pressColor","style","children","rest","Platform","OS","Version","TouchableNativeFeedback","canUseNativeForeground","Ripple","React","Children","only"],"mappings":";;;;;;AAOA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;AAiBA,IAAMA,wBAAwB,GAAG,EAAjC;AAEe,SAASC,aAAT,OAML;EAAA,2BALRC,UAAU;IAAVA,UAAU,gCAAG,KADuB;IAAA,uBAEpCC,UAAU;IAAVA,UAAU,gCAAG,oBAFuB;IAGpCC,KAHoC,QAGpCA,KAHoC;IAIpCC,QAJoC,QAIpCA,QAJoC;IAKjCC,IAAAA;EAUH,IACEC,qBAAQ,CAACC,EAATD,KAAgB,SAAhBA,IACAA,qBAAQ,CAACE,OAATF,IAAoBP,wBAFtB,EAGE;IACA,OACE,KAAA,CAAA,aAAA,CAAC,oCAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMM,IADN,EAAA;MAEE,aAAa,EAAEI,oCAAuB,CAACC,sBAAxBD,EAFjB;MAGE,UAAU,EAAEA,oCAAuB,CAACE,MAAxBF,CAA+BP,UAA/BO,EAA2CR,UAA3CQ;IAHd,CAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA;MAAM,KAAK,EAAEN;IAAb,CAAA,EAAqBS,KAAK,CAACC,QAAND,CAAeE,IAAfF,CAAoBR,QAApBQ,CAArB,CALF,CADF;EASD,CAbD,MAaO;IACL,OACE,KAAA,CAAA,aAAA,CAAC,6BAAD,EAAA,QAAA,CAAA;MAAkB,KAAK,EAAET;IAAzB,CAAA,EAAoCE,IAApC,CAAA,EACGD,QADH,CADF;EAKD;AACF","sourcesContent":["/**\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nexport type Props = ViewProps & {\n  pressColor?: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  style,\n  children,\n  ...rest\n}: Props) {\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_LOLLIPOP\n  ) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}