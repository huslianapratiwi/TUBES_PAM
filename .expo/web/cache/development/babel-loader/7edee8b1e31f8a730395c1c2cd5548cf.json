{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _common = require(\"@react-native-firebase/app/lib/common\");\nvar FirestoreBlob = function () {\n  function FirestoreBlob() {\n    var internal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var binaryString = arguments.length > 1 ? arguments[1] : undefined;\n    (0, _classCallCheck2.default)(this, FirestoreBlob);\n    if (internal === false) {\n      throw new Error('firebase.firestore.Blob constructor is private, use Blob.<field>() instead.');\n    }\n    this._binaryString = binaryString;\n  }\n  (0, _createClass2.default)(FirestoreBlob, [{\n    key: \"isEqual\",\n    value: function isEqual(blob) {\n      if (!(blob instanceof FirestoreBlob)) {\n        throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n      }\n      return this._binaryString === blob._binaryString;\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64() {\n      return _common.Base64.btoa(this._binaryString);\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return new Uint8Array(this._binaryString.split('').map(function (c) {\n        return c.charCodeAt(0);\n      }));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"firestore.Blob(base64: \" + this.toBase64() + \")\";\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(base64) {\n      if (!(0, _common.isString)(base64) || base64.length < 1) {\n        throw new Error('firestore.Blob.fromBase64String expects a string of at least 1 character in length');\n      }\n      return new FirestoreBlob(true, _common.Base64.atob(base64));\n    }\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(array) {\n      if (!(array instanceof Uint8Array)) {\n        throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n      }\n      return new FirestoreBlob(true, Array.prototype.map.call(array, function ($) {\n        return String.fromCharCode($);\n      }).join(''));\n    }\n  }]);\n  return FirestoreBlob;\n}();\nexports.default = FirestoreBlob;","map":{"version":3,"names":["FirestoreBlob","internal","binaryString","Error","_binaryString","blob","Base64","btoa","Uint8Array","split","map","c","charCodeAt","toBase64","base64","isString","length","atob","array","Array","prototype","call","$","String","fromCharCode","join"],"sources":["C:/Users/HUSLIANA/react-native-ecommerce/node_modules/@react-native-firebase/firestore/lib/FirestoreBlob.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\n\nexport default class FirestoreBlob {\n  constructor(internal = false, binaryString) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.Blob constructor is private, use Blob.<field>() instead.',\n      );\n    }\n\n    this._binaryString = binaryString;\n  }\n\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n  static fromBase64String(base64) {\n    if (!isString(base64) || base64.length < 1) {\n      throw new Error(\n        'firestore.Blob.fromBase64String expects a string of at least 1 character in length',\n      );\n    }\n\n    return new FirestoreBlob(true, Base64.atob(base64));\n  }\n\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n  static fromUint8Array(array) {\n    if (!(array instanceof Uint8Array)) {\n      throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n    }\n\n    return new FirestoreBlob(\n      true,\n      Array.prototype.map.call(array, $ => String.fromCharCode($)).join(''),\n    );\n  }\n\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n  isEqual(blob) {\n    if (!(blob instanceof FirestoreBlob)) {\n      throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n    }\n\n    return this._binaryString === blob._binaryString;\n  }\n\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n  toBase64() {\n    return Base64.btoa(this._binaryString);\n  }\n\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n  toUint8Array() {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n  toString() {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n}\n"],"mappings":";;;;;;;AAiBA;AAAyE,IAEpDA,aAAa;EAChC,yBAA4C;IAAA,IAAhCC,QAAQ,uEAAG,KAAK;IAAA,IAAEC,YAAY;IAAA;IACxC,IAAID,QAAQ,KAAK,KAAK,EAAE;MACtB,MAAM,IAAIE,KAAK,CACb,6EAA6E,CAC9E;IACH;IAEA,IAAI,CAACC,aAAa,GAAGF,YAAY;EACnC;EAAC;IAAA;IAAA,wBAyCOG,IAAI,EAAE;MACZ,IAAI,EAAEA,IAAI,YAAYL,aAAa,CAAC,EAAE;QACpC,MAAM,IAAIG,KAAK,CAAC,oDAAoD,CAAC;MACvE;MAEA,OAAO,IAAI,CAACC,aAAa,KAAKC,IAAI,CAACD,aAAa;IAClD;EAAC;IAAA;IAAA,2BAQU;MACT,OAAOE,cAAM,CAACC,IAAI,CAAC,IAAI,CAACH,aAAa,CAAC;IACxC;EAAC;IAAA;IAAA,+BAQc;MACb,OAAO,IAAII,UAAU,CAAC,IAAI,CAACJ,aAAa,CAACK,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC;MAAA,EAAC,CAAC;IAC/E;EAAC;IAAA;IAAA,2BAQU;MACT,mCAAiC,IAAI,CAACC,QAAQ,EAAE;IAClD;EAAC;IAAA;IAAA,iCArEuBC,MAAM,EAAE;MAC9B,IAAI,CAAC,IAAAC,gBAAQ,EAACD,MAAM,CAAC,IAAIA,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAM,IAAIb,KAAK,CACb,oFAAoF,CACrF;MACH;MAEA,OAAO,IAAIH,aAAa,CAAC,IAAI,EAAEM,cAAM,CAACW,IAAI,CAACH,MAAM,CAAC,CAAC;IACrD;EAAC;IAAA;IAAA,+BAQqBI,KAAK,EAAE;MAC3B,IAAI,EAAEA,KAAK,YAAYV,UAAU,CAAC,EAAE;QAClC,MAAM,IAAIL,KAAK,CAAC,iEAAiE,CAAC;MACpF;MAEA,OAAO,IAAIH,aAAa,CACtB,IAAI,EACJmB,KAAK,CAACC,SAAS,CAACV,GAAG,CAACW,IAAI,CAACH,KAAK,EAAE,UAAAI,CAAC;QAAA,OAAIC,MAAM,CAACC,YAAY,CAACF,CAAC,CAAC;MAAA,EAAC,CAACG,IAAI,CAAC,EAAE,CAAC,CACtE;IACH;EAAC;EAAA;AAAA;AAAA"},"metadata":{},"sourceType":"script"}