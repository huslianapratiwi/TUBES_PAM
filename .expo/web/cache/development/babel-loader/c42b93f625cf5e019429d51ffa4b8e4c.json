{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport StaticContainer from \"./StaticContainer\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport useOptionsGetters from \"./useOptionsGetters\";\n\nexport default function SceneView(_ref) {\n  var screen = _ref.screen,\n    route = _ref.route,\n    navigation = _ref.navigation,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    options = _ref.options;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var _useOptionsGetters = useOptionsGetters({\n      key: route.key,\n      options: options,\n      navigation: navigation\n    }),\n    addOptionsGetter = _useOptionsGetters.addOptionsGetter;\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var isInitialRef = React.useRef(true);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n  });\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [route.state, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)));\n}","map":{"version":3,"mappings":"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","names":["React","NavigationStateContext","StaticContainer","EnsureSingleNavigator","useOptionsGetters","SceneView","screen","route","navigation","getState","setState","options","navigatorKeyRef","useRef","getKey","useCallback","current","key","addOptionsGetter","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","Provider","value","name","render","children"],"sources":["SceneView.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      route.state,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}