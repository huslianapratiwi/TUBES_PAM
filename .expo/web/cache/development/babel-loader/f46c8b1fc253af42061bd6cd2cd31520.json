{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _State = require(\"../../State\");\nvar _interfaces = require(\"../interfaces\");\nvar _GestureHandler2 = _interopRequireDefault(require(\"./GestureHandler\"));\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar DEFAULT_MAX_DURATION_MS = 500;\nvar DEFAULT_MAX_DELAY_MS = 500;\nvar DEFAULT_NUMBER_OF_TAPS = 1;\nvar DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\nvar TapGestureHandler = function (_GestureHandler) {\n  (0, _inherits2.default)(TapGestureHandler, _GestureHandler);\n  var _super = _createSuper(TapGestureHandler);\n  function TapGestureHandler() {\n    var _this;\n    (0, _classCallCheck2.default)(this, TapGestureHandler);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDeltaX\", Number.MIN_SAFE_INTEGER);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDeltaY\", Number.MIN_SAFE_INTEGER);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDistSq\", Number.MIN_SAFE_INTEGER);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDurationMs\", DEFAULT_MAX_DURATION_MS);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDelayMs\", DEFAULT_MAX_DELAY_MS);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"numberOfTaps\", DEFAULT_NUMBER_OF_TAPS);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"minNumberOfPointers\", DEFAULT_MIN_NUMBER_OF_POINTERS);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"currentMaxNumberOfPointers\", 1);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"startX\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"startY\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"offsetX\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"offsetY\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"lastX\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"lastY\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"waitTimeout\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"delayTimeout\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"tapsSoFar\", 0);\n    return _this;\n  }\n  (0, _createClass2.default)(TapGestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"init\", this).call(this, ref, propsRef);\n      this.setShouldCancelWhenOutside(true);\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n        enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n        props = (0, _objectWithoutProperties2.default)(_ref, [\"enabled\"]);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, (0, _extends2.default)({\n        enabled: enabled\n      }, props));\n      if (this.config.numberOfTaps !== undefined) {\n        this.numberOfTaps = this.config.numberOfTaps;\n      }\n      if (this.config.maxDurationMs !== undefined) {\n        this.maxDurationMs = this.config.maxDurationMs;\n      }\n      if (this.config.maxDelayMs !== undefined) {\n        this.maxDelayMs = this.config.maxDelayMs;\n      }\n      if (this.config.maxDeltaX !== undefined) {\n        this.maxDeltaX = this.config.maxDeltaX;\n      }\n      if (this.config.maxDeltaY !== undefined) {\n        this.maxDeltaY = this.config.maxDeltaY;\n      }\n      if (this.config.maxDist !== undefined) {\n        this.maxDistSq = this.config.maxDist * this.config.maxDist;\n      }\n      if (this.config.minPointers !== undefined) {\n        this.minNumberOfPointers = this.config.minPointers;\n      }\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"resetConfig\", this).call(this);\n      this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n      this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n      this.maxDistSq = Number.MIN_SAFE_INTEGER;\n      this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n      this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n      this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n      this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent() {\n      var rect = this.view.getBoundingClientRect();\n      return {\n        x: this.tracker.getLastAvgX() - rect.left,\n        y: this.tracker.getLastAvgY() - rect.top,\n        absoluteX: this.tracker.getLastAvgX(),\n        absoluteY: this.tracker.getLastAvgY()\n      };\n    }\n  }, {\n    key: \"clearTimeouts\",\n    value: function clearTimeouts() {\n      clearTimeout(this.waitTimeout);\n      clearTimeout(this.delayTimeout);\n    }\n  }, {\n    key: \"startTap\",\n    value: function startTap() {\n      var _this2 = this;\n      this.clearTimeouts();\n      this.waitTimeout = setTimeout(function () {\n        return _this2.fail();\n      }, this.maxDurationMs);\n    }\n  }, {\n    key: \"endTap\",\n    value: function endTap() {\n      var _this3 = this;\n      this.clearTimeouts();\n      if (++this.tapsSoFar === this.numberOfTaps && this.currentMaxNumberOfPointers >= this.minNumberOfPointers) {\n        this.activate();\n      } else {\n        this.delayTimeout = setTimeout(function () {\n          return _this3.fail();\n        }, this.maxDelayMs);\n      }\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      this.tracker.addToTracker(event);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerDown\", this).call(this, event);\n      this.trySettingPosition(event);\n      this.startX = event.x;\n      this.startY = event.y;\n      this.lastX = event.x;\n      this.lastY = event.y;\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerAdd\", this).call(this, event);\n      this.tracker.addToTracker(event);\n      this.trySettingPosition(event);\n      this.offsetX += this.lastX - this.startX;\n      this.offsetY += this.lastY - this.startY;\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.startX = this.tracker.getLastAvgX();\n      this.startY = this.tracker.getLastAvgY();\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerUp\", this).call(this, event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.tracker.removeFromTracker(event.pointerId);\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerRemove\", this).call(this, event);\n      this.tracker.removeFromTracker(event.pointerId);\n      this.offsetX += this.lastX - this.startX;\n      this.offsetY += this.lastY = this.startY;\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.startX = this.lastX;\n      this.startY = this.lastY;\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.trySettingPosition(event);\n      this.tracker.track(event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.updateState(event);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerMove\", this).call(this, event);\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      this.trySettingPosition(event);\n      this.tracker.track(event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.updateState(event);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerOutOfBounds\", this).call(this, event);\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerCancel\", this).call(this, event);\n      this.tracker.resetTracker();\n      this.fail();\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(event) {\n      if (this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()) {\n        this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n      }\n      if (this.shouldFail()) {\n        this.fail();\n        return;\n      }\n      switch (this.currentState) {\n        case _State.State.UNDETERMINED:\n          if (event.eventType === _interfaces.EventTypes.DOWN) {\n            this.begin();\n          }\n          this.startTap();\n          break;\n        case _State.State.BEGAN:\n          if (event.eventType === _interfaces.EventTypes.UP) {\n            this.endTap();\n          }\n          if (event.eventType === _interfaces.EventTypes.DOWN) {\n            this.startTap();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"trySettingPosition\",\n    value: function trySettingPosition(event) {\n      if (this.currentState !== _State.State.UNDETERMINED) {\n        return;\n      }\n      this.offsetX = 0;\n      this.offsetY = 0;\n      this.startX = event.x;\n      this.startY = event.y;\n    }\n  }, {\n    key: \"shouldFail\",\n    value: function shouldFail() {\n      var dx = this.lastX - this.startX + this.offsetX;\n      if (this.maxDeltaX !== Number.MIN_SAFE_INTEGER && Math.abs(dx) > this.maxDeltaX) {\n        return true;\n      }\n      var dy = this.lastY - this.startY + this.offsetY;\n      if (this.maxDeltaY !== Number.MIN_SAFE_INTEGER && Math.abs(dy) > this.maxDeltaY) {\n        return true;\n      }\n      var distSq = dy * dy + dx * dx;\n      return this.maxDistSq !== Number.MIN_SAFE_INTEGER && distSq > this.maxDistSq;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"activate\", this).call(this);\n      this.end();\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.resetProgress();\n      this.clearTimeouts();\n    }\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {\n      this.clearTimeouts();\n      this.tapsSoFar = 0;\n      this.currentMaxNumberOfPointers = 0;\n    }\n  }]);\n  return TapGestureHandler;\n}(_GestureHandler2.default);\nexports.default = TapGestureHandler;","map":{"version":3,"sources":["TapGestureHandler.ts"],"names":["DEFAULT_MAX_DURATION_MS","DEFAULT_MAX_DELAY_MS","DEFAULT_NUMBER_OF_TAPS","DEFAULT_MIN_NUMBER_OF_POINTERS","TapGestureHandler","GestureHandler","Number","MIN_SAFE_INTEGER","ref","propsRef","setShouldCancelWhenOutside","enabled","props","config","numberOfTaps","undefined","maxDurationMs","maxDelayMs","maxDeltaX","maxDeltaY","maxDist","maxDistSq","minPointers","minNumberOfPointers","rect","view","getBoundingClientRect","x","tracker","getLastAvgX","left","y","getLastAvgY","top","absoluteX","absoluteY","clearTimeout","waitTimeout","delayTimeout","clearTimeouts","setTimeout","fail","tapsSoFar","currentMaxNumberOfPointers","activate","event","addToTracker","trySettingPosition","startX","startY","lastX","lastY","updateState","offsetX","offsetY","removeFromTracker","pointerId","track","resetTracker","getTrackedPointersCount","shouldFail","currentState","State","UNDETERMINED","eventType","EventTypes","DOWN","begin","startTap","BEGAN","UP","endTap","dx","Math","abs","dy","distSq","end","resetProgress"],"mappings":"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","sourcesContent":["import { State } from '../../State';\nimport { AdaptedEvent, Config, EventTypes } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\n\nconst DEFAULT_MAX_DURATION_MS = 500;\nconst DEFAULT_MAX_DELAY_MS = 500;\nconst DEFAULT_NUMBER_OF_TAPS = 1;\nconst DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\n\nexport default class TapGestureHandler extends GestureHandler {\n  private maxDeltaX = Number.MIN_SAFE_INTEGER;\n  private maxDeltaY = Number.MIN_SAFE_INTEGER;\n  private maxDistSq = Number.MIN_SAFE_INTEGER;\n  private maxDurationMs = DEFAULT_MAX_DURATION_MS;\n  private maxDelayMs = DEFAULT_MAX_DELAY_MS;\n\n  private numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n  private minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n  private currentMaxNumberOfPointers = 1;\n\n  private startX = 0;\n  private startY = 0;\n  private offsetX = 0;\n  private offsetY = 0;\n  private lastX = 0;\n  private lastY = 0;\n\n  private waitTimeout: number | undefined;\n  private delayTimeout: number | undefined;\n\n  private tapsSoFar = 0;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n    this.setShouldCancelWhenOutside(true);\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    if (this.config.numberOfTaps !== undefined) {\n      this.numberOfTaps = this.config.numberOfTaps;\n    }\n\n    if (this.config.maxDurationMs !== undefined) {\n      this.maxDurationMs = this.config.maxDurationMs;\n    }\n\n    if (this.config.maxDelayMs !== undefined) {\n      this.maxDelayMs = this.config.maxDelayMs;\n    }\n\n    if (this.config.maxDeltaX !== undefined) {\n      this.maxDeltaX = this.config.maxDeltaX;\n    }\n\n    if (this.config.maxDeltaY !== undefined) {\n      this.maxDeltaY = this.config.maxDeltaY;\n    }\n\n    if (this.config.maxDist !== undefined) {\n      this.maxDistSq = this.config.maxDist * this.config.maxDist;\n    }\n\n    if (this.config.minPointers !== undefined) {\n      this.minNumberOfPointers = this.config.minPointers;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n\n    this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n    this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n    this.maxDistSq = Number.MIN_SAFE_INTEGER;\n    this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n    this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n    this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n    this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n  }\n\n  protected transformNativeEvent() {\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return {\n      x: this.tracker.getLastAvgX() - rect.left,\n      y: this.tracker.getLastAvgY() - rect.top,\n      absoluteX: this.tracker.getLastAvgX(),\n      absoluteY: this.tracker.getLastAvgY(),\n    };\n  }\n\n  private clearTimeouts(): void {\n    clearTimeout(this.waitTimeout);\n    clearTimeout(this.delayTimeout);\n  }\n\n  private startTap(): void {\n    this.clearTimeouts();\n\n    this.waitTimeout = setTimeout(() => this.fail(), this.maxDurationMs);\n  }\n\n  private endTap(): void {\n    this.clearTimeouts();\n\n    if (\n      ++this.tapsSoFar === this.numberOfTaps &&\n      this.currentMaxNumberOfPointers >= this.minNumberOfPointers\n    ) {\n      this.activate();\n    } else {\n      this.delayTimeout = setTimeout(() => this.fail(), this.maxDelayMs);\n    }\n  }\n\n  //Handling Events\n  protected onPointerDown(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n\n    this.trySettingPosition(event);\n\n    this.startX = event.x;\n    this.startY = event.y;\n\n    this.lastX = event.x;\n    this.lastY = event.y;\n\n    this.updateState(event);\n  }\n\n  protected onPointerAdd(event: AdaptedEvent): void {\n    super.onPointerAdd(event);\n    this.tracker.addToTracker(event);\n    this.trySettingPosition(event);\n\n    this.offsetX += this.lastX - this.startX;\n    this.offsetY += this.lastY - this.startY;\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.startX = this.tracker.getLastAvgX();\n    this.startY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.tracker.removeFromTracker(event.pointerId);\n\n    this.updateState(event);\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.tracker.removeFromTracker(event.pointerId);\n\n    this.offsetX += this.lastX - this.startX;\n    this.offsetY += this.lastY = this.startY;\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.startX = this.lastX;\n    this.startY = this.lastY;\n\n    this.updateState(event);\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.trySettingPosition(event);\n    this.tracker.track(event);\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n\n    super.onPointerMove(event);\n  }\n\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.trySettingPosition(event);\n    this.tracker.track(event);\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n\n    super.onPointerOutOfBounds(event);\n  }\n\n  protected onPointerCancel(event: AdaptedEvent): void {\n    super.onPointerCancel(event);\n    this.tracker.resetTracker();\n    this.fail();\n  }\n\n  private updateState(event: AdaptedEvent): void {\n    if (\n      this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()\n    ) {\n      this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n    }\n\n    if (this.shouldFail()) {\n      this.fail();\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.UNDETERMINED:\n        if (event.eventType === EventTypes.DOWN) {\n          this.begin();\n        }\n        this.startTap();\n        break;\n      case State.BEGAN:\n        if (event.eventType === EventTypes.UP) {\n          this.endTap();\n        }\n        if (event.eventType === EventTypes.DOWN) {\n          this.startTap();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private trySettingPosition(event: AdaptedEvent): void {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.startX = event.x;\n    this.startY = event.y;\n  }\n\n  private shouldFail(): boolean {\n    const dx = this.lastX - this.startX + this.offsetX;\n\n    if (\n      this.maxDeltaX !== Number.MIN_SAFE_INTEGER &&\n      Math.abs(dx) > this.maxDeltaX\n    ) {\n      return true;\n    }\n\n    const dy = this.lastY - this.startY + this.offsetY;\n    if (\n      this.maxDeltaY !== Number.MIN_SAFE_INTEGER &&\n      Math.abs(dy) > this.maxDeltaY\n    ) {\n      return true;\n    }\n\n    const distSq = dy * dy + dx * dx;\n\n    return (\n      this.maxDistSq !== Number.MIN_SAFE_INTEGER && distSq > this.maxDistSq\n    );\n  }\n\n  public activate(): void {\n    super.activate();\n\n    this.end();\n  }\n\n  protected onCancel(): void {\n    this.resetProgress();\n    this.clearTimeouts();\n  }\n\n  protected resetProgress(): void {\n    this.clearTimeouts();\n    this.tapsSoFar = 0;\n    this.currentMaxNumberOfPointers = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}