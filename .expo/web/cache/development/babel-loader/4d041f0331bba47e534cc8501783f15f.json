{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants from 'expo-constants';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nvar ExponentAR = NativeModules.ExponentAR || {};\nvar emitter = new NativeEventEmitter(ExponentAR);\nexport var TrackingConfiguration;\n(function (TrackingConfiguration) {\n  TrackingConfiguration[\"World\"] = \"ARWorldTrackingConfiguration\";\n  TrackingConfiguration[\"Orientation\"] = \"AROrientationTrackingConfiguration\";\n  TrackingConfiguration[\"Face\"] = \"ARFaceTrackingConfiguration\";\n})(TrackingConfiguration || (TrackingConfiguration = {}));\nexport var DepthDataQuality;\n(function (DepthDataQuality) {\n  DepthDataQuality[\"Low\"] = \"AVDepthDataQualityLow\";\n  DepthDataQuality[\"High\"] = \"AVDepthDataQualityHigh\";\n})(DepthDataQuality || (DepthDataQuality = {}));\nexport var DepthDataAccuracy;\n(function (DepthDataAccuracy) {\n  DepthDataAccuracy[\"Absolute\"] = \"AVDepthDataAccuracyAbsolute\";\n  DepthDataAccuracy[\"Relative\"] = \"AVDepthDataAccuracyRelative\";\n})(DepthDataAccuracy || (DepthDataAccuracy = {}));\nexport var BlendShape;\n(function (BlendShape) {\n  BlendShape[\"BrowDownL\"] = \"browDown_L\";\n  BlendShape[\"BrowDownR\"] = \"browDown_R\";\n  BlendShape[\"BrowInnerUp\"] = \"browInnerUp\";\n  BlendShape[\"BrowOuterUpL\"] = \"browOuterUp_L\";\n  BlendShape[\"BrowOuterUpR\"] = \"browOuterUp_R\";\n  BlendShape[\"CheekPuff\"] = \"cheekPuff\";\n  BlendShape[\"CheekSquintL\"] = \"cheekSquint_L\";\n  BlendShape[\"CheekSquintR\"] = \"cheekSquint_R\";\n  BlendShape[\"EyeBlinkL\"] = \"eyeBlink_L\";\n  BlendShape[\"EyeBlinkR\"] = \"eyeBlink_R\";\n  BlendShape[\"EyeLookDownL\"] = \"eyeLookDown_L\";\n  BlendShape[\"EyeLookDownR\"] = \"eyeLookDown_R\";\n  BlendShape[\"EyeLookInL\"] = \"eyeLookIn_L\";\n  BlendShape[\"EyeLookInR\"] = \"eyeLookIn_R\";\n  BlendShape[\"EyeLookOutL\"] = \"eyeLookOut_L\";\n  BlendShape[\"EyeLookOutR\"] = \"eyeLookOut_R\";\n  BlendShape[\"EyeLookUpL\"] = \"eyeLookUp_L\";\n  BlendShape[\"EyeLookUpR\"] = \"eyeLookUp_R\";\n  BlendShape[\"EyeSquintL\"] = \"eyeSquint_L\";\n  BlendShape[\"EyeSquintR\"] = \"eyeSquint_R\";\n  BlendShape[\"EyeWideL\"] = \"eyeWide_L\";\n  BlendShape[\"EyeWideR\"] = \"eyeWide_R\";\n  BlendShape[\"JawForward\"] = \"jawForward\";\n  BlendShape[\"JawLeft\"] = \"jawLeft\";\n  BlendShape[\"JawOpen\"] = \"jawOpen\";\n  BlendShape[\"JawRight\"] = \"jawRight\";\n  BlendShape[\"MouthClose\"] = \"mouthClose\";\n  BlendShape[\"MouthDimpleL\"] = \"mouthDimple_L\";\n  BlendShape[\"MouthDimpleR\"] = \"mouthDimple_R\";\n  BlendShape[\"MouthFrownL\"] = \"mouthFrown_L\";\n  BlendShape[\"MouthFrownR\"] = \"mouthFrown_R\";\n  BlendShape[\"MouthFunnel\"] = \"mouthFunnel\";\n  BlendShape[\"MouthLeft\"] = \"mouthLeft\";\n  BlendShape[\"MouthLowerDownL\"] = \"mouthLowerDown_L\";\n  BlendShape[\"MouthLowerDownR\"] = \"mouthLowerDown_R\";\n  BlendShape[\"MouthPressL\"] = \"mouthPress_L\";\n  BlendShape[\"MouthPressR\"] = \"mouthPress_R\";\n  BlendShape[\"MouthPucker\"] = \"mouthPucker\";\n  BlendShape[\"MouthRight\"] = \"mouthRight\";\n  BlendShape[\"MouthRollLower\"] = \"mouthRollLower\";\n  BlendShape[\"MouthRollUpper\"] = \"mouthRollUpper\";\n  BlendShape[\"MouthShrugLower\"] = \"mouthShrugLower\";\n  BlendShape[\"MouthShrugUpper\"] = \"mouthShrugUpper\";\n  BlendShape[\"MouthSmileL\"] = \"mouthSmile_L\";\n  BlendShape[\"MouthSmileR\"] = \"mouthSmile_R\";\n  BlendShape[\"MouthStretchL\"] = \"mouthStretch_L\";\n  BlendShape[\"MouthStretchR\"] = \"mouthStretch_R\";\n  BlendShape[\"MouthUpperUpL\"] = \"mouthUpperUp_L\";\n  BlendShape[\"MouthUpperUpR\"] = \"mouthUpperUp_R\";\n  BlendShape[\"NoseSneerL\"] = \"noseSneer_L\";\n  BlendShape[\"NoseSneerR\"] = \"noseSneer_R\";\n})(BlendShape || (BlendShape = {}));\nexport var FaceAnchorProp;\n(function (FaceAnchorProp) {\n  FaceAnchorProp[\"Geometry\"] = \"geometry\";\n  FaceAnchorProp[\"BlendShapes\"] = \"blendShapes\";\n})(FaceAnchorProp || (FaceAnchorProp = {}));\nexport var PlaneDetection;\n(function (PlaneDetection) {\n  PlaneDetection[\"None\"] = \"none\";\n  PlaneDetection[\"Horizontal\"] = \"horizontal\";\n  PlaneDetection[\"Vertical\"] = \"vertical\";\n})(PlaneDetection || (PlaneDetection = {}));\nexport var HitTestResultTypes;\n(function (HitTestResultTypes) {\n  HitTestResultTypes[\"FeaturePoint\"] = \"featurePoint\";\n  HitTestResultTypes[\"HorizontalPlane\"] = \"horizontalPlane\";\n  HitTestResultTypes[\"VerticalPlane\"] = \"verticalPlane\";\n  HitTestResultTypes[\"ExistingPlane\"] = \"existingPlane\";\n  HitTestResultTypes[\"ExistingPlaneUsingExtent\"] = \"existingPlaneUsingExtent\";\n  HitTestResultTypes[\"ExistingPlaneUsingGeometry\"] = \"existingPlaneUsingGeometry\";\n})(HitTestResultTypes || (HitTestResultTypes = {}));\nexport var WorldAlignment;\n(function (WorldAlignment) {\n  WorldAlignment[\"Gravity\"] = \"gravity\";\n  WorldAlignment[\"GravityAndHeading\"] = \"gravityAndHeading\";\n  WorldAlignment[\"AlignmentCamera\"] = \"alignmentCamera\";\n})(WorldAlignment || (WorldAlignment = {}));\nexport var EventType;\n(function (EventType) {\n  EventType[EventType[\"FrameDidUpdate\"] = ExponentAR.frameDidUpdate] = \"FrameDidUpdate\";\n  EventType[EventType[\"DidFailWithError\"] = ExponentAR.didFailWithError] = \"DidFailWithError\";\n  EventType[EventType[\"AnchorsDidUpdate\"] = ExponentAR.anchorsDidUpdate] = \"AnchorsDidUpdate\";\n  EventType[EventType[\"CameraDidChangeTrackingState\"] = ExponentAR.cameraDidChangeTrackingState] = \"CameraDidChangeTrackingState\";\n  EventType[EventType[\"SessionWasInterrupted\"] = ExponentAR.sessionWasInterrupted] = \"SessionWasInterrupted\";\n  EventType[EventType[\"SessionInterruptionEnded\"] = ExponentAR.sessionInterruptionEnded] = \"SessionInterruptionEnded\";\n})(EventType || (EventType = {}));\nexport var AnchorType;\n(function (AnchorType) {\n  AnchorType[\"Face\"] = \"ARFaceAnchor\";\n  AnchorType[\"Image\"] = \"ARImageAnchor\";\n  AnchorType[\"Plane\"] = \"ARPlaneAnchor\";\n  AnchorType[\"Anchor\"] = \"ARAnchor\";\n})(AnchorType || (AnchorType = {}));\nexport var AnchorEventType;\n(function (AnchorEventType) {\n  AnchorEventType[\"Add\"] = \"add\";\n  AnchorEventType[\"Update\"] = \"update\";\n  AnchorEventType[\"Remove\"] = \"remove\";\n})(AnchorEventType || (AnchorEventType = {}));\nexport var FrameAttribute;\n(function (FrameAttribute) {\n  FrameAttribute[\"Anchors\"] = \"anchors\";\n  FrameAttribute[\"RawFeaturePoints\"] = \"rawFeaturePoints\";\n  FrameAttribute[\"LightEstimation\"] = \"lightEstimation\";\n  FrameAttribute[\"CapturedDepthData\"] = \"capturedDepthData\";\n})(FrameAttribute || (FrameAttribute = {}));\nexport var TrackingState;\n(function (TrackingState) {\n  TrackingState[\"NotAvailable\"] = \"ARTrackingStateNotAvailable\";\n  TrackingState[\"Limited\"] = \"ARTrackingStateLimited\";\n  TrackingState[\"Normal\"] = \"ARTrackingStateNormal\";\n})(TrackingState || (TrackingState = {}));\nexport var TrackingStateReason;\n(function (TrackingStateReason) {\n  TrackingStateReason[\"None\"] = \"ARTrackingStateReasonNone\";\n  TrackingStateReason[\"Initializing\"] = \"ARTrackingStateReasonInitializing\";\n  TrackingStateReason[\"ExcessiveMotion\"] = \"ARTrackingStateReasonExcessiveMotion\";\n  TrackingStateReason[\"InsufficientFeatures\"] = \"ARTrackingStateReasonInsufficientFeatures\";\n  TrackingStateReason[\"Relocalizing\"] = \"ARTrackingStateReasonRelocalizing\";\n})(TrackingStateReason || (TrackingStateReason = {}));\nexport function getVersion() {\n  return ExponentAR.ARKitVersion;\n}\nvar AvailabilityErrorMessages = {\n  Simulator: \"Cannot run EXGL in a simulator\",\n  ANineChip: \"ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a\",\n  ARKitOnlyOnIOS: \"ARKit can only run on an iOS device! This is a\"\n};\nexport function isAvailable() {\n  var hasA9Chip = Constants.deviceYearClass && Constants.deviceYearClass > 2014;\n  if (!Constants.isDevice ||\n  Platform.isTVOS || Platform.OS !== 'ios' ||\n  !hasA9Chip || !ExponentAR.isSupported ||\n  !ExponentAR.startAsync) {\n    return false;\n  }\n  return true;\n}\nexport function getUnavailabilityReason() {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return AvailabilityErrorMessages.ARKitOnlyOnIOS + \" \" + Platform.OS + \" device\";\n  } else if (Constants.deviceYearClass == null || Constants.deviceYearClass < 2015) {\n    return AvailabilityErrorMessages.ANineChip + \" \" + Constants.deviceYearClass + \" device\";\n  }\n  return 'Unknown Reason';\n}\nexport function onFrameDidUpdate(listener) {\n  return _addListener(EventType.FrameDidUpdate, listener);\n}\nexport function onDidFailWithError(listener) {\n  return _addListener(EventType.DidFailWithError, listener);\n}\nexport function onAnchorsDidUpdate(listener) {\n  return _addListener(EventType.AnchorsDidUpdate, listener);\n}\nexport function onCameraDidChangeTrackingState(listener) {\n  return _addListener(EventType.CameraDidChangeTrackingState, listener);\n}\nexport function onSessionWasInterrupted(listener) {\n  return _addListener(EventType.SessionWasInterrupted, listener);\n}\nexport function onSessionInterruptionEnded(listener) {\n  return _addListener(EventType.SessionInterruptionEnded, listener);\n}\nfunction _addListener(eventType, event) {\n  return emitter.addListener(eventType, event);\n}\nexport function removeAllListeners(eventType) {\n  emitter.removeAllListeners(eventType);\n}\nexport function performHitTest(point, types) {\n  if (ExponentAR.performHitTest) {\n    return ExponentAR.performHitTest(point, types);\n  }\n  throw new Error(\"AR hit testing is not supported on this device\");\n}\nexport function setDetectionImagesAsync(images) {\n  return _regeneratorRuntime.async(function setDetectionImagesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!ExponentAR.setDetectionImagesAsync) {\n            _context.next = 3;\n            break;\n          }\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExponentAR.setDetectionImagesAsync(images));\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getCurrentFrame(attributes) {\n  if (ExponentAR.getCurrentFrame) {\n    return ExponentAR.getCurrentFrame(attributes);\n  }\n  throw new Error(\"AR is not supported on this device\");\n}\nexport function getARMatrices(near, far) {\n  if (ExponentAR.getARMatrices) {\n    return ExponentAR.getARMatrices(near, far);\n  }\n  throw new Error(\"AR is not supported on this device\");\n}\nexport function stopAsync() {\n  return _regeneratorRuntime.async(function stopAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!ExponentAR.stopAsync) {\n            _context2.next = 3;\n            break;\n          }\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(ExponentAR.stopAsync());\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function startAsync(node, configuration) {\n  var handle;\n  return _regeneratorRuntime.async(function startAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          handle = typeof node === 'number' ? node : _getNodeHandle(node);\n          if (!ExponentAR.startAsync) {\n            _context3.next = 5;\n            break;\n          }\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExponentAR.startAsync(handle, configuration));\n        case 4:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 5:\n          throw new Error(\"AR is not supported on this device\");\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction _getNodeHandle(component) {\n  var handle = findNodeHandle(component);\n  if (handle === null) {\n    throw new Error(\"Could not find the React node handle for the AR component: \" + component);\n  }\n  return handle;\n}\nexport function reset() {\n  if (ExponentAR.reset) {\n    ExponentAR.reset();\n  }\n}\nexport function resume() {\n  if (ExponentAR.resume) {\n    ExponentAR.resume();\n  }\n}\nexport function pause() {\n  if (ExponentAR.pause) {\n    ExponentAR.pause();\n  }\n}\nexport function setConfigurationAsync(configuration) {\n  return _regeneratorRuntime.async(function setConfigurationAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!ExponentAR.setConfigurationAsync) {\n            _context4.next = 3;\n            break;\n          }\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(ExponentAR.setConfigurationAsync(configuration));\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getProvidesAudioData() {\n  if (ExponentAR.getProvidesAudioData) {\n    return ExponentAR.getProvidesAudioData();\n  }\n  return false;\n}\nexport function setProvidesAudioData(providesAudioData) {\n  if (ExponentAR.setProvidesAudioData) {\n    ExponentAR.setProvidesAudioData(providesAudioData);\n  }\n}\nexport function setPlaneDetection(planeDetection) {\n  if (ExponentAR.setPlaneDetection) {\n    ExponentAR.setPlaneDetection(planeDetection);\n  }\n}\nexport function getPlaneDetection() {\n  if (ExponentAR.getPlaneDetection) {\n    return ExponentAR.getPlaneDetection();\n  }\n  throw new Error(\"AR plane detection is not supported on this device\");\n}\nexport function getCameraTexture() {\n  if (ExponentAR.getCameraTexture) {\n    return ExponentAR.getCameraTexture();\n  }\n  throw new Error(\"AR camera textures are not supported on this device\");\n}\nexport function setWorldOriginAsync(matrix_float4x4) {\n  return _regeneratorRuntime.async(function setWorldOriginAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!ExponentAR.setWorldOriginAsync) {\n            _context5.next = 3;\n            break;\n          }\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(ExponentAR.setWorldOriginAsync(matrix_float4x4));\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setLightEstimationEnabled(isLightEstimationEnabled) {\n  if (ExponentAR.setLightEstimationEnabled) {\n    ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);\n  }\n}\nexport function getLightEstimationEnabled() {\n  if (ExponentAR.getLightEstimationEnabled) {\n    return ExponentAR.getLightEstimationEnabled();\n  }\n  return false;\n}\nexport function setAutoFocusEnabled(isAutoFocusEnabled) {\n  if (ExponentAR.setAutoFocusEnabled) {\n    ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);\n  }\n}\nexport function getAutoFocusEnabled() {\n  if (ExponentAR.getAutoFocusEnabled) {\n    return ExponentAR.getAutoFocusEnabled();\n  }\n  return false;\n}\nexport function setWorldAlignment(worldAlignment) {\n  if (ExponentAR.setWorldAlignment) {\n    ExponentAR.setWorldAlignment(worldAlignment);\n  }\n}\nexport function getWorldAlignment() {\n  if (ExponentAR.getWorldAlignment) {\n    return ExponentAR.getWorldAlignment();\n  }\n  throw new Error(\"AR world alignment is not supported on this device\");\n}\nexport function isConfigurationAvailable(configuration) {\n  var _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n  var isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {\n    return true;\n  }\n  return !!ExponentAR[configuration];\n}\nexport function getSupportedVideoFormats(configuration) {\n  var _videoFormats;\n  var videoFormats = (_videoFormats = {}, _defineProperty(_videoFormats, TrackingConfiguration.World, 'WorldTrackingVideoFormats'), _defineProperty(_videoFormats, TrackingConfiguration.Orientation, 'OrientationTrackingVideoFormats'), _defineProperty(_videoFormats, TrackingConfiguration.Face, 'FaceTrackingVideoFormats'), _videoFormats);\n  var videoFormat = videoFormats[configuration];\n  return ExponentAR[videoFormat] || [];\n}\nexport function isFrontCameraAvailable() {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\nexport function isRearCameraAvailable() {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}\nexport var PlaneDetectionTypes = PlaneDetection;\nexport var WorldAlignmentTypes = WorldAlignment;\nexport var EventTypes = EventType;\nexport var AnchorTypes = AnchorType;\nexport var AnchorEventTypes = AnchorEventType;\nexport var FrameAttributes = FrameAttribute;\nexport var TrackingStates = TrackingState;\nexport var TrackingStateReasons = TrackingStateReason;\nexport var TrackingConfigurations = TrackingConfiguration;","map":{"version":3,"mappings":";;AAAA,OAAOA,SAAS,MAAM,gBAAgB;AAAC;AAAA;AAAA;AAAA;AAAA;AAWvC,IAAMC,UAAU,GAAGC,aAAa,CAACD,UAAU,IAAI,EAAE;AAEjD,IAAME,OAAO,GAAG,IAAIC,kBAAkB,CAACH,UAAU,CAAC;AAOlD,WAAYI,qBAgBX;AAhBD,WAAYA,qBAAqB;EAK/BA,+DAAsC;EAKtCA,2EAAkD;EAKlDA,6DAAoC;AACtC,CAAC,EAhBWA,qBAAqB,KAArBA,qBAAqB;AAkBjC,WAAYC,gBAGX;AAHD,WAAYA,gBAAgB;EAC1BA,iDAA6B;EAC7BA,mDAA+B;AACjC,CAAC,EAHWA,gBAAgB,KAAhBA,gBAAgB;AAK5B,WAAYC,iBAGX;AAHD,WAAYA,iBAAiB;EAC3BA,6DAAwC;EACxCA,6DAAwC;AAC1C,CAAC,EAHWA,iBAAiB,KAAjBA,iBAAiB;AA4J7B,WAAYC,UAoDX;AApDD,WAAYA,UAAU;EACpBA,sCAAwB;EACxBA,sCAAwB;EACxBA,yCAA2B;EAC3BA,4CAA8B;EAC9BA,4CAA8B;EAC9BA,qCAAuB;EACvBA,4CAA8B;EAC9BA,4CAA8B;EAC9BA,sCAAwB;EACxBA,sCAAwB;EACxBA,4CAA8B;EAC9BA,4CAA8B;EAC9BA,wCAA0B;EAC1BA,wCAA0B;EAC1BA,0CAA4B;EAC5BA,0CAA4B;EAC5BA,wCAA0B;EAC1BA,wCAA0B;EAC1BA,wCAA0B;EAC1BA,wCAA0B;EAC1BA,oCAAsB;EACtBA,oCAAsB;EACtBA,uCAAyB;EACzBA,iCAAmB;EACnBA,iCAAmB;EACnBA,mCAAqB;EACrBA,uCAAyB;EACzBA,4CAA8B;EAC9BA,4CAA8B;EAC9BA,0CAA4B;EAC5BA,0CAA4B;EAC5BA,yCAA2B;EAC3BA,qCAAuB;EACvBA,kDAAoC;EACpCA,kDAAoC;EACpCA,0CAA4B;EAC5BA,0CAA4B;EAC5BA,yCAA2B;EAC3BA,uCAAyB;EACzBA,+CAAiC;EACjCA,+CAAiC;EACjCA,iDAAmC;EACnCA,iDAAmC;EACnCA,0CAA4B;EAC5BA,0CAA4B;EAC5BA,8CAAgC;EAChCA,8CAAgC;EAChCA,8CAAgC;EAChCA,8CAAgC;EAChCA,wCAA0B;EAC1BA,wCAA0B;AAC5B,CAAC,EApDWA,UAAU,KAAVA,UAAU;AAsDtB,WAAYC,cAGX;AAHD,WAAYA,cAAc;EACxBA,uCAAqB;EACrBA,6CAA2B;AAC7B,CAAC,EAHWA,cAAc,KAAdA,cAAc;AAU1B,WAAYC,cAaX;AAbD,WAAYA,cAAc;EAIxBA,+BAAa;EAIbA,2CAAyB;EAIzBA,uCAAqB;AACvB,CAAC,EAbWA,cAAc,KAAdA,cAAc;AAoB1B,WAAYC,kBA2BX;AA3BD,WAAYA,kBAAkB;EAI5BA,mDAA6B;EAI7BA,yDAAmC;EAInCA,qDAA+B;EAI/BA,qDAA+B;EAK/BA,2EAAqD;EAKrDA,+EAAyD;AAC3D,CAAC,EA3BWA,kBAAkB,KAAlBA,kBAAkB;AAkC9B,WAAYC,cAcX;AAdD,WAAYA,cAAc;EAIxBA,qCAAmB;EAKnBA,yDAAuC;EAIvCA,qDAAmC;AACrC,CAAC,EAdWA,cAAc,KAAdA,cAAc;AAgB1B,WAAYC,SAOX;AAPD,WAAYA,SAAS;EACnBA,wCAAiBZ,UAAU,CAACa,cAAc;EAC1CD,0CAAmBZ,UAAU,CAACc,gBAAgB;EAC9CF,0CAAmBZ,UAAU,CAACe,gBAAgB;EAC9CH,sDAA+BZ,UAAU,CAACgB,4BAA4B;EACtEJ,+CAAwBZ,UAAU,CAACiB,qBAAqB;EACxDL,kDAA2BZ,UAAU,CAACkB,wBAAwB;AAChE,CAAC,EAPWN,SAAS,KAATA,SAAS;AASrB,WAAYO,UAKX;AALD,WAAYA,UAAU;EACpBA,mCAAqB;EACrBA,qCAAuB;EACvBA,qCAAuB;EACvBA,iCAAmB;AACrB,CAAC,EALWA,UAAU,KAAVA,UAAU;AAOtB,WAAYC,eAIX;AAJD,WAAYA,eAAe;EACzBA,8BAAW;EACXA,oCAAiB;EACjBA,oCAAiB;AACnB,CAAC,EAJWA,eAAe,KAAfA,eAAe;AAM3B,WAAYC,cAKX;AALD,WAAYA,cAAc;EACxBA,qCAAmB;EACnBA,uDAAqC;EACrCA,qDAAmC;EACnCA,yDAAuC;AACzC,CAAC,EALWA,cAAc,KAAdA,cAAc;AAO1B,WAAYC,aAOX;AAPD,WAAYA,aAAa;EAEvBA,6DAA4C;EAE5CA,mDAAkC;EAElCA,iDAAgC;AAClC,CAAC,EAPWA,aAAa,KAAbA,aAAa;AASzB,WAAYC,mBAeX;AAfD,WAAYA,mBAAmB;EAE7BA,yDAAkC;EAGlCA,yEAAkD;EAGlDA,+EAAwD;EAGxDA,yFAAkE;EAGlEA,yEAAkD;AACpD,CAAC,EAfWA,mBAAmB,KAAnBA,mBAAmB;AAmC/B,OAAM,SAAUC,UAAU;EACxB,OAAOxB,UAAU,CAACyB,YAAY;AAChC;AAEA,IAAMC,yBAAyB,GAAG;EAChCC,SAAS,kCAAkC;EAC3CC,SAAS,gFAAgF;EACzFC,cAAc;CACf;AAED,OAAM,SAAUC,WAAW;EAEzB,IAAMC,SAAS,GAAGhC,SAAS,CAACiC,eAAe,IAAIjC,SAAS,CAACiC,eAAe,GAAG,IAAI;EAE/E,IACE,CAACjC,SAAS,CAACkC,QAAQ;EAEnBC,QAAQ,CAACC,MAAM,IACfD,QAAQ,CAACE,EAAE,KAAK,KAAK;EACrB,CAACL,SAAS,IACV,CAAC/B,UAAU,CAACqC,WAAW;EACvB,CAACrC,UAAU,CAACsC,UAAU,EACtB;IACA,OAAO,KAAK;;EAGd,OAAO,IAAI;AACb;AAEA,OAAM,SAAUC,uBAAuB;EACrC,IAAI,CAACxC,SAAS,CAACkC,QAAQ,EAAE;IACvB,OAAOP,yBAAyB,CAACC,SAAS;GAC3C,MAAM,IAAIO,QAAQ,CAACE,EAAE,KAAK,KAAK,EAAE;IAChC,OAAUV,yBAAyB,CAACG,cAAc,SAAIK,QAAQ,CAACE,EAAE;GAClE,MAAM,IAAIrC,SAAS,CAACiC,eAAe,IAAI,IAAI,IAAIjC,SAAS,CAACiC,eAAe,GAAG,IAAI,EAAE;IAChF,OAAUN,yBAAyB,CAACE,SAAS,SAAI7B,SAAS,CAACiC,eAAe;;EAE5E,OAAO,gBAAgB;AACzB;AAEA,OAAM,SAAUQ,gBAAgB,CAC9BC,QAA8C;EAE9C,OAAOC,YAAY,CAAC9B,SAAS,CAAC+B,cAAc,EAAEF,QAAQ,CAAC;AACzD;AAEA,OAAM,SAAUG,kBAAkB,CAChCH,QAAgD;EAEhD,OAAOC,YAAY,CAAC9B,SAAS,CAACiC,gBAAgB,EAAEJ,QAAQ,CAAC;AAC3D;AAEA,OAAM,SAAUK,kBAAkB,CAChCL,QAAgD;EAEhD,OAAOC,YAAY,CAAC9B,SAAS,CAACmC,gBAAgB,EAAEN,QAAQ,CAAC;AAC3D;AAEA,OAAM,SAAUO,8BAA8B,CAC5CP,QAA4D;EAE5D,OAAOC,YAAY,CAAC9B,SAAS,CAACqC,4BAA4B,EAAER,QAAQ,CAAC;AACvE;AAEA,OAAM,SAAUS,uBAAuB,CACrCT,QAAqD;EAErD,OAAOC,YAAY,CAAC9B,SAAS,CAACuC,qBAAqB,EAAEV,QAAQ,CAAC;AAChE;AAEA,OAAM,SAAUW,0BAA0B,CACxCX,QAAwD;EAExD,OAAOC,YAAY,CAAC9B,SAAS,CAACyC,wBAAwB,EAAEZ,QAAQ,CAAC;AACnE;AAEA,SAASC,YAAY,CAACY,SAAoB,EAAEC,KAA+B;EACzE,OAAOrD,OAAO,CAACsD,WAAW,CAACF,SAAgB,EAAEC,KAAK,CAAC;AACrD;AAEA,OAAM,SAAUE,kBAAkB,CAACH,SAAqB;EACtDpD,OAAO,CAACuD,kBAAkB,CAACH,SAAgB,CAAC;AAC9C;AAGA,OAAM,SAAUI,cAAc,CAACC,KAAc,EAAEC,KAAyB;EACtE,IAAI5D,UAAU,CAAC0D,cAAc,EAAE;IAC7B,OAAO1D,UAAU,CAAC0D,cAAc,CAACC,KAAK,EAAEC,KAAK,CAAC;;EAEhD,MAAM,IAAIC,KAAK,kDAAkD;AACnE;AAEA,OAAO,SAAeC,uBAAuB,CAACC,MAE7C;EAAA;IAAA;MAAA;QAAA;UAAA,KACK/D,UAAU,CAAC8D,uBAAuB;YAAA;YAAA;UAAA;UAAA;UAAA,iCAC9B9D,UAAU,CAAC8D,uBAAuB,CAACC,MAAM,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAIpD,OAAM,SAAUC,eAAe,CAACC,UAA2B;EACzD,IAAIjE,UAAU,CAACgE,eAAe,EAAE;IAC9B,OAAOhE,UAAU,CAACgE,eAAe,CAACC,UAAU,CAAC;;EAE/C,MAAM,IAAIJ,KAAK,sCAAsC;AACvD;AAEA,OAAM,SAAUK,aAAa,CAACC,IAAY,EAAEC,GAAW;EACrD,IAAIpE,UAAU,CAACkE,aAAa,EAAE;IAC5B,OAAOlE,UAAU,CAACkE,aAAa,CAACC,IAAI,EAAEC,GAAG,CAAC;;EAE5C,MAAM,IAAIP,KAAK,sCAAsC;AACvD;AAEA,OAAO,SAAeQ,SAAS;EAAA;IAAA;MAAA;QAAA;UAAA,KACzBrE,UAAU,CAACqE,SAAS;YAAA;YAAA;UAAA;UAAA;UAAA,iCAChBrE,UAAU,CAACqE,SAAS,EAAE;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAIhC,OAAO,SAAe/B,UAAU,CAC9BgC,IAA6C,EAC7CC,aAAoC;EAAA;EAAA;IAAA;MAAA;QAAA;UAEhCC,MAAM,GAAG,OAAOF,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGG,cAAc,CAACH,IAAI,CAAC;UAAA,KAC/DtE,UAAU,CAACsC,UAAU;YAAA;YAAA;UAAA;UAAA;UAAA,iCACVtC,UAAU,CAACsC,UAAU,CAACkC,MAAM,EAAED,aAAa,CAAC;QAAA;UAAA;QAAA;UAAA,MAErD,IAAIV,KAAK,sCAAsC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAGvD,SAASY,cAAc,CAACC,SAA0B;EAChD,IAAIF,MAAM,GAAGG,cAAc,CAACD,SAAS,CAAC;EACtC,IAAIF,MAAM,KAAK,IAAI,EAAE;IACnB,MAAM,IAAIX,KAAK,iEAA+Da,SAAS,CAAG;;EAE5F,OAAOF,MAAM;AACf;AAEA,OAAM,SAAUI,KAAK;EACnB,IAAI5E,UAAU,CAAC4E,KAAK,EAAE;IACpB5E,UAAU,CAAC4E,KAAK,EAAE;;AAEtB;AAEA,OAAM,SAAUC,MAAM;EACpB,IAAI7E,UAAU,CAAC6E,MAAM,EAAE;IACrB7E,UAAU,CAAC6E,MAAM,EAAE;;AAEvB;AAEA,OAAM,SAAUC,KAAK;EACnB,IAAI9E,UAAU,CAAC8E,KAAK,EAAE;IACpB9E,UAAU,CAAC8E,KAAK,EAAE;;AAEtB;AAEA,OAAO,SAAeC,qBAAqB,CAACR,aAAoC;EAAA;IAAA;MAAA;QAAA;UAAA,KAC1EvE,UAAU,CAAC+E,qBAAqB;YAAA;YAAA;UAAA;UAAA;UAAA,iCAC5B/E,UAAU,CAAC+E,qBAAqB,CAACR,aAAa,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAIzD,OAAM,SAAUS,oBAAoB;EAClC,IAAIhF,UAAU,CAACgF,oBAAoB,EAAE;IACnC,OAAOhF,UAAU,CAACgF,oBAAoB,EAAE;;EAE1C,OAAO,KAAK;AACd;AAEA,OAAM,SAAUC,oBAAoB,CAACC,iBAA0B;EAC7D,IAAIlF,UAAU,CAACiF,oBAAoB,EAAE;IACnCjF,UAAU,CAACiF,oBAAoB,CAACC,iBAAiB,CAAC;;AAEtD;AAEA,OAAM,SAAUC,iBAAiB,CAACC,cAA8B;EAC9D,IAAIpF,UAAU,CAACmF,iBAAiB,EAAE;IAChCnF,UAAU,CAACmF,iBAAiB,CAACC,cAAc,CAAC;;AAEhD;AAEA,OAAM,SAAUC,iBAAiB;EAC/B,IAAIrF,UAAU,CAACqF,iBAAiB,EAAE;IAChC,OAAOrF,UAAU,CAACqF,iBAAiB,EAAE;;EAEvC,MAAM,IAAIxB,KAAK,sDAAsD;AACvE;AAEA,OAAM,SAAUyB,gBAAgB;EAC9B,IAAItF,UAAU,CAACsF,gBAAgB,EAAE;IAC/B,OAAOtF,UAAU,CAACsF,gBAAgB,EAAE;;EAEtC,MAAM,IAAIzB,KAAK,uDAAuD;AACxE;AAEA,OAAO,SAAe0B,mBAAmB,CAACC,eAAuB;EAAA;IAAA;MAAA;QAAA;UAAA,KAC3DxF,UAAU,CAACuF,mBAAmB;YAAA;YAAA;UAAA;UAAA;UAAA,iCAC1BvF,UAAU,CAACuF,mBAAmB,CAACC,eAAe,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAIzD,OAAM,SAAUC,yBAAyB,CAACC,wBAAiC;EACzE,IAAI1F,UAAU,CAACyF,yBAAyB,EAAE;IACxCzF,UAAU,CAACyF,yBAAyB,CAACC,wBAAwB,CAAC;;AAElE;AAEA,OAAM,SAAUC,yBAAyB;EACvC,IAAI3F,UAAU,CAAC2F,yBAAyB,EAAE;IACxC,OAAO3F,UAAU,CAAC2F,yBAAyB,EAAE;;EAE/C,OAAO,KAAK;AACd;AAEA,OAAM,SAAUC,mBAAmB,CAACC,kBAA2B;EAC7D,IAAI7F,UAAU,CAAC4F,mBAAmB,EAAE;IAClC5F,UAAU,CAAC4F,mBAAmB,CAACC,kBAAkB,CAAC;;AAEtD;AAEA,OAAM,SAAUC,mBAAmB;EACjC,IAAI9F,UAAU,CAAC8F,mBAAmB,EAAE;IAClC,OAAO9F,UAAU,CAAC8F,mBAAmB,EAAE;;EAEzC,OAAO,KAAK;AACd;AAEA,OAAM,SAAUC,iBAAiB,CAACC,cAA8B;EAC9D,IAAIhG,UAAU,CAAC+F,iBAAiB,EAAE;IAChC/F,UAAU,CAAC+F,iBAAiB,CAACC,cAAc,CAAC;;AAEhD;AAEA,OAAM,SAAUC,iBAAiB;EAC/B,IAAIjG,UAAU,CAACiG,iBAAiB,EAAE;IAChC,OAAOjG,UAAU,CAACiG,iBAAiB,EAAE;;EAEvC,MAAM,IAAIpC,KAAK,sDAAsD;AACvE;AAEA,OAAM,SAAUqC,wBAAwB,CAAC3B,aAAoC;EAAA,sBACjD4B,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;IAA1CC,KAAK,mBAALA,KAAK;IAAEC,MAAM,mBAANA,MAAM;EAErB,IAAMC,GAAG,GAAG,CAACF,KAAK,KAAK,GAAG,IAAIC,MAAM,KAAK,GAAG,KAAK,CAACpE,QAAQ,CAACC,MAAM,IAAI,CAACD,QAAQ,CAACsE,KAAK;EACpF,IAAIjC,aAAa,KAAKnE,qBAAqB,CAACqG,IAAI,IAAIF,GAAG,IAAIzE,WAAW,EAAE,EAAE;IACxE,OAAO,IAAI;;EAEb,OAAO,CAAC,CAAC9B,UAAU,CAACuE,aAAa,CAAC;AACpC;AAEA,OAAM,SAAUmC,wBAAwB,CAACnC,aAAoC;EAAA;EAC3E,IAAMoC,YAAY,uDACfvG,qBAAqB,CAACwG,KAAK,EAAG,2BAA2B,kCACzDxG,qBAAqB,CAACyG,WAAW,EAAG,iCAAiC,kCACrEzG,qBAAqB,CAACqG,IAAI,EAAG,0BAA0B,iBACzD;EACD,IAAMK,WAAW,GAAGH,YAAY,CAACpC,aAAa,CAAC;EAC/C,OAAOvE,UAAU,CAAC8G,WAAW,CAAC,IAAI,EAAE;AACtC;AAEA,OAAM,SAAUC,sBAAsB;EACpC,OAAOb,wBAAwB,CAAC9F,qBAAqB,CAACqG,IAAI,CAAC;AAC7D;AAEA,OAAM,SAAUO,qBAAqB;EACnC,OAAOd,wBAAwB,CAAC9F,qBAAqB,CAACwG,KAAK,CAAC;AAC9D;AAQA,OAAO,IAAMK,mBAAmB,GAAGxG,cAAc;AAKjD,OAAO,IAAMyG,mBAAmB,GAAGvG,cAAc;AAKjD,OAAO,IAAMwG,UAAU,GAAGvG,SAAS;AAKnC,OAAO,IAAMwG,WAAW,GAAGjG,UAAU;AAKrC,OAAO,IAAMkG,gBAAgB,GAAGjG,eAAe;AAK/C,OAAO,IAAMkG,eAAe,GAAGjG,cAAc;AAK7C,OAAO,IAAMkG,cAAc,GAAGjG,aAAa;AAK3C,OAAO,IAAMkG,oBAAoB,GAAGjG,mBAAmB;AAKvD,OAAO,IAAMkG,sBAAsB,GAAGrH,qBAAqB","names":["Constants","ExponentAR","NativeModules","emitter","NativeEventEmitter","TrackingConfiguration","DepthDataQuality","DepthDataAccuracy","BlendShape","FaceAnchorProp","PlaneDetection","HitTestResultTypes","WorldAlignment","EventType","frameDidUpdate","didFailWithError","anchorsDidUpdate","cameraDidChangeTrackingState","sessionWasInterrupted","sessionInterruptionEnded","AnchorType","AnchorEventType","FrameAttribute","TrackingState","TrackingStateReason","getVersion","ARKitVersion","AvailabilityErrorMessages","Simulator","ANineChip","ARKitOnlyOnIOS","isAvailable","hasA9Chip","deviceYearClass","isDevice","Platform","isTVOS","OS","isSupported","startAsync","getUnavailabilityReason","onFrameDidUpdate","listener","_addListener","FrameDidUpdate","onDidFailWithError","DidFailWithError","onAnchorsDidUpdate","AnchorsDidUpdate","onCameraDidChangeTrackingState","CameraDidChangeTrackingState","onSessionWasInterrupted","SessionWasInterrupted","onSessionInterruptionEnded","SessionInterruptionEnded","eventType","event","addListener","removeAllListeners","performHitTest","point","types","Error","setDetectionImagesAsync","images","getCurrentFrame","attributes","getARMatrices","near","far","stopAsync","node","configuration","handle","_getNodeHandle","component","findNodeHandle","reset","resume","pause","setConfigurationAsync","getProvidesAudioData","setProvidesAudioData","providesAudioData","setPlaneDetection","planeDetection","getPlaneDetection","getCameraTexture","setWorldOriginAsync","matrix_float4x4","setLightEstimationEnabled","isLightEstimationEnabled","getLightEstimationEnabled","setAutoFocusEnabled","isAutoFocusEnabled","getAutoFocusEnabled","setWorldAlignment","worldAlignment","getWorldAlignment","isConfigurationAvailable","Dimensions","get","width","height","isX","isPad","Face","getSupportedVideoFormats","videoFormats","World","Orientation","videoFormat","isFrontCameraAvailable","isRearCameraAvailable","PlaneDetectionTypes","WorldAlignmentTypes","EventTypes","AnchorTypes","AnchorEventTypes","FrameAttributes","TrackingStates","TrackingStateReasons","TrackingConfigurations"],"sourceRoot":"","sources":["../src/AR.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport * as React from 'react';\nimport {\n  Dimensions,\n  NativeEventEmitter,\n  NativeModules,\n  Platform,\n  EmitterSubscription,\n  findNodeHandle,\n} from 'react-native';\n\nconst ExponentAR = NativeModules.ExponentAR || {};\n\nconst emitter = new NativeEventEmitter(ExponentAR);\n\n/**\n * Tracking Configuration\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arconfiguration\n */\nexport enum TrackingConfiguration {\n  /**\n   * Provides high-quality AR experiences that use the rear-facing camera precisely track a device's\n   * position and orientation and allow plane detection and hit testing.\n   */\n  World = 'ARWorldTrackingConfiguration',\n  /**\n   * Provides basic AR experiences that use the rear-facing camera and track only a device's\n   * orientation.\n   */\n  Orientation = 'AROrientationTrackingConfiguration',\n  /**\n   * Provides AR experiences that use the front-facing camera and track the movement and expressions\n   * of the user's face.\n   */\n  Face = 'ARFaceTrackingConfiguration',\n}\n\nexport enum DepthDataQuality {\n  Low = 'AVDepthDataQualityLow',\n  High = 'AVDepthDataQualityHigh',\n}\n\nexport enum DepthDataAccuracy {\n  Absolute = 'AVDepthDataAccuracyAbsolute',\n  Relative = 'AVDepthDataAccuracyRelative',\n}\n\nexport type Size = {\n  width: number;\n  height: number;\n};\n\nexport type Vector3 = {\n  x: number;\n  y: number;\n  z: number;\n};\n\nexport type Vector2 = {\n  x: number;\n  y: number;\n};\n\nexport type TextureCoordinate = {\n  u: number;\n  v: number;\n};\n\nexport type Matrix = number[];\n\nexport type FaceGeometry = {\n  vertexCount: number;\n  textureCoordinateCount: number;\n  triangleCount: number;\n  vertices: Vector3[];\n  textureCoordinates: TextureCoordinate[];\n  triangleIndices: number[];\n};\n\nexport type BaseAnchor = {\n  type: AnchorType;\n  transform: Matrix;\n  id: string;\n};\n\nexport type PlaneAnchor = BaseAnchor & {\n  type: AnchorType.Plane;\n  center: Vector3;\n  extent: { width: number; length: number };\n};\n\nexport type ImageAnchor = BaseAnchor & {\n  type: AnchorType.Image;\n  image?: {\n    name: string | null;\n    size: Size;\n  };\n};\n\nexport type FaceAnchor = BaseAnchor & {\n  type: AnchorType.Face;\n  isTracked: boolean;\n  geometry?: FaceGeometry;\n  blendShapes?: { [shape in BlendShape]?: number };\n};\n\nexport type Anchor = BaseAnchor | PlaneAnchor | ImageAnchor | FaceAnchor;\n\nexport type HitTest = {\n  type: number;\n  distance: number;\n  localTransform: number[];\n  worldTransform: number[];\n  anchor: Anchor;\n};\n\nexport type HitTestResults = {\n  hitTest: HitTest[];\n};\n\nexport type DetectionImage = {\n  uri: string;\n  width: number;\n  name?: string;\n};\n\nexport type ARFrameAnchorRequest = {\n  ARFaceTrackingConfiguration?: {\n    geometry?: boolean;\n    blendShapes?: boolean | BlendShape[];\n  };\n};\n\nexport type ARFrameRequest = {\n  anchors?: ARFrameAnchorRequest;\n  rawFeaturePoints?: boolean;\n  lightEstimation?: boolean;\n  capturedDepthData?: boolean;\n};\n\nexport type LightEstimation = {\n  ambientIntensity: number;\n  ambientColorTemperature: number;\n  primaryLightDirection?: Vector3;\n  primaryLightIntensity?: number;\n};\n\nexport type RawFeaturePoint = { x: number; y: number; z: number; id: string };\n\nexport type CameraCalibrationData = {\n  intrinsicMatrix: Matrix;\n  intrinsicMatrixReferenceDimensions: Size;\n  extrinsicMatrix: Matrix;\n  pixelSize: number;\n  lensDistortionLookupTable: any;\n  inverseLensDistortionLookupTable: any;\n  lensDistortionCenter: Vector3;\n};\n\nexport type CapturedDepthData = {\n  timestamp: number;\n  depthDataQuality: DepthDataQuality;\n  depthDataAccuracy: DepthDataAccuracy;\n  depthDataFiltered: boolean;\n  cameraCalibrationData: CameraCalibrationData;\n};\n\nexport type ARFrame = {\n  timestamp: number;\n  anchors?: Anchor[] | null;\n  rawFeaturePoints?: RawFeaturePoint[] | null;\n  lightEstimation?: LightEstimation | null;\n  capturedDepthData?: CapturedDepthData | null;\n};\n\nexport type ARMatrices = {\n  transform: Matrix;\n  viewMatrix: Matrix;\n  projectionMatrix: Matrix;\n};\n\ntype ARStartResult = {\n  capturedImageTexture: number;\n};\n\ntype ReactNativeNodeHandle = number;\n\nexport type ImageResolution = {\n  width: number;\n  height: number;\n};\n\nexport type VideoFormat = {\n  type: string;\n  imageResolution: ImageResolution;\n  framesPerSecond: number;\n};\n\nexport enum BlendShape {\n  BrowDownL = 'browDown_L',\n  BrowDownR = 'browDown_R',\n  BrowInnerUp = 'browInnerUp',\n  BrowOuterUpL = 'browOuterUp_L',\n  BrowOuterUpR = 'browOuterUp_R',\n  CheekPuff = 'cheekPuff',\n  CheekSquintL = 'cheekSquint_L',\n  CheekSquintR = 'cheekSquint_R',\n  EyeBlinkL = 'eyeBlink_L',\n  EyeBlinkR = 'eyeBlink_R',\n  EyeLookDownL = 'eyeLookDown_L',\n  EyeLookDownR = 'eyeLookDown_R',\n  EyeLookInL = 'eyeLookIn_L',\n  EyeLookInR = 'eyeLookIn_R',\n  EyeLookOutL = 'eyeLookOut_L',\n  EyeLookOutR = 'eyeLookOut_R',\n  EyeLookUpL = 'eyeLookUp_L',\n  EyeLookUpR = 'eyeLookUp_R',\n  EyeSquintL = 'eyeSquint_L',\n  EyeSquintR = 'eyeSquint_R',\n  EyeWideL = 'eyeWide_L',\n  EyeWideR = 'eyeWide_R',\n  JawForward = 'jawForward',\n  JawLeft = 'jawLeft',\n  JawOpen = 'jawOpen',\n  JawRight = 'jawRight',\n  MouthClose = 'mouthClose',\n  MouthDimpleL = 'mouthDimple_L',\n  MouthDimpleR = 'mouthDimple_R',\n  MouthFrownL = 'mouthFrown_L',\n  MouthFrownR = 'mouthFrown_R',\n  MouthFunnel = 'mouthFunnel',\n  MouthLeft = 'mouthLeft',\n  MouthLowerDownL = 'mouthLowerDown_L',\n  MouthLowerDownR = 'mouthLowerDown_R',\n  MouthPressL = 'mouthPress_L',\n  MouthPressR = 'mouthPress_R',\n  MouthPucker = 'mouthPucker',\n  MouthRight = 'mouthRight',\n  MouthRollLower = 'mouthRollLower',\n  MouthRollUpper = 'mouthRollUpper',\n  MouthShrugLower = 'mouthShrugLower',\n  MouthShrugUpper = 'mouthShrugUpper',\n  MouthSmileL = 'mouthSmile_L',\n  MouthSmileR = 'mouthSmile_R',\n  MouthStretchL = 'mouthStretch_L',\n  MouthStretchR = 'mouthStretch_R',\n  MouthUpperUpL = 'mouthUpperUp_L',\n  MouthUpperUpR = 'mouthUpperUp_R',\n  NoseSneerL = 'noseSneer_L',\n  NoseSneerR = 'noseSneer_R',\n}\n\nexport enum FaceAnchorProp {\n  Geometry = 'geometry',\n  BlendShapes = 'blendShapes',\n}\n\n/**\n * Plane Detection\n * Options for whether and how ARKit detects flat surfaces in captured images.\n * https://developer.apple.com/documentation/arkit/arplanedetection\n */\nexport enum PlaneDetection {\n  /**\n   * No plane detection is run\n   */\n  None = 'none',\n  /**\n   * Plane detection determines horizontal planes in the scene\n   */\n  Horizontal = 'horizontal',\n  /**\n   * Plane detection determines vertical planes in the scene\n   */\n  Vertical = 'vertical',\n}\n\n/**\n * Hit-Test Result Types\n * Possible types for specifying a hit-test search, or for the result of a hit-test search.\n * https://developer.apple.com/documentation/arkit/arhittestresulttype\n */\nexport enum HitTestResultTypes {\n  /**\n   * Result type from intersecting the nearest feature point.\n   */\n  FeaturePoint = 'featurePoint',\n  /**\n   * Result type from intersecting a horizontal plane estimate, determined for the current frame.\n   */\n  HorizontalPlane = 'horizontalPlane',\n  /**\n   * Result type from intersecting a vertical plane estimate, determined for the current frame.\n   */\n  VerticalPlane = 'verticalPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor.\n   */\n  ExistingPlane = 'existingPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * extent.\n   */\n  ExistingPlaneUsingExtent = 'existingPlaneUsingExtent',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * geometry.\n   */\n  ExistingPlaneUsingGeometry = 'existingPlaneUsingGeometry',\n}\n\n/**\n * World Alignment\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arworldalignment\n */\nexport enum WorldAlignment {\n  /**\n   * Aligns the world with gravity that is defined by vector (0, -1, 0).\n   */\n  Gravity = 'gravity',\n  /**\n   * Aligns the world with gravity that is defined by the vector (0, -1, 0) and heading (w.r.t. true\n   * north) that is given by the vector (0, 0, -1).\n   */\n  GravityAndHeading = 'gravityAndHeading',\n  /**\n   * Aligns the world with the camera’s orientation.\n   */\n  AlignmentCamera = 'alignmentCamera',\n}\n\nexport enum EventType {\n  FrameDidUpdate = ExponentAR.frameDidUpdate,\n  DidFailWithError = ExponentAR.didFailWithError,\n  AnchorsDidUpdate = ExponentAR.anchorsDidUpdate,\n  CameraDidChangeTrackingState = ExponentAR.cameraDidChangeTrackingState,\n  SessionWasInterrupted = ExponentAR.sessionWasInterrupted,\n  SessionInterruptionEnded = ExponentAR.sessionInterruptionEnded,\n}\n\nexport enum AnchorType {\n  Face = 'ARFaceAnchor',\n  Image = 'ARImageAnchor',\n  Plane = 'ARPlaneAnchor',\n  Anchor = 'ARAnchor',\n}\n\nexport enum AnchorEventType {\n  Add = 'add',\n  Update = 'update',\n  Remove = 'remove',\n}\n\nexport enum FrameAttribute {\n  Anchors = 'anchors',\n  RawFeaturePoints = 'rawFeaturePoints',\n  LightEstimation = 'lightEstimation',\n  CapturedDepthData = 'capturedDepthData',\n}\n\nexport enum TrackingState {\n  /** Tracking is not available. */\n  NotAvailable = 'ARTrackingStateNotAvailable',\n  /** Tracking is limited. See tracking reason for details. */\n  Limited = 'ARTrackingStateLimited',\n  /** Tracking is Normal. */\n  Normal = 'ARTrackingStateNormal',\n}\n\nexport enum TrackingStateReason {\n  /** Tracking is not limited. */\n  None = 'ARTrackingStateReasonNone',\n\n  /** Tracking is limited due to initialization in progress. */\n  Initializing = 'ARTrackingStateReasonInitializing',\n\n  /** Tracking is limited due to a excessive motion of the camera. */\n  ExcessiveMotion = 'ARTrackingStateReasonExcessiveMotion',\n\n  /** Tracking is limited due to a lack of features visible to the camera. */\n  InsufficientFeatures = 'ARTrackingStateReasonInsufficientFeatures',\n\n  /** Tracking is limited due to a relocalization in progress. */\n  Relocalizing = 'ARTrackingStateReasonRelocalizing',\n}\n\ntype FrameDidUpdateEvent = {};\n\ntype DidFailWithErrorEvent = { error: Error };\n\ntype AnchorsDidUpdateEvent = {\n  eventType: AnchorEventType;\n  anchors: Anchor[];\n};\n\ntype CameraDidChangeTrackingStateEvent = {\n  trackingState: TrackingState;\n  trackingStateReason: TrackingStateReason;\n};\n\ntype SessionWasInterruptedEvent = {};\n\ntype SessionInterruptionEndedEvent = {};\n\nexport function getVersion(): string {\n  return ExponentAR.ARKitVersion;\n}\n\nconst AvailabilityErrorMessages = {\n  Simulator: `Cannot run EXGL in a simulator`,\n  ANineChip: `ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a`,\n  ARKitOnlyOnIOS: `ARKit can only run on an iOS device! This is a`,\n};\n\nexport function isAvailable(): boolean {\n  // Device has A9 chip\n  const hasA9Chip = Constants.deviceYearClass && Constants.deviceYearClass > 2014;\n\n  if (\n    !Constants.isDevice || // Prevent Simulators\n    // @ts-ignore\n    Platform.isTVOS ||\n    Platform.OS !== 'ios' || // Device is iOS\n    !hasA9Chip ||\n    !ExponentAR.isSupported || // ARKit is included in the build\n    !ExponentAR.startAsync // Older SDK versions (27 and lower) that are fully compatible\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function getUnavailabilityReason(): string {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return `${AvailabilityErrorMessages.ARKitOnlyOnIOS} ${Platform.OS} device`;\n  } else if (Constants.deviceYearClass == null || Constants.deviceYearClass < 2015) {\n    return `${AvailabilityErrorMessages.ANineChip} ${Constants.deviceYearClass} device`;\n  }\n  return 'Unknown Reason';\n}\n\nexport function onFrameDidUpdate(\n  listener: (event: FrameDidUpdateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.FrameDidUpdate, listener);\n}\n\nexport function onDidFailWithError(\n  listener: (event: DidFailWithErrorEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.DidFailWithError, listener);\n}\n\nexport function onAnchorsDidUpdate(\n  listener: (event: AnchorsDidUpdateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.AnchorsDidUpdate, listener);\n}\n\nexport function onCameraDidChangeTrackingState(\n  listener: (event: CameraDidChangeTrackingStateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.CameraDidChangeTrackingState, listener);\n}\n\nexport function onSessionWasInterrupted(\n  listener: (event: SessionWasInterruptedEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionWasInterrupted, listener);\n}\n\nexport function onSessionInterruptionEnded(\n  listener: (event: SessionInterruptionEndedEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionInterruptionEnded, listener);\n}\n\nfunction _addListener(eventType: EventType, event: (...args: any[]) => void): EmitterSubscription {\n  return emitter.addListener(eventType as any, event);\n}\n\nexport function removeAllListeners(eventType?: EventType): void {\n  emitter.removeAllListeners(eventType as any);\n}\n\n// TODO: support multiple types (take an array or bit flags)\nexport function performHitTest(point: Vector2, types: HitTestResultTypes): HitTestResults {\n  if (ExponentAR.performHitTest) {\n    return ExponentAR.performHitTest(point, types);\n  }\n  throw new Error(`AR hit testing is not supported on this device`);\n}\n\nexport async function setDetectionImagesAsync(images: {\n  [name: string]: DetectionImage;\n}): Promise<void> {\n  if (ExponentAR.setDetectionImagesAsync) {\n    await ExponentAR.setDetectionImagesAsync(images);\n  }\n}\n\nexport function getCurrentFrame(attributes?: ARFrameRequest): ARFrame {\n  if (ExponentAR.getCurrentFrame) {\n    return ExponentAR.getCurrentFrame(attributes);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nexport function getARMatrices(near: number, far: number): ARMatrices {\n  if (ExponentAR.getARMatrices) {\n    return ExponentAR.getARMatrices(near, far);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nexport async function stopAsync(): Promise<void> {\n  if (ExponentAR.stopAsync) {\n    await ExponentAR.stopAsync();\n  }\n}\n\nexport async function startAsync(\n  node: ReactNativeNodeHandle | React.Component,\n  configuration: TrackingConfiguration\n): Promise<ARStartResult> {\n  let handle = typeof node === 'number' ? node : _getNodeHandle(node);\n  if (ExponentAR.startAsync) {\n    return await ExponentAR.startAsync(handle, configuration);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nfunction _getNodeHandle(component: React.Component): ReactNativeNodeHandle {\n  let handle = findNodeHandle(component);\n  if (handle === null) {\n    throw new Error(`Could not find the React node handle for the AR component: ${component}`);\n  }\n  return handle;\n}\n\nexport function reset() {\n  if (ExponentAR.reset) {\n    ExponentAR.reset();\n  }\n}\n\nexport function resume() {\n  if (ExponentAR.resume) {\n    ExponentAR.resume();\n  }\n}\n\nexport function pause() {\n  if (ExponentAR.pause) {\n    ExponentAR.pause();\n  }\n}\n\nexport async function setConfigurationAsync(configuration: TrackingConfiguration): Promise<void> {\n  if (ExponentAR.setConfigurationAsync) {\n    await ExponentAR.setConfigurationAsync(configuration);\n  }\n}\n\nexport function getProvidesAudioData(): boolean {\n  if (ExponentAR.getProvidesAudioData) {\n    return ExponentAR.getProvidesAudioData();\n  }\n  return false;\n}\n\nexport function setProvidesAudioData(providesAudioData: boolean): void {\n  if (ExponentAR.setProvidesAudioData) {\n    ExponentAR.setProvidesAudioData(providesAudioData);\n  }\n}\n\nexport function setPlaneDetection(planeDetection: PlaneDetection): void {\n  if (ExponentAR.setPlaneDetection) {\n    ExponentAR.setPlaneDetection(planeDetection);\n  }\n}\n\nexport function getPlaneDetection(): PlaneDetection {\n  if (ExponentAR.getPlaneDetection) {\n    return ExponentAR.getPlaneDetection();\n  }\n  throw new Error(`AR plane detection is not supported on this device`);\n}\n\nexport function getCameraTexture(): number {\n  if (ExponentAR.getCameraTexture) {\n    return ExponentAR.getCameraTexture();\n  }\n  throw new Error(`AR camera textures are not supported on this device`);\n}\n\nexport async function setWorldOriginAsync(matrix_float4x4: Matrix): Promise<void> {\n  if (ExponentAR.setWorldOriginAsync) {\n    await ExponentAR.setWorldOriginAsync(matrix_float4x4);\n  }\n}\n\nexport function setLightEstimationEnabled(isLightEstimationEnabled: boolean) {\n  if (ExponentAR.setLightEstimationEnabled) {\n    ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);\n  }\n}\n\nexport function getLightEstimationEnabled(): boolean {\n  if (ExponentAR.getLightEstimationEnabled) {\n    return ExponentAR.getLightEstimationEnabled();\n  }\n  return false;\n}\n\nexport function setAutoFocusEnabled(isAutoFocusEnabled: boolean): void {\n  if (ExponentAR.setAutoFocusEnabled) {\n    ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);\n  }\n}\n\nexport function getAutoFocusEnabled(): boolean {\n  if (ExponentAR.getAutoFocusEnabled) {\n    return ExponentAR.getAutoFocusEnabled();\n  }\n  return false;\n}\n\nexport function setWorldAlignment(worldAlignment: WorldAlignment): void {\n  if (ExponentAR.setWorldAlignment) {\n    ExponentAR.setWorldAlignment(worldAlignment);\n  }\n}\n\nexport function getWorldAlignment(): WorldAlignment {\n  if (ExponentAR.getWorldAlignment) {\n    return ExponentAR.getWorldAlignment();\n  }\n  throw new Error(`AR world alignment is not supported on this device`);\n}\n\nexport function isConfigurationAvailable(configuration: TrackingConfiguration): boolean {\n  const { width, height } = Dimensions.get('window');\n  // @ts-ignore: re-evaluate this for the new iPhones (2018)\n  const isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {\n    return true;\n  }\n  return !!ExponentAR[configuration];\n}\n\nexport function getSupportedVideoFormats(configuration: TrackingConfiguration): VideoFormat[] {\n  const videoFormats = {\n    [TrackingConfiguration.World]: 'WorldTrackingVideoFormats',\n    [TrackingConfiguration.Orientation]: 'OrientationTrackingVideoFormats',\n    [TrackingConfiguration.Face]: 'FaceTrackingVideoFormats',\n  };\n  const videoFormat = videoFormats[configuration];\n  return ExponentAR[videoFormat] || [];\n}\n\nexport function isFrontCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\n\nexport function isRearCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}\n\n/* Legacy constants */\n\n/**\n * A deprecated alias for `PlaneDetection`\n * July 8, 2019\n */\nexport const PlaneDetectionTypes = PlaneDetection;\n/**\n * A deprecated alias for `WorldAlignment`\n * July 8, 2019\n */\nexport const WorldAlignmentTypes = WorldAlignment;\n/**\n * A deprecated alias for `EventType`\n * July 8, 2019\n */\nexport const EventTypes = EventType;\n/**\n * A deprecated alias for `AnchorType`\n * July 8, 2019\n */\nexport const AnchorTypes = AnchorType;\n/**\n * A deprecated alias for `AnchorEventType`\n * July 8, 2019\n */\nexport const AnchorEventTypes = AnchorEventType;\n/**\n * A deprecated alias for `FrameAttribute`\n * July 8, 2019\n */\nexport const FrameAttributes = FrameAttribute;\n/**\n * A deprecated alias for `TrackingState`\n * July 8, 2019\n */\nexport const TrackingStates = TrackingState;\n/**\n * A deprecated alias for `TrackingStateReason`\n * July 8, 2019\n */\nexport const TrackingStateReasons = TrackingStateReason;\n/**\n * A deprecated alias for `TrackingConfiguration`\n * July 8, 2019\n */\nexport const TrackingConfigurations = TrackingConfiguration;\n"]},"metadata":{},"sourceType":"module"}