{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _GestureHandler2 = _interopRequireDefault(require(\"./GestureHandler\"));\nvar _utils = require(\"./utils\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar DiscreteGestureHandler = function (_GestureHandler) {\n  (0, _inherits2.default)(DiscreteGestureHandler, _GestureHandler);\n  var _super = _createSuper(DiscreteGestureHandler);\n  function DiscreteGestureHandler() {\n    (0, _classCallCheck2.default)(this, DiscreteGestureHandler);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2.default)(DiscreteGestureHandler, [{\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, _ref2) {\n      var x = _ref.x,\n        y = _ref.y,\n        deltaX = _ref.deltaX,\n        deltaY = _ref.deltaY;\n      var maxDeltaX = _ref2.maxDeltaX,\n        maxDeltaY = _ref2.maxDeltaY,\n        maxDistSq = _ref2.maxDistSq,\n        shouldCancelWhenOutside = _ref2.shouldCancelWhenOutside;\n      if (shouldCancelWhenOutside) {\n        if (!this.isPointInView({\n          x: x,\n          y: y\n        })) {\n          return true;\n        }\n      }\n      return (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaX), maxDeltaX) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY), maxDeltaY) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref3) {\n      var _ref3$center = _ref3.center,\n        x = _ref3$center.x,\n        y = _ref3$center.y;\n      var rect = this.view.getBoundingClientRect();\n      return {\n        absoluteX: x,\n        absoluteY: y,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref4, _recognizer, _ref5) {\n      var minPointers = _ref4.minPointers,\n        maxPointers = _ref4.maxPointers,\n        maxDeltaX = _ref4.maxDeltaX,\n        maxDeltaY = _ref4.maxDeltaY,\n        maxDistSq = _ref4.maxDistSq,\n        shouldCancelWhenOutside = _ref4.shouldCancelWhenOutside;\n      var pointerLength = _ref5.maxPointers,\n        center = _ref5.center,\n        deltaX = _ref5.deltaX,\n        deltaY = _ref5.deltaY;\n      var validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n      if (this.shouldFailUnderCustomCriteria((0, _extends2.default)({}, center, {\n        deltaX: deltaX,\n        deltaY: deltaY\n      }), {\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        maxDistSq: maxDistSq,\n        shouldCancelWhenOutside: shouldCancelWhenOutside\n      }) || !validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }]);\n  return DiscreteGestureHandler;\n}(_GestureHandler2.default);\nvar _default = DiscreteGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["DiscreteGestureHandler.ts"],"names":["DiscreteGestureHandler","GestureHandler","x","y","deltaX","deltaY","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","isPointInView","TEST_MAX_IF_NOT_NAN","Math","abs","center","rect","view","getBoundingClientRect","absoluteX","absoluteY","left","top","minPointers","maxPointers","_recognizer","pointerLength","validPointerCount","shouldFailUnderCustomCriteria","isGestureRunning","failed","success"],"mappings":";;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AAAA,IAEeA,sBAAf;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,2DAYI;MAAA,IAFEE,CAAF,QAAEA,CAAF;QAAKC,CAAL,QAAKA,CAAL;QAAQC,MAAR,QAAQA,MAAR;QAAgBC,MAAAA,QAAAA,MAAAA;MAAAA,IACdC,SAAF,SAAEA,SAAF;QAAaC,SAAb,SAAaA,SAAb;QAAwBC,SAAxB,SAAwBA,SAAxB;QAAmCC,uBAAAA,SAAAA,uBAAAA;MAEnC,IAAIA,uBAAJ,EAA6B;QAC3B,IAAI,CAAC,IAAA,CAAKC,aAAL,CAAmB;UAAER,CAAF,EAAEA,CAAF;UAAKC,CAAAA,EAAAA;QAAL,CAAnB,CAAL,EAAmC;UACjC,OAAO,IAAP;QACD;MACF;MACD,OACEQ,IAAAA,0BAAmB,EAACC,IAAI,CAACC,GAALD,CAASR,MAATQ,CAAD,EAAmBN,SAAnB,CAAnBK,IACAA,IAAAA,0BAAmB,EAACC,IAAI,CAACC,GAALD,CAASP,MAATO,CAAD,EAAmBL,SAAnB,CADnBI,IAEAA,IAAAA,0BAAmB,EACjBC,IAAI,CAACC,GAALD,CAASP,MAAM,GAAGA,MAATA,GAAkBD,MAAM,GAAGA,MAApCQ,CADiB,EAEjBJ,SAFiB,CAHrB;IAQD;EAAA;IAAA;IAAA,4CAE+C;MAAA,yBAAzBM,MAAM;QAAIZ,CAAF,gBAAEA,CAAF;QAAKC,CAAAA,gBAAAA,CAAAA;MAElC,IAAMY,IAAI,GAAG,IAAA,CAAKC,IAAL,CAAWC,qBAAX,EAAb;MAEA,OAAO;QACLC,SAAS,EAAEhB,CADN;QAELiB,SAAS,EAAEhB,CAFN;QAGLD,CAAC,EAAEA,CAAC,GAAGa,IAAI,CAACK,IAHP;QAILjB,CAAC,EAAEA,CAAC,GAAGY,IAAI,CAACM;MAJP,CAAP;IAMD;EAAA;IAAA;IAAA,gDAWCG,WATsB,SAWtB;MAAA,IATEF,WADF,SACEA,WADF;QAEEC,WAFF,SAEEA,WAFF;QAGEjB,SAHF,SAGEA,SAHF;QAIEC,SAJF,SAIEA,SAJF;QAKEC,SALF,SAKEA,SALF;QAMEC,uBAAAA,SAAAA,uBAAAA;MAAAA,IAGagB,aAAf,SAAEF,WAAW;QAAiBT,MAA9B,SAA8BA,MAA9B;QAAsCV,MAAtC,SAAsCA,MAAtC;QAA8CC,MAAAA,SAAAA,MAAAA;MAE9C,IAAMqB,iBAAiB,GACrBD,aAAa,IAAIH,WAAjBG,IAAgCA,aAAa,IAAIF,WADnD;MAGA,IACE,IAAA,CAAKI,6BAAL,4BACOb,MAAL;QAAaV,MAAb,EAAaA,MAAb;QAAqBC,MAAAA,EAAAA;MAAAA,IACrB;QACEC,SADF,EACEA,SADF;QAEEC,SAFF,EAEEA,SAFF;QAGEC,SAHF,EAGEA,SAHF;QAIEC,uBAAAA,EAAAA;MAJF,CAFF,CAAA,IAWC,CAACiB,iBAAD,IAAsB,IAAA,CAAKE,gBAZ9B,EAaE;QACA,OAAO;UAAEC,MAAM,EAAE;QAAV,CAAP;MACD;MAED,OAAO;QAAEC,OAAO,EAAEJ;MAAX,CAAP;IACD;EAAA;IAAA;IAAA,oBAxEgB;MACf,OAAO,IAAP;IACD;EAAA;IAAA;IAAA,oBAEgC;MAC/B,OAAO,IAAP;IACD;EAAA;EAAA;AAAA,EAP2CzB,wBAA9C;AAAA,eA4EeD,sBAAf;AAAA","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\n\nabstract class DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { x, y, deltaX, deltaY }: any,\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }: any\n  ) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({ x, y })) {\n        return true;\n      }\n    }\n    return (\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\n      TEST_MAX_IF_NOT_NAN(\n        Math.abs(deltaY * deltaY + deltaX * deltaX),\n        maxDistSq\n      )\n    );\n  }\n\n  transformNativeEvent({ center: { x, y } }: any) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n\n  isGestureEnabledForEvent(\n    {\n      minPointers,\n      maxPointers,\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside,\n    }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength, center, deltaX, deltaY }: any\n  ) {\n    const validPointerCount =\n      pointerLength >= minPointers && pointerLength <= maxPointers;\n\n    if (\n      this.shouldFailUnderCustomCriteria(\n        { ...center, deltaX, deltaY },\n        {\n          maxDeltaX,\n          maxDeltaY,\n          maxDistSq,\n          shouldCancelWhenOutside,\n        }\n      ) ||\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n      (!validPointerCount && this.isGestureRunning)\n    ) {\n      return { failed: true };\n    }\n\n    return { success: validPointerCount };\n  }\n}\n\nexport default DiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"script"}