{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationCache;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _routers = require(\"@react-navigation/routers\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useNavigationCache(_ref) {\n  var state = _ref.state,\n    getState = _ref.getState,\n    navigation = _ref.navigation,\n    _setOptions = _ref.setOptions,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n  var actions = (0, _extends3.default)({}, router.actionCreators, _routers.CommonActions);\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n        rest = (0, _objectWithoutProperties2.default)(navigation, [\"emit\"]);\n      var dispatch = function dispatch(action) {\n        var payload = typeof action === 'function' ? action(getState()) : action;\n        navigation.dispatch(typeof payload === 'object' && payload != null ? (0, _extends3.default)({\n          source: route.key\n        }, payload) : payload);\n      };\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          return dispatch(actions[name].apply(actions, arguments));\n        };\n        return acc;\n      }, {});\n      acc[route.key] = (0, _extends3.default)({}, rest, helpers, emitter.create(route.key), {\n        dispatch: dispatch,\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return (0, _extends3.default)({}, o, (0, _defineProperty2.default)({}, route.key, (0, _extends3.default)({}, o[route.key], options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["useNavigationCache","state","getState","navigation","setOptions","router","emitter","cache","useMemo","current","actions","actionCreators","CommonActions","routes","reduce","acc","route","previous","key","emit","rest","dispatch","action","payload","source","helpers","keys","name","create","options","o","isFocused","index"],"mappings":";;;;;;;;AAAA;AACA;AAAA;AAAA;AAmCe,SAASA,kBAAT,OAUI;EAAA,IANjBC,KADA,QACAA,KADA;IAEAC,QAFA,QAEAA,QAFA;IAGAC,UAHA,QAGAA,UAHA;IAIAC,WAJA,QAIAA,UAJA;IAKAC,MALA,QAKAA,MALA;IAMAC,OAAAA,QAAAA,OAAAA;EAKA,IAAMC,KAAK,GAAG,KAAK,CAACC,OAAN,CACZ;IAAA,OAAO;MAAEC,OAAO,EAAE,CAAA;IAAX,CAAP;EAAA,CADY,EAGZ,CAACP,QAAD,EAAWC,UAAX,EAAuBC,WAAvB,EAAmCC,MAAnC,EAA2CC,OAA3C,CAHY,CAAd;EAMA,IAAMI,OAAO,8BACRL,MAAM,CAACM,cADI,EAEXC,sBAAAA,CAFL;EAKAL,KAAK,CAACE,OAANF,GAAgB,KAAK,CAACM,MAAN,CAAaC,MAAb,CACd,UAACC,GAAD,EAAMC,KAAN,EAAgB;IACd,IAAMC,QAAQ,GAAGV,KAAK,CAACE,OAANF,CAAcS,KAAK,CAACE,GAApBX,CAAjB;IAEA,IAAIU,QAAJ,EAAc;MAEZF,GAAG,CAACC,KAAK,CAACE,GAAP,CAAHH,GAAiBE,QAAjBF;IACD,CAHD,MAGO;MAAA,IAEGI,IAAF,GAAoBhB,UAA1B,CAAQgB,IAAF;QAAWC,IAAAA,0CAASjB,UAA1B;MAEA,IAAMkB,QAAQ,GACZC,SADID,QAAQ,CACZC,MADe,EAEZ;QACH,IAAMC,OAAO,GACX,OAAOD,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACpB,QAAQ,EAAT,CAArC,GAAoDoB,MADtD;QAGAnB,UAAU,CAACkB,QAAXlB,CACE,OAAOoB,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,IAAI,IAA1C;UACMC,MAAM,EAAER,KAAK,CAACE;QAAhB,GAAwBK,OAAAA,IACxBA,OAHNpB,CAAAA;MAKD,CAXD;MAaA,IAAMsB,OAAO,GAAG,MAAM,CAACC,IAAP,CAAYhB,OAAZ,CAAA,CAAqBI,MAArB,CACd,UAACC,GAAD,EAAMY,IAAN,EAAe;QAEbZ,GAAG,CAACY,IAAD,CAAHZ,GAAY;UAAA,OAAkBM,QAAQ,CAACX,OAAO,CAACiB,IAAD,CAAPjB,OAAAA,OAAO,YAAR,CAAtCK;QAAAA;QACA,OAAOA,GAAP;MACD,CALa,EAMd,CAAA,CANc,CAAhB;MASAA,GAAG,CAACC,KAAK,CAACE,GAAP,CAAHH,8BACKK,IADY,EAEZK,OAFY,EAGZnB,OAAO,CAACsB,MAARtB,CAAeU,KAAK,CAACE,GAArBZ,CAHY;QAIfe,QAJe,EAIfA,QAJe;QAKfjB,UAAU,EAAGyB,oBAAAA,OAAD;UAAA,OACVzB,WAAU,CAAE0B,UAAAA,CAAD;YAAA,kCACNA,CADc,oCAEhBd,KAAK,CAACE,GAAP,6BAAkBY,CAAC,CAACd,KAAK,CAACE,GAAP,CAAN,EAAsBW,OAAAA;UAAAA,CAF3B,CANG;QAAA;QAUfE,SAAS,EAAE,qBAAM;UACf,IAAM9B,KAAK,GAAGC,QAAQ,EAAtB;UAEA,IAAID,KAAK,CAACY,MAANZ,CAAaA,KAAK,CAAC+B,KAAnB/B,CAAAA,CAA0BiB,GAA1BjB,KAAkCe,KAAK,CAACE,GAA5C,EAAiD;YAC/C,OAAO,KAAP;UAJa;UASf,OAAOf,UAAU,GAAGA,UAAU,CAAC4B,SAAX5B,EAAH,GAA4B,IAA7C;QACD;MAAA,EApBHY;IAsBD;IAED,OAAOA,GAAP;EACD,CA1Da,EA2Dd,CAAA,CA3Dc,CAAhBR;EA8DA,OAAOA,KAAK,CAACE,OAAb;AACD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"script"}