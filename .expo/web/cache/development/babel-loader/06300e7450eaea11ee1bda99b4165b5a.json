{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsKeyboardShown;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useIsKeyboardShown() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    isKeyboardShown = _React$useState2[0],\n    setIsKeyboardShown = _React$useState2[1];\n  React.useEffect(function () {\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setIsKeyboardShown(true);\n    };\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return setIsKeyboardShown(false);\n    };\n    if (_reactNative.Platform.OS === 'ios') {\n      _reactNative.Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      _reactNative.Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      _reactNative.Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      _reactNative.Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n    return function () {\n      if (_reactNative.Platform.OS === 'ios') {\n        _reactNative.Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        _reactNative.Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        _reactNative.Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        _reactNative.Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n  return isKeyboardShown;\n}","map":{"version":3,"sources":["useIsKeyboardShown.tsx"],"names":["useIsKeyboardShown","isKeyboardShown","setIsKeyboardShown","React","useState","useEffect","handleKeyboardShow","handleKeyboardHide","Platform","OS","Keyboard","addListener","removeListener"],"mappings":";;;;;;AAAA;AACA;AAAA;AAAA;AAEe,SAASA,kBAAT,GAA8B;EAAA,sBACGG,KAAK,CAACC,QAAND,CAAe,KAAfA,CAA9C;IAAA;IAAOF,eAAD;IAAkBC,kBAAlB;EAENC,KAAK,CAACE,SAANF,CAAgB,YAAM;IACpB,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkB;MAAA,OAASJ,kBAAkB,CAAC,IAAD,CAAnD;IAAA;IACA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAkB;MAAA,OAASL,kBAAkB,CAAC,KAAD,CAAnD;IAAA;IAEA,IAAIM,qBAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzBE,qBAAQ,CAACC,WAATD,CAAqB,kBAArBA,EAAyCJ,kBAAzCI,CAAAA;MACAA,qBAAQ,CAACC,WAATD,CAAqB,kBAArBA,EAAyCH,kBAAzCG,CAAAA;IACD,CAHD,MAGO;MACLA,qBAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCJ,kBAAxCI,CAAAA;MACAA,qBAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCH,kBAAxCG,CAAAA;IACD;IAED,OAAO,YAAM;MACX,IAAIF,qBAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;QACzBE,qBAAQ,CAACE,cAATF,CAAwB,kBAAxBA,EAA4CJ,kBAA5CI,CAAAA;QACAA,qBAAQ,CAACE,cAATF,CAAwB,kBAAxBA,EAA4CH,kBAA5CG,CAAAA;MACD,CAHD,MAGO;QACLA,qBAAQ,CAACE,cAATF,CAAwB,iBAAxBA,EAA2CJ,kBAA3CI,CAAAA;QACAA,qBAAQ,CAACE,cAATF,CAAwB,iBAAxBA,EAA2CH,kBAA3CG,CAAAA;MACD;IACF,CARD;EASD,CArBDP,EAqBG,EArBHA,CAAAA;EAuBA,OAAOF,eAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n"]},"metadata":{},"sourceType":"script"}