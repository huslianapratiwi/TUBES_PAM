{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nexport default function getActionFromState(state) {\n  if (state.routes.length === 0) {\n    return undefined;\n  }\n\n  var route = state.routes[state.routes.length - 1];\n  var payload = {\n    name: route.name,\n    params: _objectSpread({}, route.params)\n  };\n  var current = route.state;\n  var params = payload.params;\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n    route = current.routes[current.routes.length - 1];\n    params.initial = current.routes.length === 1;\n    params.screen = route.name;\n    if (route.state) {\n      params.params = _objectSpread({}, route.params);\n      params = params.params;\n    } else {\n      params.params = route.params;\n    }\n    current = route.state;\n  }\n  return {\n    type: 'NAVIGATE',\n    payload: payload\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,eAAe,SAASA,kBAAT,CACbC,KADa,EAEe;EAC5B,IAAIA,KAAK,CAACC,MAAN,CAAaC,MAAb,KAAwB,CAA5B,EAA+B;IAC7B,OAAOC,SAAP;EACD;;EAID,IAAIC,KAAK,GAAGJ,KAAK,CAACC,MAAN,CAAaD,KAAK,CAACC,MAAN,CAAaC,MAAb,GAAsB,CAAnC,CAAZ;EAEA,IAAIG,OAAiD,GAAG;IACtDC,IAAI,EAAEF,KAAK,CAACE,IAD0C;IAEtDC,MAAM,oBAAOH,KAAK,CAACG,MAAb;EAFgD,CAAxD;EAKA,IAAIC,OAAO,GAAGJ,KAAK,CAACJ,KAApB;EACA,IAAIO,MAAM,GAAGF,OAAO,CAACE,MAArB;EAEA,OAAOC,OAAP,EAAgB;IACd,IAAIA,OAAO,CAACP,MAAR,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;MAC/B,OAAOC,SAAP;IACD;IAEDC,KAAK,GAAGI,OAAO,CAACP,MAAR,CAAeO,OAAO,CAACP,MAAR,CAAeC,MAAf,GAAwB,CAAvC,CAAR;IACAK,MAAM,CAACE,OAAP,GAAiBD,OAAO,CAACP,MAAR,CAAeC,MAAf,KAA0B,CAA3C;IACAK,MAAM,CAACG,MAAP,GAAgBN,KAAK,CAACE,IAAtB;IAEA,IAAIF,KAAK,CAACJ,KAAV,EAAiB;MACfO,MAAM,CAACA,MAAP,qBAAqBH,KAAK,CAACG,MAA3B;MACAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;IACD,CAHD,MAGO;MACLA,MAAM,CAACA,MAAP,GAAgBH,KAAK,CAACG,MAAtB;IACD;IAEDC,OAAO,GAAGJ,KAAK,CAACJ,KAAhB;EACD;EAED,OAAO;IACLW,IAAI,EAAE,UADD;IAELN;EAFK,CAAP;AAID","names":["getActionFromState","state","routes","length","undefined","route","payload","name","params","current","initial","screen","type"],"sources":["getActionFromState.tsx"],"sourcesContent":["import type { PartialState, NavigationState } from '@react-navigation/routers';\n\ntype NavigateParams = {\n  screen?: string;\n  params?: NavigateParams;\n  initial?: boolean;\n};\n\ntype NavigateAction = {\n  type: 'NAVIGATE';\n  payload: { name: string; params: NavigateParams };\n};\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>\n): NavigateAction | undefined {\n  if (state.routes.length === 0) {\n    return undefined;\n  }\n\n  // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n  let route = state.routes[state.routes.length - 1];\n\n  let payload: { name: string; params: NavigateParams } = {\n    name: route.name,\n    params: { ...route.params },\n  };\n\n  let current = route.state;\n  let params = payload.params;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    route = current.routes[current.routes.length - 1];\n    params.initial = current.routes.length === 1;\n    params.screen = route.name;\n\n    if (route.state) {\n      params.params = { ...route.params };\n      params = params.params;\n    } else {\n      params.params = route.params;\n    }\n\n    current = route.state;\n  }\n\n  return {\n    type: 'NAVIGATE',\n    payload,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}