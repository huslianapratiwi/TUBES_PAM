{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\nvar _constants = require(\"./constants\");\nvar _DraggingGestureHandler = _interopRequireDefault(require(\"./DraggingGestureHandler\"));\nvar _utils = require(\"./utils\");\nvar _State = require(\"../State\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar PanGestureHandler = function (_DraggingGestureHandl) {\n  (0, _inherits2.default)(PanGestureHandler, _DraggingGestureHandl);\n  var _super = _createSuper(PanGestureHandler);\n  function PanGestureHandler() {\n    (0, _classCallCheck2.default)(this, PanGestureHandler);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2.default)(PanGestureHandler, [{\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return (0, _extends2.default)({}, (0, _get2.default)((0, _getPrototypeOf2.default)(PanGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        direction: this.getDirection()\n      });\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var nextState = (0, _get2.default)((0, _getPrototypeOf2.default)(PanGestureHandler.prototype), \"getState\", this).call(this, type);\n      if (this.previousState === _State.State.UNDETERMINED && nextState === _State.State.ACTIVE) {\n        return _State.State.BEGAN;\n      }\n      return nextState;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var config = this.getConfig();\n      var activeOffsetXStart = config.activeOffsetXStart,\n        activeOffsetXEnd = config.activeOffsetXEnd,\n        activeOffsetYStart = config.activeOffsetYStart,\n        activeOffsetYEnd = config.activeOffsetYEnd,\n        minDist = config.minDist;\n      var directions = [];\n      var horizontalDirections = [];\n      if (!(0, _utils.isnan)(minDist)) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n      if (!(0, _utils.isnan)(activeOffsetXStart)) {\n        horizontalDirections.push(_hammerjs.default.DIRECTION_LEFT);\n      }\n      if (!(0, _utils.isnan)(activeOffsetXEnd)) {\n        horizontalDirections.push(_hammerjs.default.DIRECTION_RIGHT);\n      }\n      if (horizontalDirections.length === 2) {\n        horizontalDirections = [_hammerjs.default.DIRECTION_HORIZONTAL];\n      }\n      directions = directions.concat(horizontalDirections);\n      var verticalDirections = [];\n      if (!(0, _utils.isnan)(activeOffsetYStart)) {\n        verticalDirections.push(_hammerjs.default.DIRECTION_UP);\n      }\n      if (!(0, _utils.isnan)(activeOffsetYEnd)) {\n        verticalDirections.push(_hammerjs.default.DIRECTION_DOWN);\n      }\n      if (verticalDirections.length === 2) {\n        verticalDirections = [_hammerjs.default.DIRECTION_VERTICAL];\n      }\n      directions = directions.concat(verticalDirections);\n      if (!directions.length) {\n        return _hammerjs.default.DIRECTION_NONE;\n      }\n      if (directions[0] === _hammerjs.default.DIRECTION_HORIZONTAL && directions[1] === _hammerjs.default.DIRECTION_VERTICAL) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n      if (horizontalDirections.length && verticalDirections.length) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n      return directions[0];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          minDistSq: 10\n        };\n      }\n      return this.config;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, criteria) {\n      var deltaX = _ref.deltaX,\n        deltaY = _ref.deltaY;\n      return !(0, _utils.isnan)(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !(0, _utils.isnan)(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !(0, _utils.isnan)(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !(0, _utils.isnan)(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n  }, {\n    key: \"shouldActivateUnderCustomCriteria\",\n    value: function shouldActivateUnderCustomCriteria(_ref2, criteria) {\n      var deltaX = _ref2.deltaX,\n        deltaY = _ref2.deltaY,\n        velocity = _ref2.velocity;\n      return !(0, _utils.isnan)(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !(0, _utils.isnan)(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !(0, _utils.isnan)(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !(0, _utils.isnan)(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n        x: deltaX,\n        y: deltaY\n      }), criteria.minDistSq) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.x, criteria.minVelocityX) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.y, criteria.minVelocityY) || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)(velocity), criteria.minVelocitySq);\n    }\n  }, {\n    key: \"shouldMultiFingerPanFail\",\n    value: function shouldMultiFingerPanFail(_ref3) {\n      var pointerLength = _ref3.pointerLength,\n        scale = _ref3.scale,\n        deltaRotation = _ref3.deltaRotation;\n      if (pointerLength <= 1) {\n        return false;\n      }\n      var deltaScale = Math.abs(scale - 1);\n      var absDeltaRotation = Math.abs(deltaRotation);\n      if (deltaScale > _constants.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n        return true;\n      }\n      if (absDeltaRotation > _constants.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(criteria) {\n      return (0, _utils.isValidNumber)(criteria.minDistSq) || (0, _utils.isValidNumber)(criteria.minVelocityX) || (0, _utils.isValidNumber)(criteria.minVelocityY) || (0, _utils.isValidNumber)(criteria.minVelocitySq) || (0, _utils.isValidNumber)(criteria.activeOffsetXStart) || (0, _utils.isValidNumber)(criteria.activeOffsetXEnd) || (0, _utils.isValidNumber)(criteria.activeOffsetYStart) || (0, _utils.isValidNumber)(criteria.activeOffsetYEnd);\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(props, _recognizer, inputData) {\n      if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n        return {\n          failed: true\n        };\n      }\n      var velocity = {\n        x: inputData.velocityX,\n        y: inputData.velocityY\n      };\n      if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n        deltaX: inputData.deltaX,\n        deltaY: inputData.deltaY,\n        velocity: velocity\n      }, props)) {\n        if (this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation\n        })) {\n          return {\n            failed: true\n          };\n        }\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false\n      };\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'pan';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Pan;\n    }\n  }]);\n  return PanGestureHandler;\n}(_DraggingGestureHandler.default);\nvar _default = PanGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["PanGestureHandler.ts"],"names":["PanGestureHandler","DraggingGestureHandler","Hammer","Pan","direction","getDirection","type","nextState","previousState","State","UNDETERMINED","ACTIVE","BEGAN","config","getConfig","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","isnan","DIRECTION_ALL","push","DIRECTION_LEFT","DIRECTION_RIGHT","length","DIRECTION_HORIZONTAL","concat","verticalDirections","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_NONE","hasCustomActivationCriteria","minDistSq","deltaX","deltaY","criteria","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","velocity","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","minVelocityX","minVelocityY","minVelocitySq","pointerLength","scale","deltaRotation","deltaScale","Math","abs","absDeltaRotation","MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD","MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD","isValidNumber","props","_recognizer","inputData","shouldFailUnderCustomCriteria","failed","velocityX","velocityY","shouldActivateUnderCustomCriteria","shouldMultiFingerPanFail","maxPointers","success"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport {\n  EventMap,\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nimport { Config, HammerInputExt } from './GestureHandler';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getState(type: keyof typeof EventMap) {\n    const nextState = super.getState(type);\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n    if (\n      this.previousState === State.UNDETERMINED &&\n      nextState === State.ACTIVE\n    ) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions: number[] = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart)) {\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    }\n    if (!isnan(activeOffsetXEnd)) {\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (horizontalDirections.length === 2) {\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n    }\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart)) {\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    }\n    if (!isnan(activeOffsetYEnd)) {\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n    }\n\n    if (verticalDirections.length === 2) {\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n    }\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { deltaX, deltaY }: HammerInputExt,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.failOffsetXStart) &&\n        deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) &&\n        deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria(\n    { deltaX, deltaY, velocity }: any,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) &&\n        deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) &&\n        deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) &&\n        deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) &&\n        deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\n        criteria.minDistSq\n      ) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation,\n  }: {\n    deltaRotation: number;\n    pointerLength: number;\n    scale: number;\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\n  ) {\n    return (\n      isValidNumber(criteria.minDistSq) ||\n      isValidNumber(criteria.minVelocityX) ||\n      isValidNumber(criteria.minVelocityY) ||\n      isValidNumber(criteria.minVelocitySq) ||\n      isValidNumber(criteria.activeOffsetXStart) ||\n      isValidNumber(criteria.activeOffsetXEnd) ||\n      isValidNumber(criteria.activeOffsetYStart) ||\n      isValidNumber(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(\n    props: any,\n    _recognizer: any,\n    inputData: HammerInputExt & { deltaRotation: number }\n  ) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this.hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nexport default PanGestureHandler;\n"]},"metadata":{},"sourceType":"script"}